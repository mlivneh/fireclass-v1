================================================================================
COLLECTED FILES - FIRECLASS PROJECT
================================================================================

================================================================================
File 1/34: C:\Users\Meir Livneh\Documents\fireClass\BUILD\config.json
================================================================================

{
  "studentAppUrl": "https://class-board-ad64e.web.app/student-app.html",
  "games": [
    {
      "name": "AI Model Training",
      "description": "Visual Recognition training",
      "icon": "üìö",
      "url": "https://meir.world/face-recognition/"
    },
    {
      "name": "TM",
      "description": "Goggle Teachable Machines",
      "icon": "üéØ",
      "url": "https://teachablemachine.withgoogle.com/train"
    },
    {
      "name": "PhET",
      "description": "Projectile Data Lab",
      "icon": "üéØ",
      "url": "https://phet.colorado.edu/sims/html/projectile-data-lab/latest/projectile-data-lab_all.html"
    },
    {
      "name": "Kahoot",
      "description": "Interactive quiz game",
      "icon": "üéØ",
      "url": "https://kahoot.it"
    },
    {
      "name": "Wordwall",
      "description": "Word games and creation",
      "icon": "üé≤",
      "url": "https://wordwall.net"
    },
    {
      "name": "Scratch",
      "description": "Programming and creation",
      "icon": "üê±",
      "url": "https://scratch.mit.edu"
    }
  ]
}


================================================================================
File 2/34: C:\Users\Meir Livneh\Documents\fireClass\BUILD\css\student-app.css
================================================================================

body,html{margin:0;padding:0;width:100%;height:100%;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif;background-color:#f0f2f5;overflow:hidden;direction:ltr}.container{display:flex;justify-content:center;align-items:center;height:100%}.login-box{background:#fff;padding:40px;border-radius:12px;box-shadow:0 8px 30px rgba(0,0,0,.12);text-align:center;width:90%;max-width:400px}.login-box h1{color:#333;margin-bottom:10px}.login-box p{color:#666;margin-bottom:25px}#player-name{width:100%;padding:12px;margin-bottom:20px;border:1px solid #ccc;border-radius:8px;font-size:16px;box-sizing:border-box;text-align:left;direction:ltr}.input-group{margin-bottom:20px;text-align:left}.input-group label{display:block;margin-bottom:5px;font-weight:500;color:#555}#teacher-uid{width:100%;padding:12px;border:1px solid #ccc;border-radius:8px;font-size:16px;box-sizing:border-box;text-align:left;direction:ltr}.login-box button{width:100%;padding:12px;border:none;background-color:#007bff;color:#fff;border-radius:8px;font-size:16px;font-weight:700;cursor:pointer;transition:background-color .2s}.login-box button:hover{background-color:#0056b3}#main-container{width:100%;height:100%}#content-frame{width:100%;height:100%;border:none}.new-message-indicator{animation:pulse 1.5s infinite}@keyframes pulse{0%{transform:scale(1);box-shadow:0 0 0 0 rgba(0,123,255,.7)}70%{transform:scale(1.1);box-shadow:0 0 10px 20px rgba(0,123,255,0)}100%{transform:scale(1);box-shadow:0 0 0 0 rgba(0,123,255,0)}}@keyframes shake{0%,100%{transform:translateX(0)}25%{transform:translateX(-2px)}75%{transform:translateX(2px)}}.new-message-shake{animation:shake .5s ease-in-out 3}@keyframes bounce{0%,100%,20%,50%,80%{transform:translateY(0)}40%{transform:translateY(-10px)}60%{transform:translateY(-5px)}}.message-badge{position:absolute!important;top:-5px!important;right:-5px!important;background:#dc3545!important;color:#fff!important;border-radius:50%!important;width:20px!important;height:20px!important;font-size:12px!important;font-weight:700!important;display:flex!important;align-items:center!important;justify-content:center!important;animation:bounce .5s ease!important;z-index:1001!important}#poll-interface{display:flex;gap:15px;align-items:center;justify-content:center;text-align:center;direction:ltr}#poll-interface button{transition:all .3s ease;font-family:inherit}#poll-interface button:hover{transform:translateY(-2px);box-shadow:0 4px 12px rgba(0,0,0,.3)}#poll-interface button:active{transform:translateY(0)}#poll-interface button:disabled{opacity:.5;cursor:not-allowed;transform:none}#poll-interface textarea{text-align:left;direction:ltr}.blinking{animation:blink-animation .5s infinite alternate}@keyframes blink-animation{from{transform:scale(1);box-shadow:0 0 10px #fff}to{transform:scale(1.1);box-shadow:0 0 20px #ffeb3b,0 0 30px #ffeb3b}}#classroom-ai-container{z-index:10002!important}#classroom-chat-btn{z-index:10000!important}#classroom-chat-container{z-index:10001!important}@keyframes chatSlideIn{from{transform:translateX(100%);opacity:0}to{transform:translateX(0);opacity:1}}.chat-auto-opened{border:2px solid #007bff!important;box-shadow:0 0 20px rgba(0,123,255,.5)!important}@keyframes chatButtonPulse{0%{transform:scale(1);box-shadow:0 4px 12px rgba(0,0,0,.3)}50%{transform:scale(1.1);box-shadow:0 6px 20px rgba(0,123,255,.4)}100%{transform:scale(1);box-shadow:0 4px 12px rgba(0,0,0,.3)}}.chat-button-pulse{animation:chatButtonPulse .6s ease-in-out}@media (max-width:768px){.login-box{padding:30px;margin:20px}#poll-interface{flex-direction:column;gap:10px;padding:15px}#poll-interface button{width:100%;max-width:200px}}.success-notification{background:#28a745;color:#fff;padding:10px 15px;border-radius:6px;margin:10px 0;text-align:center;animation:fadeIn .3s ease}@keyframes fadeIn{from{opacity:0;transform:translateY(-10px)}to{opacity:1;transform:translateY(0)}}


================================================================================
File 3/34: C:\Users\Meir Livneh\Documents\fireClass\BUILD\css\teacher-dashboard.css
================================================================================

*{margin:0;padding:0;box-sizing:border-box}body{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Arial,sans-serif;background:linear-gradient(135deg,#667eea 0,#764ba2 100%);min-height:100vh;color:#333}.header{background:rgba(255,255,255,.95);backdrop-filter:blur(10px);box-shadow:0 2px 20px rgba(0,0,0,.1);position:sticky;top:0;z-index:1000}.nav-container{max-width:1400px;margin:0 auto;display:flex;align-items:center;justify-content:space-between;padding:0 20px;height:70px}.logo{display:flex;align-items:center;gap:10px;font-size:24px;font-weight:700;color:#2c3e50}.nav-menu{display:flex;list-style:none;gap:0}.nav-item{position:relative}.nav-link{display:flex;align-items:center;gap:8px;padding:15px 20px;text-decoration:none;color:#555;font-weight:500;transition:all .3s ease;border-radius:8px;margin:0 2px}.nav-link:hover{background:linear-gradient(135deg,#667eea 0,#764ba2 100%);color:#fff;transform:translateY(-2px)}.nav-icon{font-size:18px}.dropdown{position:absolute;top:100%;left:0;background:#fff;min-width:280px;border-radius:12px;box-shadow:0 10px 40px rgba(0,0,0,.15);opacity:0;visibility:hidden;transform:translateY(-10px);transition:all .3s ease;border:1px solid #e1e5e9;overflow:hidden}.nav-item:hover .dropdown{opacity:1;visibility:visible;transform:translateY(0)}.dropdown-header{padding:15px 20px;background:linear-gradient(135deg,#f8f9fa 0,#e9ecef 100%);border-bottom:1px solid #dee2e6;font-weight:700;color:#495057;font-size:14px}.dropdown-item{display:flex;align-items:center;gap:12px;padding:12px 20px;text-decoration:none;color:#555;transition:all .2s ease;border-bottom:1px solid #f8f9fa}.dropdown-item:hover{background:#f8f9fa;color:#007bff;padding-left:25px}.dropdown-item:last-child{border-bottom:none}.dropdown-icon{font-size:16px;width:20px;text-align:center}.dropdown-content{flex:1}.dropdown-title{font-weight:600;margin-bottom:2px}.dropdown-desc{font-size:12px;color:#6c757d}.status-indicator{display:flex;align-items:center;gap:8px;padding:8px 16px;background:#28a745;color:#fff;border-radius:20px;font-size:14px;font-weight:500}.status-dot{width:8px;height:8px;background:#fff;border-radius:50%;animation:pulse 2s infinite}.connected{background:#27ae60;color:#fff}.disconnected{background:#e74c3c;color:#fff}.main-content{max-width:1400px;margin:30px auto;padding:0 20px;display:grid;grid-template-columns:1fr 1fr 400px;gap:30px}.section{background:#fff;border-radius:15px;padding:25px;box-shadow:0 5px 25px rgba(0,0,0,.1);backdrop-filter:blur(10px)}.section h2{margin-bottom:20px;color:#2c3e50;font-size:20px;display:flex;align-items:center;gap:10px;border-bottom:2px solid #3498db;padding-bottom:10px}.students-list{max-height:300px;overflow-y:auto}.student-item{background:#fff;margin:10px 0;padding:15px;border-radius:8px;border-left:4px solid #27ae60;box-shadow:0 2px 5px rgba(0,0,0,.1)}.student-name{font-weight:700;font-size:1.2em;color:#2c3e50}.student-status{font-size:.9em;color:#27ae60;margin-top:5px}.no-students{text-align:center;color:#666;font-style:italic;padding:20px}.chat-messages,.messages-area{max-height:400px;overflow-y:auto;border:1px solid #ddd;border-radius:8px;background:#fff;padding:15px;margin-bottom:15px}.message-item{padding:15px;border-bottom:1px solid #eee;animation:slideInMessage .3s ease-out;text-align:left;direction:ltr}.message-item:last-child{border-bottom:none}.message-sender{font-weight:700;color:#3498db;margin-bottom:5px}.message-content{color:#555;margin-bottom:5px}.message-time{font-size:.8em;color:#999}.no-messages{text-align:center;color:#666;font-style:italic;padding:20px}.chat-input,.send-message-area{background:#fff;padding:15px;border-radius:10px;box-shadow:0 2px 8px rgba(0,0,0,.1);margin-top:15px}.chat-input textarea,.message-input{width:100%;padding:12px;border:2px solid #ddd;border-radius:20px;resize:none;font-family:inherit;font-size:14px;line-height:1.4;transition:all .3s ease;direction:ltr;text-align:left;min-height:60px}.chat-input textarea:focus,.message-input:focus{outline:0;border-color:#3498db;box-shadow:0 0 10px rgba(52,152,219,.2)}.chat-input button,.send-button{width:100%;margin-top:10px;padding:12px;background:linear-gradient(135deg,#3498db 0,#2980b9 100%);color:#fff;border:none;border-radius:20px;font-weight:700;cursor:pointer;transition:all .3s ease;font-size:16px}.chat-input button:hover,.send-button:hover{background:linear-gradient(135deg,#2980b9 0,#1f5f8b 100%);transform:translateY(-2px);box-shadow:0 4px 15px rgba(52,152,219,.3)}.chat-input button:active,.send-button:active{transform:translateY(0)}.activity-log{max-height:300px;overflow-y:auto;padding:10px}.activity-item{background:#fff;margin:8px 0;padding:12px;border-radius:6px;border-left:3px solid #e74c3c;font-size:.9em;box-shadow:0 1px 3px rgba(0,0,0,.1);text-align:left;direction:ltr}.activity-time{font-size:.8em;color:#666;margin-bottom:5px}.activity-content{color:#333}.no-activity{text-align:center;color:#666;font-style:italic;padding:20px}.stats{display:grid;grid-template-columns:repeat(auto-fit,minmax(150px,1fr));gap:15px;margin-bottom:20px}.stat-card{background:#fff;padding:20px;border-radius:10px;text-align:center;box-shadow:0 2px 5px rgba(0,0,0,.1)}.stat-number{font-size:2em;font-weight:700;color:#3498db}.stat-label{color:#666;margin-top:5px}.danger-item:hover{background:#fff5f5!important;color:#dc3545!important}.success-item:hover{background:#f0fff4!important;color:#28a745!important}.warning-item:hover{background:#fffbf0!important;color:#ffc107!important}.tool-button.danger{background:linear-gradient(135deg,#e74c3c 0,#c0392b 100%);color:#fff;border:2px solid #c0392b}.tool-button.danger:hover{background:linear-gradient(135deg,#c0392b 0,#a93226 100%);transform:translateY(-3px);box-shadow:0 6px 20px rgba(231,76,60,.4)}.tool-button.danger:active{transform:translateY(-1px)}.tool-button.danger .tool-icon{font-size:24px}.tool-button.danger .tool-label{font-weight:700}.quick-actions{margin-top:20px}.action-button{display:block;width:100%;padding:10px;margin:8px 0;background:#27ae60;color:#fff;border:none;border-radius:6px;cursor:pointer;font-size:14px;transition:background .3s}.action-button:hover{background:#229954}.action-button.secondary{background:#95a5a6}.action-button.secondary:hover{background:#7f8c8d}.enhanced-debug-console{position:fixed;bottom:10px;left:10px;width:500px;height:200px;background:#1a1a1a;color:#0f0;font-family:'Courier New',monospace;font-size:11px;padding:10px;border-radius:8px;overflow-y:auto;z-index:9999;border:2px solid #333;box-shadow:0 4px 20px rgba(0,0,0,.5);display:none;direction:ltr;text-align:left}@keyframes pulse{0%,100%{opacity:1}50%{opacity:.5}}@keyframes slideInMessage{from{transform:translateX(-100%);opacity:0}to{transform:translateX(0);opacity:1}}.pulse{animation:pulse 2s infinite}.activity-log::-webkit-scrollbar,.chat-messages::-webkit-scrollbar,.messages-area::-webkit-scrollbar,.students-list::-webkit-scrollbar{width:6px}.activity-log::-webkit-scrollbar-track,.chat-messages::-webkit-scrollbar-track,.messages-area::-webkit-scrollbar-track,.students-list::-webkit-scrollbar-track{background:#f1f1f1;border-radius:3px}.activity-log::-webkit-scrollbar-thumb,.chat-messages::-webkit-scrollbar-thumb,.messages-area::-webkit-scrollbar-thumb,.students-list::-webkit-scrollbar-thumb{background:#c1c1c1;border-radius:3px}.activity-log::-webkit-scrollbar-thumb:hover,.chat-messages::-webkit-scrollbar-thumb:hover,.messages-area::-webkit-scrollbar-thumb:hover,.students-list::-webkit-scrollbar-thumb:hover{background:#a8a8a8}@media (max-width:768px){.nav-menu{display:none}.main-content{grid-template-columns:1fr;gap:20px;margin:20px auto}.dropdown{position:fixed;top:70px;left:20px;right:20px;min-width:auto}.section{padding:15px}.nav-container{padding:0 15px}}.modal-overlay{position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,.5);display:flex;align-items:center;justify-content:center;z-index:9998!important;opacity:0;visibility:hidden;transition:all .3s ease}.modal-overlay.visible{opacity:1;visibility:visible}.modal-content{background:#fff;border-radius:15px;box-shadow:0 20px 60px rgba(0,0,0,.3);max-width:500px;width:90%;max-height:90vh;overflow:hidden;transform:scale(.9);transition:transform .3s ease}.modal-overlay.visible .modal-content{transform:scale(1)}.modal-header{background:linear-gradient(135deg,#667eea 0,#764ba2 100%);color:#fff;padding:20px;display:flex;justify-content:space-between;align-items:center}.modal-header h3{margin:0;font-size:18px}.modal-close{background:0 0;border:none;color:#fff;font-size:24px;cursor:pointer;padding:0;width:30px;height:30px;display:flex;align-items:center;justify-content:center;border-radius:50%;transition:background .2s ease}.modal-close:hover{background:rgba(255,255,255,.2)}.modal-body{padding:20px;text-align:left;direction:ltr}.modal-body p{margin-bottom:15px;color:#666;font-size:14px}.modal-body textarea{width:100%;padding:12px;border:1px solid #ddd;border-radius:8px;resize:vertical;font-family:inherit;font-size:14px;outline:0;transition:border-color .2s ease;direction:ltr;text-align:left}.modal-body textarea:focus{border-color:#667eea}.modal-footer{padding:20px;display:flex;gap:10px;justify-content:flex-end;border-top:1px solid #eee}.modal-footer button{padding:10px 20px;border:none;border-radius:6px;cursor:pointer;font-size:14px;transition:all .2s ease}.modal-footer button:not(.primary){background:#f8f9fa;color:#666}.modal-footer button:not(.primary):hover{background:#e9ecef}.modal-footer button.primary{background:linear-gradient(135deg,#667eea 0,#764ba2 100%);color:#fff}.modal-footer button.primary:hover{transform:translateY(-1px);box-shadow:0 4px 12px rgba(102,126,234,.4)}.private-message-btn{background:linear-gradient(135deg,#43a047 0,#388e3c 100%);color:#fff;border:none;padding:6px 12px;border-radius:6px;font-size:12px;cursor:pointer;transition:all .2s ease}.private-message-btn:hover{transform:translateY(-1px);box-shadow:0 4px 12px rgba(67,160,71,.4)}.student-item{display:flex;justify-content:space-between;align-items:center;padding:12px;border:1px solid #eee;border-radius:8px;margin-bottom:8px;background:#f8f9fa;transition:all .2s ease}.student-item:hover{background:#e9ecef;border-color:#667eea}.student-info{display:flex;align-items:center;gap:10px;flex:1}.student-name{font-weight:600;color:#333}.student-actions{display:flex;gap:8px}.message-item{background:#f8f9fa;border-radius:8px;padding:12px;margin-bottom:8px;border-left:4px solid #667eea}.message-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}.message-sender{font-weight:600;color:#333}.message-time{font-size:12px;color:#666}.message-content{color:#555;line-height:1.4}.room-code-section{grid-column:1/-1;margin-bottom:20px}.ai-model-btn.active{background:linear-gradient(135deg,#4caf50 0,#45a049 100%)!important;color:#fff!important}.ai-model-btn.active .dropdown-desc,.ai-model-btn.active .dropdown-title{color:#fff!important}.current-ai-model{font-weight:700;color:#4caf50}.header-room-display{display:flex;align-items:center;gap:12px;background-color:rgba(255,255,255,.1);padding:5px 15px;border-radius:20px;border:1px solid rgba(255,255,255,.2)}.room-code-label{font-size:14px;font-weight:500;color:#444}.room-code-value{font-size:20px;font-weight:700;color:#3f51b5;letter-spacing:2px}.qr-code{width:40px;height:40px;border-radius:4px;cursor:pointer;transition:transform .2s ease,box-shadow .2s ease}.qr-code:hover{transform:scale(3.5);box-shadow:0 4px 15px rgba(0,0,0,.2);border:2px solid #fff}#loading-overlay{position:fixed;inset:0;background-color:rgba(94,91,204,.95);z-index:10001;display:flex;align-items:center;justify-content:center;transition:opacity .5s ease}#loading-overlay.hidden{opacity:0;pointer-events:none}.spinner{width:60px;height:60px;border:5px solid rgba(255,255,255,.3);border-radius:50%;border-top-color:#fff;animation:spin 1s ease-in-out infinite}@keyframes spin{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}.poll-type-btn{padding:15px 20px;border:2px solid #e0e0e0;border-radius:8px;background:#fff;color:#333;font-size:16px;font-weight:500;cursor:pointer;transition:all .3s ease;text-align:center}.poll-type-btn:hover{border-color:#42a5f5;background:#f0f8ff;transform:translateY(-2px);box-shadow:0 4px 12px rgba(66,165,245,.2)}.poll-type-btn:active{transform:translateY(0)}#poll-results-container{margin-top:20px}#poll-results-container>div{background:#f8f9fa;padding:15px;border-radius:8px;margin-bottom:10px;border-left:4px solid #42a5f5}#stop-poll-btn{background:#e74c3c;color:#fff;padding:10px 20px;border:none;border-radius:6px;cursor:pointer;margin-top:20px;font-weight:500;transition:all .3s ease}#stop-poll-btn:hover{background:#c0392b;transform:translateY(-1px);box-shadow:0 4px 12px rgba(231,76,60,.3)}.logo-icon{font-size:1.3em;margin-right:8px;vertical-align:middle}.logo-text{vertical-align:middle}#classroom-ai-btn{z-index:10001!important;position:fixed!important}#classroom-ai-container{z-index:10002!important;position:fixed!important}#open-question-modal,#poll-creation-modal{z-index:9998!important}#classroom-chat-btn{z-index:10000!important}#classroom-chat-container{z-index:10001!important}


================================================================================
File 4/34: C:\Users\Meir Livneh\Documents\fireClass\BUILD\firebase-config.js
================================================================================

var firebaseConfig = {
  apiKey: "AIzaSyAyi3h3OZasXI123uA7X6YAbwPFgopgl_w",
  authDomain: "fireclass-us.firebaseapp.com",
  projectId: "fireclass-us",
  storageBucket: "fireclass-us.appspot.com",
  messagingSenderId: "600159423729",
  appId: "1:600159423729:web:0d65fb1b01a67a127fed50",
  measurementId: "G-Y7GYKR7LQD"
};

================================================================================
File 5/34: C:\Users\Meir Livneh\Documents\fireClass\BUILD\index.html
================================================================================

<!doctype html><html lang=en dir=ltr><meta charset=UTF-8><meta name=viewport content="width=device-width,initial-scale=1"><title>Teacher Dashboard - ClassroomSDK</title><link rel=stylesheet href=css/teacher-dashboard.css><div id=loading-overlay><div class=spinner></div></div><header class=header><div class=nav-container><div class=logo><span class=logo-icon>‚öôÔ∏è</span> <span class=logo-text>fireClass Control</span></div><div id=header-room-display class=header-room-display><span class=room-code-label>Room Code:</span> <span id=header-room-code class=room-code-value>...</span> <img id=qr-code-image class=qr-code alt="QR Code for Classroom" title="Click to copy student link"></div><nav><ul class=nav-menu><li class=nav-item><a href=# class=nav-link><span class=nav-icon>‚ö°</span> <span>Quick Actions</span></a><div class=dropdown><div class=dropdown-header>Quick actions for lesson management</div><a href=# class="dropdown-item success-item" onclick='sendQuickMessage("Let&#39;s start the lesson!")'><span class=dropdown-icon>üéì</span><div class=dropdown-content><div class=dropdown-title>Start Lesson</div><div class=dropdown-desc>Send message to all students</div></div></a><a href=# class="dropdown-item warning-item" onclick='sendQuickMessage("Time for a break! Come back in 5 minutes.")'><span class=dropdown-icon>‚òï</span><div class=dropdown-content><div class=dropdown-title>Break Time</div><div class=dropdown-desc>Announce break time</div></div></a><a href=# class=dropdown-item onclick='sendQuickMessage("The lesson has ended. Well done everyone!")'><span class=dropdown-icon>‚úÖ</span><div class=dropdown-content><div class=dropdown-title>End Lesson</div><div class=dropdown-desc>Finish the lesson</div></div></a><a href=# class="dropdown-item danger-item" onclick=resetClassroomData()><span class=dropdown-icon>üîÑ</span><div class=dropdown-content><div class=dropdown-title>New Lesson</div><div class=dropdown-desc>Clear all lesson data</div></div></a></div><li class=nav-item><a href=# class=nav-link onclick=window.teacherDashboard.openContentModal()><span class=nav-icon>üéÆ</span> <span>Games & Content</span></a><li class=nav-item><a href=# class=nav-link id=aiMenuLink><span class=nav-icon>ü§ñ</span> <span>AI Management</span></a><div class=dropdown><div class=dropdown-header>AI Assistant settings for students</div><a href=# class=dropdown-item id=toggleAI onclick='console.log("üü¢ TRACE: AI button clicked"),window.teacherDashboard.toggleAIForClass()'><span class=dropdown-icon id=aiStatusIcon>üî¥</span><div class=dropdown-content><div class=dropdown-title id=aiStatusText>AI disabled for students</div><div class=dropdown-desc>Click to enable</div></div></a><div style="padding:10px 20px;border-top:1px solid #f0f2f5;background:#f8f9fa"><strong style=font-size:14px;color:#555>üéØ Select model for class:</strong><div style=font-size:12px;color:#777;margin-top:2px>Current model: <span class=current-ai-model>ChatGPT</span></div></div><a href=# class="dropdown-item ai-model-btn" data-model=chatgpt onclick='window.teacherDashboard.switchAIModel("chatgpt")'><span class=dropdown-icon>ü§ñ</span><div class=dropdown-content><div class=dropdown-title>ChatGPT</div><div class=dropdown-desc>Advanced model from OpenAI</div></div></a><a href=# class="dropdown-item ai-model-btn" data-model=claude onclick='window.teacherDashboard.switchAIModel("claude")'><span class=dropdown-icon>üß†</span><div class=dropdown-content><div class=dropdown-title>Claude</div><div class=dropdown-desc>Smart model from Anthropic</div></div></a><a href=# class="dropdown-item ai-model-btn" data-model=gemini onclick='window.teacherDashboard.switchAIModel("gemini")'><span class=dropdown-icon>‚ú®</span><div class=dropdown-content><div class=dropdown-title>Gemini</div><div class=dropdown-desc>Google's model</div></div></a></div><li class=nav-item><a href=# class=nav-link><span class=nav-icon>üîß</span> <span>Tools</span></a><div class=dropdown><div class=dropdown-header>Utilities and debugging tools</div><a href=# class=dropdown-item onclick=toggleDebug()><span class=dropdown-icon>üêõ</span><div class=dropdown-content><div class=dropdown-title>Debug Console</div><div class=dropdown-desc>Show technical information</div></div></a><a href=# class=dropdown-item onclick=exportData()><span class=dropdown-icon>üìä</span><div class=dropdown-content><div class=dropdown-title>Export Data</div><div class=dropdown-desc>Save student list and messages</div></div></a></div><li class=nav-item><a href=# class=nav-link><span class=nav-icon>üìä</span> <span>Polls</span></a><div class=dropdown><a href=# class=dropdown-item onclick=window.teacherDashboard.openPollCreationModal()><span class=dropdown-icon>‚ûï</span><div class=dropdown-content><div class=dropdown-title>Start New Poll</div><div class=dropdown-desc>Send quick question to class</div></div></a></div><li class=nav-item><a href=# class=nav-link><span class=nav-icon>üìä</span> <span>Reports</span></a><div class=dropdown><div class=dropdown-header>Reports and analytics (FFU)</div><a href=# class=dropdown-item onclick=generateLessonSummary()><span class=dropdown-icon>üìã</span><div class=dropdown-content><div class=dropdown-title>Lesson Summary</div><div class=dropdown-desc>Comprehensive AI report of entire lesson</div></div></a><a href=# class=dropdown-item onclick=exportLessonData()><span class=dropdown-icon>üíæ</span><div class=dropdown-content><div class=dropdown-title>Export Lesson Data</div><div class=dropdown-desc>Save all data to file</div></div></a></div></ul></nav><button id=resetScreensBtn title="Stop current activity and clear all student screens" style="background:#e74c3c;color:#fff;border:none;padding:8px 16px;border-radius:20px;font-weight:500;cursor:pointer;display:flex;align-items:center;gap:8px"><span style=font-size:18px>‚èπÔ∏è</span> <span>Clear Screens</span></button><div class=status-indicator id=connectionStatus><div class=status-dot></div><span>Connecting...</span></div></div></header><div class=main-content><div class=section><h2>üë• Connected Students (<span id=studentsCount>0</span>)</h2><div id=studentsList class=students-list><div class=no-students>No students connected yet</div></div></div><div class=section><h2>üí¨ Communication with Students</h2><div id=messagesArea class=chat-messages><div class=no-messages>No messages yet</div></div><form id=chat-form style=display:flex;gap:10px><input id=chat-input placeholder="Type a message to all students..." required style=flex-grow:1> <button type=submit>Send</button></form></div><div class=section id=poll-section style=display:none><h2>üìä Real-time Poll Results</h2><div id=poll-results-container></div><button id=stop-poll-btn style="background:#e74c3c;color:#fff;padding:10px 20px;border:none;border-radius:6px;cursor:pointer;margin-top:20px">End poll and hide results</button></div><div class=section><h2>üìä Recent Activity</h2><div id=activitiesArea class=activity-log><div class=no-activity>No activity yet</div></div></div></div><template id=studentTemplate><div class=student-item><div class=student-info><span class=student-name></span><div class=student-actions></div></div></div></template><div id=privateMessageModal class=modal-overlay><div class=modal-content><div class=modal-header><h3>‚úâÔ∏è Private Message</h3><button class=modal-close>√ó</button></div><div class=modal-body><p>Sending private message to: <span id=privateMessageRecipient></span></p><textarea id=privateMessageText placeholder="Write your private message..." rows=4></textarea></div><div class=modal-footer><button class=modal-close>Cancel</button> <button onclick=sendPrivateMessage() class=primary>Send Message</button></div></div></div><div id=messageModal class=modal-overlay><div class=modal-content><div class=modal-header><h3>üí¨ Send Message to Class</h3><button class=modal-close>√ó</button></div><div class=modal-body><form id=messageForm><textarea id=messageText placeholder="Write a message to all students..." rows=4 required></textarea></form></div><div class=modal-footer><button class=modal-close>Cancel</button> <button type=submit form=messageForm class=primary>Send Message</button></div></div></div><div id=customContentModal class=modal-overlay><div class=modal-content style=max-width:600px><div class=modal-header><h3>üì§ Send Game or Content to Students</h3><button class=modal-close>√ó</button></div><div class=modal-body style=padding:0><div id=game-list-container style="padding:20px;max-height:300px;overflow-y:auto;border-bottom:1px solid #eee"></div><div id=custom-url-section style=padding:20px;background:#f9f9f9><p style="margin:0 0 10px 0;font-weight:500">Or send custom link:<form id=customUrlForm style=display:flex;gap:10px><input type=url id=customUrlInput placeholder="Enter full URL..." required style="flex-grow:1;padding:10px;border:1px solid #ccc;border-radius:6px"> <button type=submit class=primary style=white-space:nowrap>Send Link</button></form></div></div><div class=modal-footer><a href=# class=danger-item onclick='window.teacherDashboard.sendCommand("LOAD_CONTENT",{url:"about:blank"})' style="margin-right:auto;text-decoration:none;padding:8px 12px;border-radius:6px">‚èπÔ∏è Stop content and clear screens </a><button class=modal-close>Close</button></div></div></div><div id=poll-creation-modal class=modal-overlay><div class=modal-content style=max-width:400px><div class=modal-header><h3>Select Poll Type</h3><button class=modal-close>√ó</button></div><div class=modal-body style=display:flex;flex-direction:column;gap:15px><button class=poll-type-btn data-type=yes_no>Yes / No Poll</button> <button class=poll-type-btn data-type=multiple_choice>Multiple Choice Poll (1-4)</button> <button class=poll-type-btn data-type=open_text>Open Question (Free text)</button></div></div></div><div id=open-question-modal class=modal-overlay><div class=modal-content><div class=modal-header><h3>Open Question Responses</h3><button class=modal-close>√ó</button></div><div id=open-question-results class=modal-body style=max-height:400px;overflow-y:auto></div><div class=modal-footer style=display:flex;justify-content:space-between;align-items:center><div style=display:flex;gap:10px><button id=ai-summarize-btn>Summarize with AI</button> <button id=ai-keywords-btn>Extract Keywords</button></div><button id=close-open-question-btn class=danger-item style="padding:8px 16px;border-radius:6px;border:none;cursor:pointer">‚èπÔ∏è End Poll</button></div></div></div><div id=end-lesson-modal class=modal-overlay><div class=modal-content><div class=modal-header><h3>üéì End of Lesson</h3><button class=modal-close>√ó</button></div><div class=modal-body><p>The lesson has ended! Choose which report you'd like to generate:<div style=display:flex;flex-direction:column;gap:10px;margin-top:15px><button class=poll-type-btn onclick=generateLessonSummary()>üìã Comprehensive Summary Report</button> <button class=poll-type-btn onclick=exportLessonData()>üíæ Export Lesson Data</button> <button class=poll-type-btn onclick=generateStudentProgress()>üë• Student Progress Report</button></div></div><div class=modal-footer><button class=modal-close>Close</button></div></div></div><script src=https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js></script><script src=https://www.gstatic.com/firebasejs/9.0.0/firebase-firestore-compat.js></script><script src=https://www.gstatic.com/firebasejs/9.0.0/firebase-auth-compat.js></script><script src=https://www.gstatic.com/firebasejs/9.0.0/firebase-functions-compat.js></script><script src=firebase-config.js></script><script src=js/ClassroomSDK.js></script><script src=js/teacher-dashboard.js></script><script>console.log("üü¢ TRACE: index.html loaded"),firebase.initializeApp(firebaseConfig);const db=firebase.firestore(),auth=firebase.auth(),functions=firebase.functions();function sendQuickMessage(e){console.log("üü¢ TRACE: sendQuickMessage called"),window.teacherDashboard?window.teacherDashboard.sendMessageToClass(e):console.error("‚ùå teacherDashboard not available")}function testAIService(){console.log("üü¢ TRACE: testAIService called"),window.teacherDashboard&&window.teacherDashboard.testAIService?window.teacherDashboard.testAIService():console.error("‚ùå testAIService not available")}function sendPrivateMessage(){window.teacherDashboard&&window.teacherDashboard.sendPrivateMessage&&window.teacherDashboard.sendPrivateMessage()}function debugSystemState(){console.log("üîç System Debug:"),console.log("- window.teacherDashboard:",!!window.teacherDashboard),console.log("- teacherDashboard.sdk:",!!window.teacherDashboard?.sdk),console.log("- sdk.toggleAI:",!!window.teacherDashboard?.sdk?.toggleAI),console.log("- ClassroomSDK:",typeof ClassroomSDK),window.teacherDashboard?.sdk&&console.log("- SDK methods:",Object.getOwnPropertyNames(window.teacherDashboard.sdk))}console.log("üîç Firebase initialized"),console.log("üîç ClassroomSDK available:",typeof ClassroomSDK),window.addEventListener("load",()=>{console.log("üü¢ TRACE: Window loaded, initializing teacher dashboard"),window.teacherDashboard=new TeacherDashboard,window.teacherDashboard.init().then(()=>{console.log("‚úÖ Teacher dashboard fully initialized")}).catch(e=>{console.error("‚ùå Teacher dashboard initialization failed:",e)})}),setTimeout(debugSystemState,3e3)</script>


================================================================================
File 6/34: C:\Users\Meir Livneh\Documents\fireClass\BUILD\js\ClassroomSDK.js
================================================================================

class ClassroomSDK{constructor(){try{this.db=firebase.firestore(),this.auth=firebase.auth(),this.functions=firebase.app().functions(),console.log("‚úÖ Firebase services initialized in constructor.")}catch(t){console.error("‚ùå CRITICAL: Could not initialize Firebase services.",t),alert("Fatal Error: Could not connect to Firebase services. Please refresh.")}this.playerName=null,this.roomCode=null,this.isTeacher=!1,this.isInitialized=!1,this.studentId=null,this.isAiActiveForClass=!1,this.chatButton=null,this.chatContainer=null,this.chatMessages=null,this.chatInput=null,this.aiButton=null,this.aiContainer=null,this.aiMessages=null,this.aiInput=null,this.studentsListener=null,this.messagesListener=null,this.roomListener=null}async loginAnonymously(){try{const t=await this.auth.signInAnonymously();return console.log("‚úÖ Anonymous login successful:",t.user.uid),t.user}catch(t){throw console.error("üî• Anonymous login failed:",t),t}}async generateUniqueRoomCode(){let t=0;for(;t<20;){const e=Math.floor(1e3+9e3*Math.random()).toString(),s=this.db.collection("rooms").doc(e);if(!(await s.get()).exists)return console.log(`‚úÖ Found unique room code: ${e}`),e;console.log(`üîÑ Room code ${e} exists, trying next...`),t++}const e=Math.floor(1e3+9e3*Math.random()).toString();return console.log(`‚úÖ Generated random room code: ${e}`),e}async init(t,e,s,o=null){if(console.log(`üöÄ Initializing ${t}...`),this.appName=t,this.playerName=s,"teacher-dashboard"===t)this.isTeacher=!0,this.playerName="Teacher",this.roomCode=await this.generateUniqueRoomCode(),await this.initializeRoom(e.uid);else{if("student-app"!==t||!o)throw new Error("Invalid initialization parameters.");this.isTeacher=!1,this.roomCode=o,this.studentId=e;if(!await this.checkRoomExists(o))throw new Error(`Room with code ${o} does not exist.`);await this.joinRoom(this.studentId,this.playerName)}this.isInitialized=!0,console.log(`‚úÖ ${t} initialized successfully for room: ${this.roomCode}`)}async checkRoomExists(t){const e=this.db.collection("rooms").doc(t);return(await e.get()).exists}async initializeRoom(t){const e=this.db.collection("rooms").doc(this.roomCode);await e.set({room_code:this.roomCode,created_at:firebase.firestore.FieldValue.serverTimestamp(),teacher_uid:t,settings:{ai_active:!1,ai_model:"chatgpt",current_command:null,currentPoll:{isActive:!1}}})}async joinRoom(t,e){const s=this.db.collection("rooms").doc(this.roomCode).collection("students").doc(t);await s.set({uid:t,name:e,joined_at:firebase.firestore.FieldValue.serverTimestamp()})}listenForStudents(t){if(!this.roomCode)return;const e=this.db.collection("rooms").doc(this.roomCode).collection("students");this.studentsListener=e.onSnapshot(e=>{const s=[];e.forEach(t=>{s.push(t.data())}),console.log("üë®‚Äçüéì Students updated:",s.length),"function"==typeof t&&t(s)},t=>{console.error("üî• Error listening for students:",t)})}listenForMessages(t){if(!this.roomCode)return;const e=this.db.collection("rooms").doc(this.roomCode).collection("messages").orderBy("timestamp");this.messagesListener=e.onSnapshot(e=>{const s=[];e.docChanges().forEach(t=>{if("added"===t.type){const e=t.doc.data(),o=this.isTeacher?this.auth.currentUser?.uid:this.studentId,i=!0===e.is_private,n=e.recipient_uid===o,a=e.sender_uid===o;(!i||this.isTeacher||n||a)&&s.push(e)}}),s.length>0&&"function"==typeof t&&t(s)},t=>{console.error("üî• Error listening for messages:",t)})}listenForRoomUpdates(t){if(!this.roomCode)return;const e=this.db.collection("rooms").doc(this.roomCode);this.roomListener=e.onSnapshot(e=>{e.exists&&"function"==typeof t&&t(e.data())},t=>{console.error("üî• Error listening for room updates:",t)})}async sendMessage(t){if(t&&t.trim()&&this.roomCode)try{const e=this.db.collection("rooms").doc(this.roomCode).collection("messages");await e.add({sender:this.playerName||"Teacher",sender_uid:this.isTeacher?this.auth.currentUser?.uid:this.studentId,content:t,timestamp:firebase.firestore.FieldValue.serverTimestamp(),is_teacher:this.isTeacher})}catch(t){throw console.error("üî• Error sending message:",t),t}}async sendCommand(t,e={}){const s=this.db.collection("rooms").doc(this.roomCode);await s.update({"settings.current_command":{command:t,payload:e,timestamp:firebase.firestore.FieldValue.serverTimestamp()},last_activity:firebase.firestore.FieldValue.serverTimestamp()})}async toggleAI(){console.log("[DIAGNOSTIC] 1. toggleAI function started.");const t=this.db.collection("rooms").doc(this.roomCode);try{const e=await t.get(),s=!!e.exists&&e.data().settings?.ai_active;console.log(`[DIAGNOSTIC] 2. Read from DB. currentAI is: ${s}`);const o=!s;return console.log(`[DIAGNOSTIC] 3. Value to be written to DB is: ${o}`),await t.update({"settings.ai_active":o}),console.log("[DIAGNOSTIC] 4. SUCCESS: roomRef.update command finished without error."),o}catch(t){throw console.error("[DIAGNOSTIC] 5. CRITICAL FAILURE: Error during toggleAI process.",t),t}}cleanup(){this.studentsListener&&(this.studentsListener(),this.studentsListener=null),this.messagesListener&&(this.messagesListener(),this.messagesListener=null),this.roomListener&&(this.roomListener(),this.roomListener=null),this.roomListener_Polls&&(this.roomListener_Polls(),this.roomListener_Polls=null)}getRoomCode(){return this.roomCode}createChatInterface(){if(this.isTeacher)return void console.log("Teacher view: Floating chat interface disabled.");if(document.getElementById("classroom-chat-btn"))return;this.chatButton=document.createElement("button"),this.chatButton.id="classroom-chat-btn",this.chatButton.innerHTML="üí¨",this.chatButton.style.cssText="position: fixed; bottom: 20px; right: 20px; width: 60px; height: 60px; border-radius: 50%; background: #007bff; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 1000;",this.chatButton.onclick=()=>this.toggleChat(),this.makeDraggable(this.chatButton),document.body.appendChild(this.chatButton),this.chatContainer=document.createElement("div"),this.chatContainer.id="classroom-chat-container",this.chatContainer.style.cssText="position: fixed; bottom: 100px; right: 20px; width: 350px; height: 400px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;";const t=document.createElement("div");t.style.cssText="background: #007bff; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;",t.innerHTML='\n            <span>üí¨ Class Chat</span>\n            <button id="chat-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 5px;">‚àí</button>\n        ',this.makeDraggable(this.chatContainer,t),t.querySelector("#chat-minimize-btn").onclick=t=>{t.stopPropagation(),window.App&&window.App.closeChat?window.App.closeChat():this.toggleChat()},this.chatContainer.appendChild(t);const e=document.createElement("div");e.style.cssText="height: calc(100% - 60px); display: flex; flex-direction: column;",this.chatMessages=document.createElement("div"),this.chatMessages.id="classroom-chat-messages",this.chatMessages.style.cssText="flex: 1; padding: 15px; overflow-y: auto; background: #f8f9fa;",this.chatMessages.innerHTML='<div style="text-align: center; color: #999; font-style: italic;">No messages sent yet</div>';const s=document.createElement("div");s.style.cssText="padding: 15px; border-top: 1px solid #eee; background: white;",this.chatInput=document.createElement("input"),this.chatInput.type="text",this.chatInput.placeholder="Type a message...",this.chatInput.style.cssText="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 20px; outline: none; font-size: 14px;",this.chatInput.onkeypress=t=>{if("Enter"===t.key&&!t.shiftKey){t.preventDefault();const e=this.chatInput.value.trim();e&&(this.sendMessage(e),this.chatInput.value="")}},s.appendChild(this.chatInput),e.appendChild(this.chatMessages),e.appendChild(s),this.chatContainer.appendChild(e),document.body.appendChild(this.chatContainer)}enableChat(){this.chatButton&&(this.chatButton.style.display="block")}toggleChat(){if(this.chatContainer)if(window.App)window.App.isChatOpen?window.App.closeChat():(window.App.openChat(),this.chatInput&&this.chatInput.focus());else{const t="none"!==this.chatContainer.style.display;this.chatContainer.style.display=t?"none":"block",!t&&this.chatInput&&this.chatInput.focus()}}addChatMessage(t,e,s){if(!this.chatMessages)return;const o=document.createElement("div");o.style.cssText="margin-bottom: 10px; padding: 8px 12px; background: white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);";const i=document.createElement("div");i.style.cssText="font-weight: bold; color: #007bff; font-size: 12px; margin-bottom: 4px;",i.textContent=t;const n=document.createElement("div");n.style.cssText="color: #333; line-height: 1.4;",n.textContent=e,o.appendChild(i),o.appendChild(n),1===this.chatMessages.children.length&&this.chatMessages.children[0].textContent.includes("No messages sent yet")&&(this.chatMessages.innerHTML=""),this.chatMessages.appendChild(o),this.chatMessages.scrollTop=this.chatMessages.scrollHeight}createAIInterface(){if(document.getElementById("classroom-ai-btn"))return;this.aiButton=document.createElement("button"),this.aiButton.id="classroom-ai-btn",this.aiButton.innerHTML="ü§ñ",this.aiButton.style.cssText="position: fixed; bottom: 20px; right: 90px; width: 60px; height: 60px; border-radius: 50%; background: #4caf50; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10000; display: block;",this.aiButton.onclick=()=>this.toggleAI(),this.makeDraggable(this.aiButton),document.body.appendChild(this.aiButton),this.aiContainer=document.createElement("div"),this.aiContainer.id="classroom-ai-container",this.aiContainer.style.cssText="position: fixed; bottom: 100px; right: 20px; width: 400px; height: 500px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;";const t=document.createElement("div");t.style.cssText="background: #4caf50; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;",t.innerHTML='<span>ü§ñ AI Assistant</span><button style="background:none;border:none;color:white;font-size:18px;cursor:pointer;">‚àí</button>',this.makeDraggable(this.aiContainer,t),t.querySelector("button").onclick=t=>{t.stopPropagation(),this.toggleAI()},this.aiContainer.appendChild(t);const e=document.createElement("div");e.style.cssText="height: calc(100% - 60px); display: flex; flex-direction: column;",this.aiMessages=document.createElement("div"),this.aiMessages.id="classroom-ai-messages",this.aiMessages.style.cssText="flex: 1; padding: 15px; overflow-y: auto; background: #f8f9fa;",this.aiMessages.innerHTML='<div style="text-align: center; color: #999; font-style: italic;">Ask the AI assistant...</div>';const s=document.createElement("div");s.style.cssText="padding: 15px; border-top: 1px solid #eee; background: white;",this.aiInput=document.createElement("input"),this.aiInput.type="text",this.aiInput.placeholder="Ask a question...",this.aiInput.style.cssText="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 20px; outline: none; font-size: 14px;",this.aiInput.onkeypress=t=>{if("Enter"===t.key&&!t.shiftKey){t.preventDefault();const e=this.aiInput.value.trim();if(e){const t=document.documentElement.lang||"en";this.sendAIMessage(e,t),this.aiInput.value=""}}},s.appendChild(this.aiInput),e.appendChild(this.aiMessages),e.appendChild(s),this.aiContainer.appendChild(e),document.body.appendChild(this.aiContainer)}toggleAI(){if(!this.aiContainer)return;const t="none"!==this.aiContainer.style.display;this.aiContainer.style.display=t?"none":"block",!t&&this.aiInput&&this.aiInput.focus()}getInterfaceLanguage(){return document.documentElement.lang||"en"}async sendAIMessage(t,e){if(this.isTeacher||this.isAiActiveForClass)if(e||(e=this.getInterfaceLanguage()),this.functions){this.addAIMessage(this.playerName||"You",t,!0);try{const s=this.functions.httpsCallable("askAI"),o=await s({prompt:t,roomCode:this.roomCode,language:e}),i=o.data.model?`ü§ñ (${o.data.model})`:"ü§ñ";this.addAIMessage(i,o.data.result,!1)}catch(t){console.error("üî• Error calling askAI:",t);let e="An error occurred with the AI service.";"functions/unauthenticated"===t.code&&(e="Authentication error. Please reconnect."),this.addAIMessage("ü§ñ",e,!1)}}else this.addAIMessage("ü§ñ","Error: AI service not initialized",!1);else this.addAIMessage("ü§ñ","AI is not available at the moment.",!1)}addAIMessage(t,e,s){if(!this.aiMessages)return;const o=document.createElement("div");o.style.cssText="margin-bottom: 10px; padding: 8px 12px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); "+(s?"background: #007bff; color: white; margin-left: 20px;":"background: white; color: #333; margin-right: 20px;");const i=document.createElement("div");i.style.cssText="font-weight: bold; font-size: 12px; margin-bottom: 4px; "+(s?"color: rgba(255,255,255,0.8);":"color: #28a745;"),i.textContent=t;const n=document.createElement("div");n.style.cssText="line-height: 1.4;",n.textContent=e,o.appendChild(i),o.appendChild(n),1===this.aiMessages.children.length&&this.aiMessages.children[0].textContent.includes("Ask the AI assistant")&&(this.aiMessages.innerHTML=""),this.aiMessages.appendChild(o),this.aiMessages.scrollTop=this.aiMessages.scrollHeight}makeDraggable(t,e=null){(e||t).addEventListener("mousedown",e=>{e.preventDefault();let s=e.clientX-t.offsetLeft,o=e.clientY-t.offsetTop;t.style.right&&(t.style.left=t.offsetLeft+"px",t.style.right="");const i=e=>{t.style.left=e.clientX-s+"px",t.style.top=e.clientY-o+"px"},n=()=>{document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",n)};document.addEventListener("mousemove",i),document.addEventListener("mouseup",n)})}showGameNotification(t){const e=document.createElement("div");if(e.style.cssText="\n            position: fixed; top: 20px; left: 50%; transform: translateX(-50%);\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white; padding: 15px 25px; border-radius: 25px;\n            box-shadow: 0 4px 15px rgba(0,0,0,0.2); z-index: 10000;\n            font-weight: bold; font-size: 16px; animation: slideDown 0.3s ease;\n        ",e.textContent=t,document.body.appendChild(e),setTimeout(()=>{e.style.animation="slideUp 0.3s ease",setTimeout(()=>e.remove(),300)},3e3),!document.getElementById("notification-styles")){const t=document.createElement("style");t.id="notification-styles",t.textContent="\n                @keyframes slideDown { from { transform: translateX(-50%) translateY(-100%); opacity: 0; } to { transform: translateX(-50%) translateY(0); opacity: 1; } }\n                @keyframes slideUp { from { transform: translateX(-50%) translateY(0); opacity: 1; } to { transform: translateX(-50%) translateY(-100%); opacity: 0; } }\n            ",document.head.appendChild(t)}}async sendPrivateMessage(t,e){if(t&&t.trim()&&this.roomCode&&e)try{const s=this.db.collection("rooms").doc(this.roomCode).collection("messages");await s.add({sender:this.playerName||"Teacher",sender_uid:this.isTeacher?this.auth.currentUser?.uid:this.studentId,recipient_uid:e,content:t,timestamp:firebase.firestore.FieldValue.serverTimestamp(),is_teacher:this.isTeacher,is_private:!0})}catch(t){throw console.error("üî• Error sending private message:",t),t}}async testAIService(){if(!this.functions)return{available:!1,error:"Firebase Functions not initialized",code:"functions/not-initialized"};let t=this.auth.currentUser;if(!t)try{t=(await this.auth.signInAnonymously()).user}catch(t){return{available:!1,error:"Authentication failed",code:"auth-failed"}}if(!t||!t.uid)return{available:!1,error:"User not authenticated",code:"auth-missing"};try{const t=this.functions.httpsCallable("askChatGPT");return{available:!0,result:(await t({prompt:"Hello"})).data.result,code:"success"}}catch(t){return{available:!1,error:t.message,code:t.code||"unknown"}}}async startPoll(t){if(!this.isTeacher)return;console.log("üìä Starting poll",t);const e={id:Date.now()+"_"+Math.random().toString(36).substr(2,9),type:t.type,question:t.question||"",options:t.options,isActive:!0,createdAt:firebase.firestore.FieldValue.serverTimestamp(),responses:{}};await this.db.collection("rooms").doc(this.roomCode).update({"settings.currentPoll":e}),console.log("‚úÖ Poll started successfully")}async stopPoll(){this.isTeacher&&(console.log("üìä Stopping poll"),await this.db.collection("rooms").doc(this.roomCode).update({"settings.currentPoll.isActive":!1}),console.log("‚úÖ Poll stopped successfully"))}async submitPollAnswer(t){if(this.functions)try{const e=this.functions.httpsCallable("submitPollAnswer");await e({roomCode:this.roomCode,studentId:this.studentId,playerName:this.playerName,answer:t}),console.log("‚úÖ Poll answer successfully sent via Cloud Function.")}catch(t){console.error("üî• Error calling submitPollAnswer cloud function:",t)}else console.error("Firebase Functions is not initialized.")}listenForPollUpdates(t){this.roomListener_Polls=this.db.collection("rooms").doc(this.roomCode).onSnapshot(e=>{const s=e.data()?.settings?.currentPoll;this.lastKnownPollData=s,console.log("üìä Poll update received",s),"function"==typeof t&&t(s)})}getCurrentPollData(){return this.lastKnownPollData}getStudentId(){return this.studentId}async saveQuestionToHistory(t){if(!this.isTeacher||!t)return;const e=this.db.collection("rooms").doc(this.roomCode).collection("questionHistory").doc(t.id);await e.set({...t,closedAt:firebase.firestore.FieldValue.serverTimestamp()})}createPollInterface(){if(this.isTeacher||document.getElementById("classroom-poll-btn"))return;this.pollButton=document.createElement("button"),this.pollButton.id="classroom-poll-btn",this.pollButton.innerHTML='üìä<div id="poll-badge" style="position:absolute; top:-2px; right:-2px; width:12px; height:12px; border-radius:50%; background:red; display:none; border: 2px solid white;"></div>',this.pollButton.style.cssText="position: fixed; bottom: 20px; right: 160px; width: 60px; height: 60px; border-radius: 50%; background: #607d8b; color: white; border: none; font-size: 24px; cursor: pointer; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10000; display: block;",this.pollButton.onclick=()=>{if(this.pollContainer&&"true"===this.pollContainer.dataset.active){const t="none"!==this.pollContainer.style.display;this.pollContainer.style.display=t?"none":"block"}},this.makeDraggable(this.pollButton),document.body.appendChild(this.pollButton),this.pollContainer=document.createElement("div"),this.pollContainer.id="classroom-poll-container",this.pollContainer.dataset.active="false",this.pollContainer.style.cssText="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 450px; min-height: 200px; background: white; border-radius: 15px; box-shadow: 0 8px 40px rgba(0,0,0,0.25); z-index: 10001; display: none; overflow: hidden;";const t=document.createElement("div");t.style.cssText="background: #ff9800; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;",t.innerHTML='<span>üìä Poll / Question</span><button id="poll-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 5px;">‚àí</button>',this.makeDraggable(this.pollContainer,t),t.querySelector("#poll-minimize-btn").onclick=t=>{t.stopPropagation(),this.pollContainer.style.display="none"};const e=document.createElement("div");e.id="classroom-poll-content-area",e.style.cssText="padding: 20px;",this.pollContainer.appendChild(t),this.pollContainer.appendChild(e),document.body.appendChild(this.pollContainer)}}

================================================================================
File 7/34: C:\Users\Meir Livneh\Documents\fireClass\BUILD\js\student-app.js
================================================================================

const App={classroom:null,currentPollId:null,getOrCreateStudentId:function(){let e=sessionStorage.getItem("studentId");return e||(e="student_"+Date.now()+"_"+Math.random().toString(36).substr(2,9),sessionStorage.setItem("studentId",e)),e},init:function(){this.loadRoomCodeFromURL(),document.getElementById("login-form")?.addEventListener("submit",this.handleLogin.bind(this))},loadRoomCodeFromURL:function(){const e=new URLSearchParams(window.location.search).get("classroom");if(e){const t=document.getElementById("teacher-uid");t&&(t.value=e)}},handleLogin:async function(e){e.preventDefault();const t=document.getElementById("player-name").value.trim(),n=document.getElementById("teacher-uid").value.trim(),o=e.target.querySelector("button");if(t&&/^\d{4}$/.test(n)){o.textContent="Joining...",o.disabled=!0;try{this.classroom=new ClassroomSDK;const e=this.getOrCreateStudentId();await this.classroom.init("student-app",e,t,n),document.getElementById("login-container").style.display="none",document.getElementById("main-container").style.display="block",this.classroom.createChatInterface(),this.classroom.createAIInterface(),this.classroom.createPollInterface(),this.classroom.listenForRoomUpdates(this.stateManager.bind(this)),this.classroom.listenForMessages(e=>{const t=document.getElementById("classroom-chat-container"),n=!t||"none"===t.style.display;e.forEach(e=>{this.classroom.addChatMessage(e.sender,e.content,e),n&&e.is_teacher&&this.classroom.toggleChat()})})}catch(e){console.error("‚ùå Failed to initialize student app:",e),alert(`Failed to join the room: ${e.message}\nPlease check the room code and try again.`),o.textContent="Join Lesson",o.disabled=!1}}else alert("Name and a 4-digit room code are required!")},stateManager:function(e){if(!e||!e.settings)return;const t=e.settings,n=t.currentPoll,o=t.current_command;this.classroom.isAiActiveForClass=!0===t.ai_active;const s=document.getElementById("classroom-poll-container"),r=document.getElementById("poll-badge"),a=n&&n.isActive;if(r&&s&&(s.dataset.active=a?"true":"false",r.style.display=a?"block":"none"),a?this.currentPollId!==n.id&&(this.currentPollId=n.id,this.renderPollInterface(n)):null!==this.currentPollId&&(this.clearPollInterface(),this.currentPollId=null),o&&"LOAD_CONTENT"===o.command){const e=document.getElementById("content-frame"),t=o.payload.url||"about:blank";e&&e.src!==t&&(e.src=t)}},renderPollInterface:function(e){const t=document.getElementById("classroom-poll-container"),n=document.getElementById("classroom-poll-content-area");if(t&&n)if(t.style.display="block","open_text"===e.type)n.innerHTML='\n                <p style="margin-top:0; margin-bottom:15px; font-weight:500;">The teacher is asking a question. Please type your answer below.</p>\n                <textarea id="open-answer-input" placeholder="Write your answer here..." style="width: 100%; height: 80px; padding: 10px; border-radius: 6px; border: 1px solid #ccc; box-sizing: border-box;"></textarea>\n                <button id="submit-open-answer" style="width: 100%; padding: 12px; margin-top: 10px; border: none; background: #007bff; color: white; border-radius: 6px; cursor: pointer;">Submit Answer</button>\n            ',document.getElementById("submit-open-answer").onclick=e=>{const t=document.getElementById("open-answer-input"),n=t.value.trim(),o=e.currentTarget;n&&(this.classroom.submitPollAnswer(n),t.value="",o.textContent="‚úÖ Answer Sent!",o.disabled=!0,setTimeout(()=>{o.textContent="Submit Answer",o.disabled=!1},2e3))};else{const t="yes_no"===e.type?["Yes","No"]:["1","2","3","4"];n.innerHTML='<p style="margin-top:0; margin-bottom:15px; font-weight:500;">The teacher is asking a quick question:</p>';const o=document.createElement("div");o.style.cssText="display: flex; gap: 10px; flex-wrap: wrap;";for(let s=1;s<=e.options;s++){const e=document.createElement("button");e.textContent=t[s-1],e.style.cssText="flex-grow: 1; padding: 12px; border: 1px solid #ccc; background: #f0f0f0; border-radius: 6px; cursor: pointer;",e.onclick=()=>{this.classroom.submitPollAnswer(s),n.innerHTML='<p style="text-align:center; font-weight: bold; color: #28a745;">Thank you for your answer!</p>'},o.appendChild(e)}n.appendChild(o)}},clearPollInterface:function(){const e=document.getElementById("classroom-poll-container"),t=document.getElementById("classroom-poll-content-area");e&&(e.style.display="none",e.dataset.active="false"),t&&(t.innerHTML="")}};document.addEventListener("DOMContentLoaded",()=>{App.init()});

================================================================================
File 8/34: C:\Users\Meir Livneh\Documents\fireClass\BUILD\js\teacher-dashboard.js
================================================================================

class TeacherDashboard{constructor(){console.log("üü¢ TRACE: TeacherDashboard constructor called"),this.sdk=null,this.students=[],this.activities=[],this.isAiActive=!1,this.isAiActiveForStudents=!1,this.currentAiModel="chatgpt",this.aiWarningShown=!1,this.config={},this.debugMode=!1,this.currentQuestionResponses={},this.locale="en-US",this.rtlSupport=!1}debugLog(e,t=null){const s=document.querySelector(".enhanced-debug-console .debug-content");if(s){const n=document.createElement("div");if(n.style.direction="ltr",n.style.textAlign="left",n.innerHTML=`<div>[${(new Date).toLocaleTimeString(this.locale)}] ${e}</div>`,t){const e=document.createElement("pre");e.style.cssText="margin-left: 20px; color: #ffaa00; direction: ltr; text-align: left;",e.textContent=JSON.stringify(t,null,2),n.appendChild(e)}s.appendChild(n),s.scrollTop=s.scrollHeight}console.log(`[TEACHER DEBUG] ${e}`,t)}async init(){console.log("üü¢ TRACE: TeacherDashboard.init called");const e=document.getElementById("loading-overlay");try{this.debugLog("üöÄ Initializing teacher dashboard..."),await this.loadConfigData(),this.sdk=new ClassroomSDK,console.log("üîç SDK created:",!!this.sdk),console.log("üîç SDK toggleAI method:",!!this.sdk.toggleAI);const e=await this.sdk.loginAnonymously();this.debugLog("üëë Teacher logged in successfully",{uid:e.uid}),await this.sdk.init("teacher-dashboard",e),this.debugLog(`‚úÖ Teacher dashboard initialized with room: ${this.sdk.getRoomCode()}`),console.log("üîç Final SDK check before AI init:"),console.log("- SDK exists:",!!this.sdk),console.log("- toggleAI exists:",!!this.sdk.toggleAI),console.log("- DB exists:",!!this.sdk.db),console.log("- roomCode exists:",!!this.sdk.roomCode),this.sdk.createAIInterface(),this.initializeTeacherAI(),this.sdk.listenForStudents(this.updateStudentsList.bind(this)),this.sdk.listenForMessages(e=>{e&&e.length>0&&this.addMessage(e)}),this.sdk.listenForRoomUpdates(e=>{if(!e||!e.settings)return;e.settings.currentPoll&&this.displayPollResults(e.settings.currentPoll);const t=!0===e.settings.ai_active;this.isAiActive!==t&&(console.log(`üîÑ Syncing teacher UI. AI status changed to: ${t}`),this.isAiActive=t,this.updateAIButton())}),this.updateConnectionStatus(!0),this.setupEventListeners(),this.updateRoomDisplay(),setTimeout(()=>{this.checkSDKReady()?(this.showTeacherAIButton(),this.checkAIStatus(),console.log("‚úÖ Teacher AI button initialized and shown")):console.error("‚ùå SDK not ready even after timeout")},2e3),this.debugLog("‚úÖ Teacher dashboard initialized successfully.")}catch(e){console.error("üî• Critical initialization error:",e),console.error("üîç Error stack:",e.stack),this.updateConnectionStatus(!1)}finally{e&&e.classList.add("hidden")}}async initializeTeacherAI(){this.debugLog("ü§ñ Initializing AI for teacher...");try{await this.testAIService()||this.debugLog("‚ö†Ô∏è AI service not available, but continuing..."),this.showTeacherAIButton(),await this.checkAIStatus(),this.addActivity("ü§ñ AI interface enabled for teacher"),this.debugLog("‚úÖ Teacher AI initialized successfully")}catch(e){console.error("üî• Error initializing teacher AI:",e),this.debugLog("‚ùå Teacher AI initialization failed",e),this.showTeacherAIButton(),this.addActivity("‚ö†Ô∏è AI available but with limitations")}}showTeacherAIButton(){let e=document.getElementById("classroom-ai-btn");if(e||(console.log("üîß Creating missing AI button for teacher"),this.sdk&&this.sdk.createAIInterface&&(this.sdk.createAIInterface(),e=document.getElementById("classroom-ai-btn"))),e){e.style.display="block",e.style.opacity="1",e.style.visibility="visible";const t=document.createElement("div");t.className="teacher-ai-indicator",t.innerHTML="üéì",t.style.cssText="\n                position: absolute; top: -5px; left: -5px;\n                background: #28a745; color: white;\n                border-radius: 50%; width: 20px; height: 20px;\n                font-size: 12px; display: flex;\n                align-items: center; justify-content: center;\n                z-index: 10003;\n            ",e.querySelector(".teacher-ai-indicator")||(e.style.position="relative",e.appendChild(t)),this.debugLog("ü§ñ AI button displayed for teacher"),console.log("‚úÖ Teacher AI button is now visible and functional")}else console.error("‚ùå Could not create or find AI button for teacher")}async checkAIStatus(){if(console.log("üîç checkAIStatus called"),!this.sdk||!this.sdk.db)return console.log("‚ùå SDK or DB not ready"),void this.debugLog("‚ùå Cannot check AI status - SDK/DB not ready");try{const e=this.sdk.db.collection("rooms").doc(this.sdk.getRoomCode()),t=await e.get();if(console.log("üîç Room document exists:",t.exists),t.exists){const e=t.data();console.log("üîç Room data:",e),console.log("üîç AI settings:",e.settings),this.isAiActive=!0===e.settings?.ai_active,this.currentAiModel=e.settings?.ai_model||"chatgpt",console.log("üîç Set isAiActive to:",this.isAiActive),this.updateAIButton(),this.updateAIModelDisplay(),this.debugLog(`ü§ñ AI Status: ${this.isAiActive?"Active":"Disabled"}, Model: ${this.currentAiModel}`)}else console.log("‚ö†Ô∏è Room document not found"),this.debugLog("‚ö†Ô∏è Room document not found for AI status check")}catch(e){console.error("üî• Error checking AI status:",e),this.debugLog("‚ùå AI status check failed",e)}}updateAIButton(){const e=document.getElementById("aiStatusIcon"),t=document.getElementById("aiStatusText"),s=document.querySelector("#toggleAI .dropdown-desc");this.isAiActive?(e&&(e.textContent="üü¢"),t&&(t.textContent="AI Active for Students"),s&&(s.textContent="Click to disable")):(e&&(e.textContent="üî¥"),t&&(t.textContent="AI Disabled for Students"),s&&(s.textContent="Click to enable"))}updateAIModelDisplay(){document.querySelectorAll(".current-ai-model").forEach(e=>{e.textContent=this.getModelDisplayName(this.currentAiModel)}),document.querySelectorAll(".dropdown-item.ai-model-btn").forEach(e=>{e.dataset.model===this.currentAiModel?(e.style.backgroundColor="#e8f5e9",e.style.fontWeight="bold"):(e.style.backgroundColor="",e.style.fontWeight="normal")})}getModelDisplayName(e){return{chatgpt:"ChatGPT",claude:"Claude",gemini:"Gemini"}[e]||e}async toggleAIForClass(){if(console.log("--- Starting toggleAIForClass ---"),!this.sdk||!this.sdk.db||!this.sdk.roomCode)return console.error("SDK not ready. Cannot update Firestore."),void alert("SDK not ready. Please refresh.");const e=this.sdk.db.collection("rooms").doc(this.sdk.roomCode);try{const t=await e.get();if(!t.exists)return void console.error("Document does not exist!");const s=!t.data().settings.ai_active;await e.update({"settings.ai_active":s}),console.log(`SUCCESS: Firestore updated. New state is: ${s}`),this.isAiActive=s,this.updateAIButton(),s?this.addActivity("ü§ñ AI enabled for class."):this.addActivity("üî¥ AI disabled for class.")}catch(e){console.error("FAILURE: Could not update Firestore.",e),alert("Failed to update the AI status. See console for error details.")}}checkSDKReady(){return this.sdk?this.sdk.toggleAI?this.sdk.db?this.sdk.roomCode?(console.log("‚úÖ SDK ready for AI operations"),!0):(console.error("‚ùå Room code not set"),!1):(console.error("‚ùå Firebase DB not ready"),!1):(console.error("‚ùå toggleAI method missing from SDK"),console.log("üîç Available methods:",Object.getOwnPropertyNames(this.sdk)),!1):(console.error("‚ùå SDK not initialized"),!1)}async switchAIModel(e){if(this.sdk){this.debugLog(`üîÑ Switching AI model to: ${e}`);try{const t=this.sdk.db.collection("rooms").doc(this.sdk.getRoomCode());await t.update({"settings.ai_model":e,last_activity:firebase.firestore.FieldValue.serverTimestamp()}),this.currentAiModel=e,this.updateAIButton(),this.updateAIModelDisplay();const s=this.getModelDisplayName(e);this.addActivity(`üîÑ AI model switched to: ${s}`),this.debugLog(`‚úÖ AI model switched to: ${e}`),this.isAiActive&&this.showModelSwitchMessage(s)}catch(e){console.error("üî• Error switching AI model:",e),this.debugLog("‚ùå AI model switch failed",e),alert("Error switching AI model: "+e.message)}}}showModelSwitchMessage(e){const t=document.createElement("div");t.style.cssText="\n            position: fixed; top: 20px; right: 20px; z-index: 10000;\n            background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);\n            color: white; padding: 15px 20px; border-radius: 8px;\n            box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);\n            font-weight: bold; max-width: 300px;\n            animation: slideInRight 0.5s ease;\n            direction: ltr; text-align: left;\n        ",t.innerHTML=`\n            <div style="display: flex; align-items: center; gap: 10px;">\n                <span style="font-size: 24px;">üîÑ</span>\n                <div>\n                    <div>AI Model Switched!</div>\n                    <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">\n                        Now using: ${e}\n                    </div>\n                </div>\n            </div>\n        `,document.body.appendChild(t),setTimeout(()=>{t.style.animation="slideOutRight 0.5s ease",setTimeout(()=>t.remove(),500)},3e3)}async testAIService(){if(!this.sdk)return this.debugLog("‚ùå SDK not available for AI test"),!1;if(!this.sdk.auth?.currentUser)return this.debugLog("‚ùå User not authenticated for AI test"),!1;if(!this.sdk.functions)return this.debugLog("‚ùå Firebase Functions not initialized"),!1;this.debugLog("üîç Testing AI service availability...");try{if(this.sdk.testAIService){const e=await this.sdk.testAIService();if(e.available)return this.debugLog("‚úÖ AI service available and working",e),!0;{this.debugLog("‚ùå AI service not available",e);let t="AI service not available";return"functions/failed-precondition"===e.code?t="AI service not configured (missing API key)":"functions/unauthenticated"===e.code?t="Authentication error in system":"functions/not-initialized"===e.code&&(t="Firebase Functions not initialized"),this.aiWarningShown||(this.aiWarningShown=!0,setTimeout(()=>{confirm(`‚ö†Ô∏è ${t}\n\nWould you like to try again?`)&&this.testAIService()},1e3)),!1}}return this.debugLog("‚ö†Ô∏è SDK testAIService method not found, assuming available"),!0}catch(e){return this.debugLog("üî• AI service test failed with error",e),console.error("AI test error:",e),!0}}updateConnectionStatus(e){const t=document.getElementById("connectionStatus");t&&(e?(t.textContent="üü¢ Connected to Firebase",t.className="connection-status connected"):(t.textContent="üî¥ Not Connected",t.className="connection-status disconnected"))}addActivity(e){const t=document.getElementById("activitiesArea");if(!t)return;const s=document.createElement("div");s.className="activity-item",s.style.direction="ltr",s.style.textAlign="left",s.innerHTML=`\n            <span class="activity-time">${(new Date).toLocaleTimeString(this.locale)}</span>\n            <span class="activity-text">${e}</span>\n        `,t.appendChild(s),t.scrollTop=t.scrollHeight}updateStudentsList(e){this.students=e;const t=document.getElementById("studentsList"),s=document.getElementById("studentsCount");if(!t||!s)return;if(t.innerHTML="",s.textContent=this.students.length,0===this.students.length)return void(t.innerHTML='<div class="no-students">No students connected currently</div>');const n=document.getElementById("studentTemplate");this.students.forEach(e=>{const s=e.name||"Unknown Student",o=document.importNode(n.content,!0),i=o.querySelector(".student-name");i&&(i.textContent=s);const a=o.querySelector(".student-actions");if(a){const t=document.createElement("button");t.textContent="Private Message",t.className="private-message-btn",t.onclick=()=>this.openPrivateMessageModal(e),a.appendChild(t)}t.appendChild(o)}),this.addActivity(`Student list updated. ${this.students.length} students connected.`),console.log(`‚úÖ Updated student list: ${this.students.length} students displayed`)}addMessage(e){Array.isArray(e)?e.forEach(e=>this.addSingleMessage(e)):this.addSingleMessage(e)}addSingleMessage(e){const t=document.getElementById("messagesArea"),s=document.getElementById("messagesCount");if(!t)return;const n=e.timestamp?.seconds+"_"+e.sender_uid+"_"+e.content.substring(0,20);if(t.querySelector(`[data-message-id="${n}"]`))return void console.log("‚ö†Ô∏è Duplicate message prevented:",e.content.substring(0,30));const o=e?.sender||"Unknown User",i=e?.content||"Empty Message",a=e?.timestamp,d=!0===e?.is_teacher,r=!0===e?.is_private,c=t.querySelector(".no-messages");if(c&&c.remove(),s){const e=parseInt(s.textContent)||0;s.textContent=e+1}const l=document.createElement("div");l.className="message-item",l.setAttribute("data-message-id",n),l.style.direction="ltr",l.style.textAlign="left";let u="";d?u="üéì ":r&&(u="üîí ");let h="Unknown Time";if(a)try{h=(a.toDate?a.toDate():new Date(a)).toLocaleTimeString(this.locale)}catch(e){console.warn("Cannot parse timestamp:",a),h=(new Date).toLocaleTimeString(this.locale)}l.innerHTML=`\n            <div class="message-header">\n                <span class="message-sender">${u}${o}</span>\n                <span class="message-time">${h}</span>\n            </div>\n            <div class="message-content">${i}</div>\n            ${r?'<div class="message-private-indicator">Private Message</div>':""}\n        `,r&&(l.style.borderLeft="4px solid #ffc107",l.style.background="#fff9c4"),t.appendChild(l),t.scrollTop=t.scrollHeight,console.log(`‚úÖ Message added: ${i.substring(0,30)}...`)}sendCommand(e,t={}){this.sdk&&(this.sdk.sendCommand(e,t),this.addActivity(`üì§ Command sent: ${e}`))}sendMessageToClass(e){e&&e.trim()&&this.sdk&&(this.sdk.sendMessage(e),this.addActivity(`üí¨ Message sent to class: ${e}`))}showAIActivationMessage(){const e=document.createElement("div");if(e.style.cssText="\n            position: fixed; top: 20px; right: 20px; z-index: 10000;\n            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);\n            color: white; padding: 15px 20px; border-radius: 8px;\n            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);\n            font-weight: bold; max-width: 300px;\n            animation: slideInRight 0.5s ease;\n            direction: ltr; text-align: left;\n        ",e.innerHTML='\n            <div style="display: flex; align-items: center; gap: 10px;">\n                <span style="font-size: 24px;">ü§ñ</span>\n                <div>\n                    <div>AI Enabled Successfully!</div>\n                    <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">\n                        Students can now ask questions\n                    </div>\n                </div>\n            </div>\n        ',document.body.appendChild(e),setTimeout(()=>{e.style.animation="slideOutRight 0.5s ease",setTimeout(()=>e.remove(),500)},4e3),!document.getElementById("ai-notification-styles")){const e=document.createElement("style");e.id="ai-notification-styles",e.textContent="\n                @keyframes slideInRight {\n                    from { transform: translateX(100%); opacity: 0; }\n                    to { transform: translateX(0); opacity: 1; }\n                }\n                @keyframes slideOutRight {\n                    from { transform: translateX(0); opacity: 1; }\n                    to { transform: translateX(100%); opacity: 0; }\n                }\n            ",document.head.appendChild(e)}}setupEventListeners(){document.querySelectorAll(".dropdown-item.ai-model-btn").forEach(e=>{e.addEventListener("click",t=>{t.preventDefault();const s=e.dataset.model;s&&this.switchAIModel(s)})}),document.querySelectorAll(".modal-close").forEach(e=>{e.addEventListener("click",e=>{var t;t=e.target,t.closest(".modal-overlay")?.classList.remove("visible")})});const e=document.getElementById("privateMessageForm");e&&e.addEventListener("submit",e=>{e.preventDefault(),this.sendPrivateMessage()});const t=document.getElementById("customUrlForm");t&&t.addEventListener("submit",e=>{e.preventDefault();const t=document.getElementById("customUrlInput"),s=t.value.trim();s&&(this.sendSelectedGame(s),t.value="")}),document.querySelectorAll(".poll-type-btn").forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.type;this.startPoll(t)})});const s=document.getElementById("stop-poll-btn");s&&s.addEventListener("click",()=>this.stopPoll());const n=document.getElementById("chat-form");n&&n.addEventListener("submit",e=>{e.preventDefault();const t=document.getElementById("chat-input"),s=t.value.trim();s&&(this.sdk.sendMessage(s),t.value="")}),document.getElementById("ai-summarize-btn")?.addEventListener("click",()=>this.handleAiAnalysis("summarize")),document.getElementById("ai-keywords-btn")?.addEventListener("click",()=>this.handleAiAnalysis("keywords")),document.getElementById("close-open-question-btn")?.addEventListener("click",()=>this.closeOpenEndedQuestion()),document.querySelector("#open-question-modal .modal-close")?.addEventListener("click",()=>this.closeOpenEndedQuestion()),document.getElementById("resetScreensBtn")?.addEventListener("click",()=>{confirm("Are you sure you want to reset all student screens? This will stop any active poll or content.")&&this.resetStudentScreens()})}openPrivateMessageModal(e){const t=document.getElementById("privateMessageModal");t&&(document.getElementById("privateMessageRecipient").textContent=e.name,t.dataset.studentUid=e.uid,t.classList.add("visible"))}async sendPrivateMessage(){const e=document.getElementById("privateMessageModal"),t=document.getElementById("privateMessageText").value.trim(),s=e.dataset.studentUid;if(t&&s)try{await this.sdk.sendPrivateMessage(t,s),this.addActivity(`‚úâÔ∏è Private message sent to ${document.getElementById("privateMessageRecipient").textContent}`),document.getElementById("privateMessageText").value="",e.classList.remove("visible")}catch(e){console.error("üî• Error sending private message:",e),alert("Error sending private message")}}async resetClassroomData(){if(this.sdk&&confirm("Are you sure you want to reset the classroom? This action will delete all data."))try{const e=this.sdk.db.collection("rooms").doc(this.sdk.getRoomCode());await e.delete(),await this.sdk.initializeRoom(),this.addActivity("üîÑ Classroom reset successfully"),alert("Classroom reset successfully!")}catch(e){console.error("üî• Error resetting classroom:",e),alert("Error resetting classroom")}}updateRoomDisplay(){const e=this.sdk?this.sdk.getRoomCode():null;if(!e)return;const t=document.getElementById("header-room-code");t&&(t.textContent=e);const s=document.getElementById("qr-code-image");if(s){const t=`${window.location.origin}/${this.config.studentAppUrl}?classroom=${e}`,n=`https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(t)}`;s.src=n,s.onclick=()=>{navigator.clipboard.writeText(t).then(()=>{this.addActivity("‚úÖ Student link copied")}).catch(e=>{console.error("Failed to copy URL: ",e)})}}}async loadConfigData(){try{const e=await fetch("config.json");if(!e.ok)throw new Error("Network response was not ok");this.config=await e.json(),this.debugLog("‚úÖ Config file loaded successfully",this.config)}catch(e){console.error("üî• Error loading config file:",e),this.config={studentAppUrl:"student-app.html",games:[]}}}openContentModal(){document.getElementById("customContentModal")?.classList.add("visible"),this.populateGamesList()}populateGamesList(){const e=document.getElementById("game-list-container");if(!e)return;const t=this.config?.games||[];e.innerHTML="",0!==t.length?t.forEach(t=>{const s=document.createElement("a");s.href="#",s.className="dropdown-item",s.onclick=e=>{e.preventDefault(),this.sendSelectedGame(t.url)},s.innerHTML=`\n                <span class="dropdown-icon">${t.icon||"üîó"}</span>\n                <div class="dropdown-content">\n                    <div class="dropdown-title">${t.name}</div>\n                    <div class="dropdown-desc">${t.description}</div>\n                </div>\n            `,e.appendChild(s)}):e.innerHTML="<p>No games found in config.json</p>"}sendSelectedGame(e){if(!e)return;this.sendCommand("LOAD_CONTENT",{url:e});const t=document.getElementById("customContentModal");t&&t.querySelector(".modal-close").click()}openPollCreationModal(){this.debugLog("üìä Opening poll creation window"),document.getElementById("poll-creation-modal")?.classList.add("visible")}async startPoll(e){this.debugLog(`üìä Starting a new poll of type: ${e}`);try{const t=this.sdk.db.collection("rooms").doc(this.sdk.roomCode),s=await t.get(),n=s.data()?.settings?.currentPoll;n&&n.isActive&&(this.debugLog("Archiving previous active poll...",n.id),await this.sdk.saveQuestionToHistory(n),this.addActivity(`üìù Previous poll (${n.id.substring(0,5)}) archived.`));const o={yes_no:2,multiple_choice:4,open_text:0},i={id:"poll_"+Date.now()+"_"+Math.random().toString(36).substr(2,9),type:e,question:"",options:o[e],isActive:!0,createdAt:firebase.firestore.FieldValue.serverTimestamp(),responses:{}};await t.update({"settings.currentPoll":i}),"open_text"===e?(this.currentQuestionResponses={},document.getElementById("open-question-modal")?.classList.add("visible")):document.getElementById("poll-section").style.display="block",this.addActivity(`üìä Started new poll of type: ${e}`),document.getElementById("poll-creation-modal")?.classList.remove("visible"),this.debugLog(`‚úÖ New poll ${i.id} started successfully.`)}catch(e){console.error("üî• Failed to start a new poll:",e),this.debugLog("‚ùå Error during startPoll",e),this.addActivity("‚ùå Error starting new poll.")}}stopPoll(){this.debugLog("üìä Stopping poll"),this.sdk.stopPoll(),document.getElementById("poll-section").style.display="none",this.addActivity("‚èπÔ∏è Poll ended")}displayPollResults(e){if(e&&"open_text"===e.type&&e.isActive){const t=document.getElementById("open-question-results");if(!t)return;t.innerHTML="";const s=e.responses||{};this.currentQuestionResponses=s;for(const e in s)if(Object.hasOwnProperty.call(s,e)){const n=s[e];if(Array.isArray(n)&&n.length>0){const s=n[n.length-1],o=document.createElement("div");o.innerHTML=`<strong>${e} (${n.length} versions):</strong><p style="margin: 5px 0 0 0; color: #333;">${s}</p>`,o.style.borderBottom="1px solid #eee",o.style.padding="10px 0",t.appendChild(o)}}}else if(e&&("multiple_choice"===e.type||"yes_no"===e.type)){const t=document.getElementById("poll-results-container"),s=document.getElementById("poll-section");if(!t||!s)return;s.style.display="block",t.innerHTML="";const n=e.responses||{},o=Object.keys(n).length,i={};for(let t=1;t<=e.options;t++)i[t]=0;Object.values(n).forEach(e=>{void 0!==i[e]&&i[e]++});for(let s=1;s<=e.options;s++){const n=i[s],a=o>0?(n/o*100).toFixed(1):0,d=`\n                    <div style="margin-bottom: 12px;">\n                        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">\n                            <strong>${"yes_no"===e.type?1===s?"Yes":"No":`Option ${s}`}</strong>\n                            <span>${n} votes (${a}%)</span>\n                        </div>\n                        <div style="background: #e0e0e0; border-radius: 4px; overflow: hidden;">\n                            <div style="width: ${a}%; background: #42a5f5; height: 20px; transition: width 0.3s ease;"></div>\n                        </div>\n                    </div>\n                `;t.innerHTML+=d}}}async handleAiAnalysis(e){if(this.sdk&&"none"===this.sdk.aiContainer.style.display&&this.sdk.toggleAI(),0===Object.keys(this.currentQuestionResponses).length)return void this.sdk.addAIMessage("ü§ñ","No responses to analyze currently.",!1);const t=JSON.stringify(this.currentQuestionResponses,null,2),s=this.sdk.getInterfaceLanguage();let n;n="summarize"===e?"he"===s?`◊ú◊§◊†◊ô◊ö ◊™◊©◊ï◊ë◊ï◊™ ◊©◊ú ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊ú◊©◊ê◊ú◊î. ◊õ◊ú ◊©◊ù ◊™◊ú◊û◊ô◊ì ◊û◊û◊ï◊§◊î ◊ú◊û◊¢◊®◊ö ◊©◊ú ◊î◊™◊©◊ï◊ë◊ï◊™ ◊©◊ú◊ï (◊û◊î◊®◊ê◊©◊ï◊†◊î ◊ú◊ê◊ó◊®◊ï◊†◊î). ◊°◊õ◊ù ◊ê◊™ ◊®◊û◊™ ◊î◊î◊ë◊†◊î ◊î◊õ◊ô◊™◊™◊ô◊™, ◊ñ◊î◊î ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊™◊©◊ï◊ë◊ï◊™◊ô◊î◊ù ◊û◊¶◊ë◊ô◊¢◊ï◊™ ◊¢◊ú ◊ß◊ï◊©◊ô, ◊ï◊¶◊ô◊ô◊ü ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊î◊®◊ê◊ï ◊©◊ô◊§◊ï◊® ◊û◊©◊û◊¢◊ï◊™◊ô ◊ë◊ô◊ü ◊î◊í◊®◊°◊ê◊ï◊™:\n\n${t}`:`Here are student responses to a question. Each student name maps to an array of their answers (from first to last). Summarize the class's understanding, identify students whose answers indicate difficulty, and point out students who showed significant improvement across versions:\n\n${t}`:"he"===s?`◊ñ◊î◊î ◊ê◊™ 10 ◊û◊ô◊ú◊ï◊™ ◊î◊û◊§◊™◊ó ◊î◊†◊§◊ï◊¶◊ï◊™ ◊ï◊î◊û◊©◊û◊¢◊ï◊™◊ô◊ï◊™ ◊ë◊ô◊ï◊™◊® ◊û◊î◊™◊©◊ï◊ë◊ï◊™ ◊î◊ë◊ê◊ï◊™:\n\n${t}`:`Extract the 10 most frequent and significant keywords from the following text:\n\n${t}`,this.sdk.sendAIMessage(n,s),this.addActivity('üìà Sent "situation analysis" to AI.');try{const e=this.sdk.db.collection("rooms").doc(this.sdk.getRoomCode());await e.update({"settings.currentPoll.responses":{}}),this.addActivity("üîÑ Response repository in Firestore reset and ready for next round.")}catch(e){console.error("Error resetting poll responses:",e)}}async generateLessonSummary(){this.addActivity("üìä Preparing comprehensive summary report..."),this.sdk&&this.sdk.aiContainer&&"none"===this.sdk.aiContainer.style.display&&this.sdk.toggleAI();try{const e=await this.sdk.db.collection("rooms").doc(this.sdk.getRoomCode()).collection("questionHistory").orderBy("createdAt").get();let t=[];e.forEach(e=>{t.push(e.data())});const s=this.buildLessonSummaryPrompt(t),n=this.sdk.getInterfaceLanguage();await this.sdk.sendAIMessage(s,n),this.addActivity("‚úÖ Summary report sent to AI"),document.getElementById("end-lesson-modal")?.classList.remove("visible")}catch(e){console.error("üî• Error creating summary report:",e),this.addActivity("‚ùå Error creating summary report")}}buildLessonSummaryPrompt(e){if("he"===this.sdk.getInterfaceLanguage()){let t="◊ì◊ï◊ó ◊°◊ô◊õ◊ï◊ù ◊û◊ß◊ô◊£ ◊ú◊©◊ô◊¢◊ï◊®\n\n";return t+=`◊û◊°◊§◊® ◊©◊ê◊ú◊ï◊™ ◊©◊†◊©◊ê◊ú◊ï: ${e.length}\n\n`,e.forEach((e,s)=>{t+=`◊©◊ê◊ú◊î ${s+1}: ${e.question||"◊©◊ê◊ú◊î ◊ú◊ú◊ê ◊õ◊ï◊™◊®◊™"}\n`,t+="◊™◊©◊ï◊ë◊ï◊™ ◊î◊™◊ú◊û◊ô◊ì◊ô◊ù:\n",Object.entries(e.responses||{}).forEach(([e,s])=>{Array.isArray(s)?t+=`  ${e}: ${s.join(" ‚Üí ")}\n`:t+=`  ${e}: ${s}\n`}),t+="\n"}),t+="◊ê◊†◊ê ◊°◊õ◊ù:\n",t+="1. ◊î◊™◊ß◊ì◊û◊ï◊™ ◊õ◊ú◊ú◊ô◊™ ◊©◊ú ◊î◊õ◊ô◊™◊î\n",t+="2. ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊î◊®◊ê◊ï ◊©◊ô◊§◊ï◊® ◊û◊©◊û◊¢◊ï◊™◊ô\n",t+="3. ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊†◊ñ◊ß◊ß◊ô◊ù ◊ú◊™◊©◊ï◊û◊™ ◊ú◊ë ◊†◊ï◊°◊§◊™\n",t+="4. ◊†◊ï◊©◊ê◊ô◊ù ◊©◊†◊ï◊™◊®◊ï ◊ú◊ê ◊ë◊®◊ï◊®◊ô◊ù\n",t+="5. ◊î◊û◊ú◊¶◊ï◊™ ◊ú◊©◊ô◊¢◊ï◊® ◊î◊ë◊ê\n",t}{let t="Comprehensive Lesson Summary Report\n\n";return t+=`Number of questions asked: ${e.length}\n\n`,e.forEach((e,s)=>{t+=`Question ${s+1}: ${e.question||"Untitled question"}\n`,t+="Student responses:\n",Object.entries(e.responses||{}).forEach(([e,s])=>{Array.isArray(s)?t+=`  ${e}: ${s.join(" ‚Üí ")}\n`:t+=`  ${e}: ${s}\n`}),t+="\n"}),t+="Please summarize:\n",t+="1. Overall class progress\n",t+="2. Students who showed significant improvement\n",t+="3. Students who need additional attention\n",t+="4. Topics that remain unclear\n",t+="5. Recommendations for next lesson\n",t}}async closeOpenEndedQuestion(){if(this.sdk)try{const e=this.sdk.db.collection("rooms").doc(this.sdk.getRoomCode()),t=await e.get(),s=t.data()?.settings?.currentPoll;s&&s.isActive&&(await this.sdk.saveQuestionToHistory(s),await e.update({"settings.currentPoll.isActive":!1}),this.addActivity("üìù Open question closed - student modal closed")),document.getElementById("open-question-modal")?.classList.remove("visible")}catch(e){console.error("üî• Error closing open question:",e),this.addActivity("‚ùå Error closing question")}}async resetStudentScreens(){if(this.sdk){console.log("üîÑ Resetting all student screens...");try{await this.sdk.sendCommand("LOAD_CONTENT",{url:"about:blank"}),await this.sdk.stopPoll(),this.addActivity("‚èπÔ∏è All student screens have been cleared.")}catch(e){console.error("Error resetting student screens:",e)}}}}function sendQuickMessage(e){window.teacherDashboard&&window.teacherDashboard.sendMessageToClass(e)}function sendGameContent(e){window.teacherDashboard&&window.teacherDashboard.sendCommand("LOAD_CONTENT",{url:e})}function sendCustomContent(){document.getElementById("customContentModal").classList.add("visible")}function toggleAIForClass(){window.teacherDashboard&&window.teacherDashboard.toggleAIForClass()}function switchAIModel(e){window.teacherDashboard&&window.teacherDashboard.switchAIModel(e)}function resetClassroomData(){window.teacherDashboard&&window.teacherDashboard.resetClassroomData()}function toggleDebug(){const e=document.querySelector(".enhanced-debug-console");e&&e.classList.toggle("visible")}function sendMessage(){document.getElementById("messageModal").classList.add("visible")}function exportData(){if(!window.teacherDashboard)return;const e={students:window.teacherDashboard.students,activities:window.teacherDashboard.activities,timestamp:(new Date).toISOString(),roomCode:window.teacherDashboard.sdk?.getRoomCode()},t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),s=URL.createObjectURL(t),n=document.createElement("a");n.href=s,n.download=`classroom-data-${(new Date).toISOString().split("T")[0]}.json`,n.click(),URL.revokeObjectURL(s)}function updateAIMenuStatus(e){document.querySelectorAll(".ai-menu-item").forEach(t=>{t.style.opacity=e?"1":"0.5",t.style.pointerEvents=e?"auto":"none"})}function copyClassroomId(){if(!window.teacherDashboard||!window.teacherDashboard.sdk)return void alert("System is not ready yet");const e=window.teacherDashboard.sdk.getRoomCode();navigator.clipboard.writeText(e).then(()=>{const e=document.getElementById("copyClassroomIdBtn");if(e){const t=e.textContent;e.textContent="‚úÖ Copied!",e.style.background="rgba(76, 175, 80, 0.3)",setTimeout(()=>{e.textContent=t,e.style.background="rgba(255,255,255,0.2)"},2e3)}window.teacherDashboard&&window.teacherDashboard.addActivity("üìã Classroom ID copied to clipboard")}).catch(e=>{console.error("Copy error:",e),alert("Error copying ID. Try copying manually.")})}function testAIService(){window.teacherDashboard&&window.teacherDashboard.testAIService().then(e=>{e?alert("‚úÖ AI service is available and working properly!"):alert("‚ùå AI service is currently unavailable. Check settings.")})}function debugClassroom(){if(!window.teacherDashboard)return void console.log("Teacher dashboard not initialized");const e={Room:window.teacherDashboard.sdk?.getRoomCode(),Students:window.teacherDashboard.students.length,"AI Active":window.teacherDashboard.isAiActive,"AI Model":window.teacherDashboard.currentAiModel,"SDK Connected":!!window.teacherDashboard.sdk,"Init Time":(new Date).toLocaleTimeString("en-US")};return console.table(e),e}document.addEventListener("DOMContentLoaded",function(){document.querySelectorAll(".message-item, .activity-item, .student-item").forEach(e=>{e.style.direction="ltr",e.style.textAlign="left"});const e=document.createElement("style");e.textContent="\n        body, * {\n            font-family: 'Segoe UI', Tahoma, Arial, 'Roboto', 'Open Sans', sans-serif !important;\n        }\n        \n        .message-content, .activity-text, .student-name {\n            direction: ltr !important;\n            text-align: left !important;\n            unicode-bidi: embed !important;\n        }\n        \n        .debug-log, .debug-content {\n            direction: ltr !important;\n            text-align: left !important;\n        }\n        \n        /* Fix English texts in interface */\n        .dropdown-title, .dropdown-desc, .tool-label, .tool-desc {\n            direction: ltr !important;\n            text-align: left !important;\n        }\n    ",document.head.appendChild(e)});

================================================================================
File 9/34: C:\Users\Meir Livneh\Documents\fireClass\BUILD\student-app.html
================================================================================

<!doctype html><html lang=en dir=ltr><meta charset=UTF-8><meta name=viewport content="width=device-width,initial-scale=1"><title>Student Learning Space</title><link rel=stylesheet href=css/student-app.css><div id=login-container class=container><div class=login-box><h1>‚úèÔ∏è Classroom Learning Space</h1><p>To join the lesson, please enter your name and room code<form id=login-form><input id=player-name placeholder="Your name" required><div class=input-group><label for=teacher-uid>üè´ Room Code:</label> <input id=teacher-uid placeholder="Enter 4-digit room code" maxlength=4 required></div><button type=submit>Join Lesson</button></form></div></div><main id=main-container style=display:none><iframe id=content-frame src=about:blank title="Lesson Content"></iframe></main><div id=poll-interface style="position:fixed;bottom:20px;left:50%;transform:translateX(-50%);z-index:1001;background:rgba(30,30,50,.9);padding:20px;border-radius:12px;display:none;gap:15px;border:2px solid #fff;box-shadow:0 0 20px rgba(0,0,0,.5)"></div><script src=https://www.gstatic.com/firebasejs/9.6.7/firebase-app-compat.js></script><script src=https://www.gstatic.com/firebasejs/9.6.7/firebase-firestore-compat.js></script><script src=https://www.gstatic.com/firebasejs/9.6.7/firebase-auth-compat.js></script><script src=https://www.gstatic.com/firebasejs/9.6.7/firebase-functions-compat.js></script><script src=firebase-config.js></script><script>firebase.initializeApp(firebaseConfig);const db=firebase.firestore(),auth=firebase.auth(),functions=firebase.functions()</script><script src=js/ClassroomSDK.js></script><script src=js/student-app.js></script>


================================================================================
File 10/34: C:\Users\Meir Livneh\Documents\fireClass\build.py
================================================================================

import os
import shutil
import subprocess

# ==============================================================================
#  Python Build Script for fireClass Project (Corrected Version)
# ==============================================================================

SOURCE_DIR = 'public'
BUILD_DIR = 'BUILD'
TERSER_CMD = os.path.join('node_modules', '.bin', 'terser')
MINIFY_CMD = os.path.join('node_modules', '.bin', 'minify')

def run_command(command_parts):
    """Runs a command and checks for errors."""
    print(f"  > Running: {' '.join(command_parts)}")
    is_windows = os.name == 'nt'
    result = subprocess.run(command_parts, capture_output=True, text=True, shell=is_windows)
    if result.returncode != 0:
        print(f"    ERROR: Command failed with exit code {result.returncode}")
        print(f"    Stderr: {result.stderr}")
    return result.returncode == 0

def main():
    """Main function to orchestrate the build process."""
    print(f"--- Starting fireClass build process ---")

    print(f"\n--- Step 1: Cleaning up old '{BUILD_DIR}' directory... ---")
    if os.path.exists(BUILD_DIR):
        shutil.rmtree(BUILD_DIR)
        print(f"Removed old '{BUILD_DIR}' directory.")
    
    os.makedirs(BUILD_DIR, exist_ok=True)
    print(f"Created clean '{BUILD_DIR}' directory.")

    print(f"\n--- Step 2: Minifying and copying project files from '{SOURCE_DIR}'... ---")
    
    files_processed = 0
    for root, _, files in os.walk(SOURCE_DIR):
        for filename in files:
            source_path = os.path.join(root, filename)
            relative_path = os.path.relpath(source_path, SOURCE_DIR)
            dest_path = os.path.join(BUILD_DIR, relative_path)
            
            os.makedirs(os.path.dirname(dest_path), exist_ok=True)
            
            print(f"\nProcessing: {source_path}")

            success = False
            # *** THIS IS THE FIX: We exclude firebase-config.js from being minified by Terser ***
            if filename.endswith('.js') and filename != 'firebase-config.js':
                command = [TERSER_CMD, source_path, '-o', dest_path, '-c', '-m']
                success = run_command(command)
            elif filename.endswith(('.css', '.html')):
                with open(dest_path, 'w', encoding='utf-8') as f_out:
                    result = subprocess.run([MINIFY_CMD, source_path], capture_output=True, text=True, shell=(os.name == 'nt'))
                    if result.returncode == 0:
                        f_out.write(result.stdout)
                        success = True
                    else:
                        print(f"    ERROR: Minify failed for {filename}")
                        print(f"    Stderr: {result.stderr}")
            else:
                # All other files (like config.json AND firebase-config.js) will be copied as-is
                shutil.copy2(source_path, dest_path)
                print(f"  > Copied '{filename}' as-is.")
                success = True

            if success:
                files_processed += 1

    print("\n" + "="*50)
    print(f"‚úÖ Build process complete! Processed {files_processed} files.")
    print(f"Production-ready files are located in the '{BUILD_DIR}' directory.")
    print("="*50)

if __name__ == "__main__":
    main()

================================================================================
File 11/34: C:\Users\Meir Livneh\Documents\fireClass\deploy.py
================================================================================

import os
import subprocess
import shutil
import json
import argparse
import getpass

# ==============================================================================
#  Python Installation Script for fireClass & Game Theory Projects
#
#  This script automates the setup process described in the installation guide.
#  SIMULATION MODE IS THE DEFAULT.
#
#  Usage:
#    - Simulation Mode (default): python install.py
#    - Live Execution Mode:       python install.py --live
# ==============================================================================

def print_header(title):
    """Prints a formatted header."""
    print("\n" + "="*70)
    print(f"--- {title} ---")
    print("="*70)

def run_command(command_parts, simulate=True, capture_output=False):
    """
    Runs a command and checks for errors.
    In simulation mode (default), it just prints the command.
    """
    command_str = ' '.join(command_parts)
    print(f"  > Executing: {command_str}")
    
    if simulate:
        print("    [SIMULATE] Command not executed.")
        return True, "simulated_output"
        
    try:
        is_windows = os.name == 'nt'
        result = subprocess.run(
            command_parts, 
            capture_output=capture_output, 
            text=True, 
            shell=is_windows,
            check=not capture_output
        )
        if capture_output and result.returncode != 0:
            print(f"    ERROR: Command failed with exit code {result.returncode}")
            print(f"    Stderr: {result.stderr}")
            return False, result.stderr
            
        return True, result.stdout if capture_output else ""
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        print(f"    FATAL ERROR: Could not run command. {e}")
        return False, str(e)

def check_dependencies(simulate=True):
    """Checks if required command-line tools are installed."""
    print_header("Step 0: Checking Prerequisites")
    dependencies = ['node', 'npm', 'firebase']
    all_found = True
    
    for dep in dependencies:
        if shutil.which(dep):
            print(f"  [V] Found: {dep}")
        else:
            print(f"  [X] NOT FOUND: {dep}")
            all_found = False
            
    if not all_found:
        print("\nERROR: One or more dependencies are missing.")
        print("Please install Node.js (which includes npm) and the Firebase CLI.")
        print(" - Node.js: https://nodejs.org/")
        print(" - Firebase CLI: npm install -g firebase-tools")
        return False
        
    print("  All prerequisites are installed.")
    return True

def create_project(simulate=True):
    """Guides the user through creating a new Firebase project."""
    print_header("Step 1: Create Firebase Project")
    
    project_id = input("Enter a unique ID for your new Firebase project (e.g., 'my-poker-game-123'): ")
    if not project_id:
        print("Project ID cannot be empty.")
        return None
        
    print("\nAttempting to create Firebase project...")
    success, _ = run_command(['firebase', 'projects:create', project_id, '--display-name', project_id, '--location=europe-west1'], simulate)

    if success:
        print(f"Project '{project_id}' created successfully (or simulated).")
        return project_id
    else:
        print("Failed to create project.")
        return None

def enable_services(project_id, simulate=True):
    """Enables required Google Cloud services for the project."""
    print_header("Step 2: Enable Cloud Services")

    services_to_enable = [
        'secretmanager.googleapis.com',
        'cloudfunctions.googleapis.com',
        'cloudbuild.googleapis.com',
        'artifactregistry.googleapis.com'
    ]

    for service in services_to_enable:
        print(f"\nEnabling {service}...")
        run_command(['gcloud', 'services', 'enable', service, '--project', project_id], simulate)

    print("\nEnabling Firestore...")
    run_command(['gcloud', 'firestore', 'databases', 'create', '--location=eur3', '--project', project_id], simulate)
    
    print("\nNote: Anonymous Authentication must be enabled manually in the Firebase Console.")
    print("Go to Authentication > Sign-in method > Add new provider > Anonymous > Enable.")

def setup_local_project(project_id, simulate=True):
    """Sets up the local project files and installs dependencies."""
    print_header("Step 4 & 5: Setup Local Project & Configuration")
    
    firebaserc_content = { "projects": { "default": project_id } }
    print("\nCreating .firebaserc file...")
    if not simulate:
        with open('.firebaserc', 'w') as f:
            json.dump(firebaserc_content, f, indent=2)
    print(f"  Content: {json.dumps(firebaserc_content)}")

    print("\nCreating firebase.json from template...")
    firebase_json_content = {
      "firestore": {"rules": "firestore.rules", "indexes": "firestore.indexes.json"},
      "functions": {"source": "functions"},
      "hosting": {
        "public": "public",
        "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
        "rewrites": [{"source": "**", "destination": "/index.html"}]
      }
    }
    if not simulate:
        with open('firebase.json', 'w') as f:
            json.dump(firebase_json_content, f, indent=2)
    print("  firebase.json created.")

    print("\nCreating public/config.json...")
    student_app_url = f"https://{project_id}.web.app/student-app.html"
    config_json_content = {
        "studentAppUrl": student_app_url,
        "games": [
            {"name": "Poker Game", "description": "Game Theory Poker", "icon": "üÉè", "url": "YOUR_POKER_GAME_URL_HERE"},
            {"name": "Homer Face Rec", "description": "Face Recognition", "icon": "üë®", "url": "https://meir.world/face-recognition/"}
        ]
    }
    if not simulate:
        os.makedirs('public', exist_ok=True)
        with open(os.path.join('public', 'config.json'), 'w') as f:
            json.dump(config_json_content, f, indent=2)
    print(f"  Student App URL set to: {student_app_url}")
    
    print("\nGenerating public/firebase-config.js...")
    run_command(['firebase', 'apps:sdkconfig', 'WEB', '--project', project_id, '-o', os.path.join('public', 'firebase-config.js')], simulate)

    print("\nInstalling function dependencies (npm install)...")
    if not simulate:
        if os.path.isdir('functions') and os.path.exists(os.path.join('functions', 'package.json')):
            subprocess.run(['npm', 'install'], cwd='functions', check=True, shell=(os.name == 'nt'))
        else:
            print("  [SKIP] 'functions' directory or 'package.json' not found. Skipping npm install.")
    else:
        print("  [SIMULATE] Would run 'npm install' in 'functions' directory.")

def set_secrets(project_id, simulate=True):
    """Guides the user to set the necessary API key secrets."""
    print_header("Step 6: Set API Key Secrets")
    print("You will be prompted to enter your API keys from external services.")
    print("Your input will not be shown on screen for security.")
    
    secrets = ['OPENAI_API_KEY', 'CLAUDE_API_KEY', 'GEMINI_API_KEY']
    
    for secret_name in secrets:
        if simulate:
            print(f"\n  [SIMULATE] Would prompt for {secret_name} and run:")
            print(f"  > firebase functions:secrets:set {secret_name} --project {project_id}")
            continue
            
        try:
            secret_value = getpass.getpass(f"  Please enter your {secret_name}: ")
            if secret_value:
                command = f'echo "{secret_value}" | firebase functions:secrets:set {secret_name} --project {project_id}'
                print(f"  > Setting secret for {secret_name}...")
                subprocess.run(command, shell=True, check=True, text=True)
                print(f"  Secret for {secret_name} set successfully.")
            else:
                print(f"  Skipping {secret_name} as no value was provided.")
        except Exception as e:
            print(f"  An error occurred while setting secret {secret_name}: {e}")

def final_deploy(simulate=True):
    """Runs the final deploy command after user confirmation."""
    print_header("Step 7: Final Deployment")
    
    if simulate:
        print("  [SIMULATE] Would ask for confirmation and run 'firebase deploy'.")
        return
        
    confirm = input("Are you ready to deploy the entire project to Firebase? (y/n): ").lower()
    if confirm == 'y':
        print("Deploying project...")
        run_command(['firebase', 'deploy'], simulate=False) # Force live mode for this command
    else:
        print("Deployment cancelled by user.")

def main():
    """Main function to orchestrate the installation."""
    parser = argparse.ArgumentParser(description="Automated installer for fireClass and related projects.")
    parser.add_argument('--live', action='store_true', help="Run in live mode, executing all commands.")
    args = parser.parse_args()

    # Simulation is the default unless --live is specified.
    is_simulation = not args.live

    if is_simulation:
        print_header("RUNNING IN SIMULATION MODE")
        print("This script will only print the steps it would take.")
        print("No files will be created and no commands will be executed.")
        print("To run the installation for real, use the --live flag:")
        print("  python install.py --live")
    else:
        print_header("RUNNING IN LIVE MODE")
        print("This script will execute commands and create/modify files.")
        print("Make sure you have backed up any important data.")
        input("Press Enter to continue...")


    if not check_dependencies(is_simulation):
        return

    print("\nReminder: This script does not create API keys for you.")
    print("Please ensure you have created your keys from OpenAI, Anthropic, and Google AI Studio.")
    if not is_simulation:
        input("Press Enter to continue...")

    project_id = create_project(is_simulation)
    if not project_id and not is_simulation:
        print("Exiting due to project creation failure.")
        return
    if is_simulation and not project_id:
        project_id = "simulated-project-123"
        print(f"[SIMULATE] Using dummy project ID: {project_id}")

    enable_services
if __name__ == "__main__":
    main()    

================================================================================
File 12/34: C:\Users\Meir Livneh\Documents\fireClass\file_collector_script.py
================================================================================

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
File Collector Script
Collects all text files (HTML, JSON, JS, MD, TXT, etc.) into a single text file with separators
"""

import os
import glob
from pathlib import Path

def should_exclude_directory(dir_path):
    """Check if directory should be excluded"""
    dir_name = os.path.basename(dir_path).lower()
    
    # Standard directories to exclude
    exclude_dirs = {
        'node_modules',
        '.firebase',
        '.git',
        '__pycache__',
        '.vscode',
        '.idea',
        'build-old',
        'test-results',
        'tests'
    }
    
    # Check for exact matches
    if dir_name in exclude_dirs:
        return True
    
    # Check for patterns
    if dir_name.startswith('folder'):
        return True
    
    return False

def should_exclude_file(file_path):
    """Check if file should be excluded"""
    file_name = os.path.basename(file_path).lower()
    
    # Specific files to exclude
    exclude_files = {
        'installation_guide.pdf',
        'pglite-debug.log'
    }
    
    if file_name in exclude_files:
        return True
    
    # Check for test patterns
    if file_name.startswith('test'):
        return True
    
    return False

def is_target_file(file_path):
    """Check if file is a text file (HTML, JSON, JS, MD, TXT, etc.)"""
    text_extensions = (
        '.html', '.htm', '.json', '.js', '.jsx', '.ts', '.tsx',
        '.md', '.txt', '.css', '.scss', '.sass', '.less',
        '.xml', '.yml', '.yaml', '.ini', '.cfg', '.conf',
        '.log', '.sql', '.py', '.php', '.rb', '.go', '.java',
        '.c', '.cpp', '.h', '.hpp', '.cs', '.vb', '.sh', '.bat',
        '.ps1', '.vue', '.svelte', '.angular', '.react'
    )
    return file_path.lower().endswith(text_extensions)

def collect_files(root_dir):
    """Collect all target files from the directory tree"""
    collected_files = []
    root_path = Path(root_dir)
    
    # Handle special case for fireClass-documentation
    documentation_dir = root_path / "fireClass-documentation"
    if documentation_dir.exists():
        special_file = documentation_dir / "updated_specs.md"
        if special_file.exists():
            collected_files.append(str(special_file))
    
def collect_files(root_dir):
    """Collect all target files from the directory tree"""
    collected_files = []
    root_path = Path(root_dir)
    
    # Handle special case for fireClass-documentation
    documentation_dir = root_path / "fireClass-documentation"
    if documentation_dir.exists():
        special_file = documentation_dir / "updated_specs.md"
        if special_file.exists():
            collected_files.append(str(special_file))
    
    # Walk through all directories
    for root, dirs, files in os.walk(root_dir):
        # Filter out excluded directories
        dirs[:] = [d for d in dirs if not should_exclude_directory(os.path.join(root, d))]
        
        # Skip the fireClass-documentation directory for normal processing
        # (we already handled the special file above)
        if os.path.basename(root) == "fireClass-documentation":
            continue
        
        # Process files in current directory
        for file in files:
            file_path = os.path.join(root, file)
            
            # Skip excluded files
            if should_exclude_file(file_path):
                continue
            
            # Check if it's a target file
            if is_target_file(file_path):
                collected_files.append(file_path)
    
    return sorted(collected_files)

def read_file_content(file_path):
    """Read file content with proper encoding handling"""
    encodings = ['utf-8', 'utf-8-sig', 'windows-1255', 'iso-8859-8', 'cp1252']
    
    for encoding in encodings:
        try:
            with open(file_path, 'r', encoding=encoding) as f:
                return f.read()
        except (UnicodeDecodeError, UnicodeError):
            continue
        except Exception as e:
            return f"ERROR: Could not read file - {str(e)}"
    
    return "ERROR: Could not decode file with any supported encoding"

def create_output_file(files, output_path):
    """Create the output file with all collected files"""
    with open(output_path, 'w', encoding='utf-8') as output_file:
        output_file.write("=" * 80 + "\n")
        output_file.write("COLLECTED FILES - FIRECLASS PROJECT\n")
        output_file.write("=" * 80 + "\n\n")
        
        for i, file_path in enumerate(files, 1):
            # Create separator with file info
            separator = "=" * 80
            file_info = f"File {i}/{len(files)}: {file_path}"
            
            output_file.write(f"{separator}\n")
            output_file.write(f"{file_info}\n")
            output_file.write(f"{separator}\n\n")
            
            # Read and write file content
            content = read_file_content(file_path)
            output_file.write(content)
            output_file.write("\n\n")
        
        # Final separator
        output_file.write("=" * 80 + "\n")
        output_file.write("END OF COLLECTED FILES\n")
        output_file.write("=" * 80 + "\n")

def main():
    """Main function"""
    # Get current directory
    current_dir = os.getcwd()
    print(f"Scanning directory: {current_dir}")
    
    # Collect files
    print("Collecting files...")
    files = collect_files(current_dir)
    
    if not files:
        print("No files found matching criteria.")
        return
    
    print(f"Found {len(files)} files:")
    for file_path in files:
        print(f"  - {file_path}")
    
    # Create output file
    output_path = os.path.join(current_dir, "collected_files.txt")
    print(f"\nCreating output file: {output_path}")
    
    create_output_file(files, output_path)
    
    print(f"Done! All files collected into: {output_path}")
    print(f"Total files processed: {len(files)}")

if __name__ == "__main__":
    main()

================================================================================
File 13/34: C:\Users\Meir Livneh\Documents\fireClass\fireClass-documentation\updated_specs.md
================================================================================

# fireClass Control - Digital Classroom Management System
## Architecture Documentation Based on Existing Codebase

**Version:** 3.2 (Code-Aligned Documentation)  
**Last Updated:** July 06, 2025

---

## 1. Overview

Teachers invest significant time creating high-quality presentations in PowerPoint or Google Slides. These presentations are rich with knowledge and thought-provoking questions, but often result in a passive, one-way lecture. Key questions are asked to the room, but the teacher has no real-time, data-driven way to know who understands, who is struggling, or what the class is truly thinking at that moment.

**fireClass Control transforms existing presentations from monologues into interactive dialogues.**

It is a real-time digital classroom management system that "wraps" any web-based content‚Äîwhether it's an external simulation from **PhET**, a tool like **Google's Teachable Machine**, or a custom-built application‚Äîwith a layer of classroom infrastructure. With a single button click from within their existing PowerPoint slide, a teacher can launch the fireClass Dashboard, turning any slide into a live, interactive, and measurable learning experience without changing their original materials.

---

## 2. Technical Architecture

### 2.1 System Structure Diagram

```mermaid
flowchart TD
    subgraph "Client Applications"
        Teacher["üñ•Ô∏è Teacher Dashboard<br/>(index.html)"]
        Student["üì± Student App<br/>(student-app.html)"]
        PPT["PowerPoint Integration<br/>(VBA Macro)"]
    end

    subgraph "Core JavaScript Layer"
        SDK["ClassroomSDK.js<br/>(Shared Logic)"]
        TeacherJS["teacher-dashboard.js<br/>(Teacher Logic)"]
        StudentJS["student-app.js<br/>(Student Logic)"]
    end

    subgraph "Firebase Backend (europe-west1)"
        Firestore[(Firestore Database)]
        Functions[Cloud Functions]
        Auth[Anonymous Authentication<br/>(Teacher Only)]
        Hosting[Static Hosting]
    end

    subgraph "Configuration"
        Config["config.json<br/>(Game URLs & Settings)"]
        CSS["CSS Files<br/>(Styling)"]
    end

    Teacher --> TeacherJS
    Student --> StudentJS
    TeacherJS --> SDK
    StudentJS --> SDK
    
    SDK --> Firestore
    SDK --> Functions
    SDK --> Auth
    
    Hosting --> Teacher
    Hosting --> Student
    Hosting --> Config
    
    PPT -.-> Teacher
```

### 2.2 Communication Components

#### a) ClassroomSDK.js - Core Engine
- **Room Creation** - `generateUniqueRoomCode()` generates unique 4-digit codes
- **Initialization** - `init()` handles teacher vs student differentiation
- **Real-time Communication** - Firestore snapshot listeners
- **UI Interfaces** - Creates floating chat and AI interfaces

#### b) User Authentication (Updated in v3.2)
```javascript
// Teacher: Anonymous login with Firebase Authentication
await this.auth.signInAnonymously();

// Student: Session-based ID generation (no Firebase Auth)
getOrCreateStudentId() {
    let studentId = sessionStorage.getItem('studentId');
    if (!studentId) {
        studentId = 'student_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        sessionStorage.setItem('studentId', studentId);
    }
    return studentId;
}
```

**Teacher**: Uses Firebase Anonymous Authentication to obtain a stable, unique UID for creating and managing the classroom.

**Student**: **NO Firebase Authentication.** Upon joining, the student app generates a temporary, unique session ID (studentId) stored in sessionStorage. This ID is unique per browser tab and allows for multiple students to be simulated from a single device for testing purposes.

#### b.1) Dual-Listener Architecture (Critical for Message Flow)

The system employs a dual-listener architecture to handle different types of real-time updates:

**Room Updates Listener** (`listenForRoomUpdates`)
- Monitors: `/rooms/{roomCode}` document changes
- Handles: AI settings, poll data, content commands, general room state
- Used by: Both teacher and student apps
- Purpose: System-level state synchronization

**Messages Listener** (`listenForMessages`) 
- Monitors: `/rooms/{roomCode}/messages` subcollection
- Handles: Chat messages (public and private), message filtering
- Used by: Both teacher and student apps  
- Purpose: Real-time communication stream

**Critical Implementation Note:** Student apps MUST initialize both listeners. Missing the messages listener results in students not receiving any messages from teachers, which was a common implementation oversight.

```javascript
// Required initialization for students:
this.classroom.listenForRoomUpdates(this.stateManager.bind(this));  // For AI/polls/commands
this.classroom.listenForMessages(this.messageHandler.bind(this));   // For actual messages
```

#### c) Room Management
```javascript
// Room structure in Firestore
/rooms/{4-digit-code}/
‚îú‚îÄ‚îÄ settings/
‚îÇ   ‚îú‚îÄ‚îÄ ai_active: boolean
‚îÇ   ‚îú‚îÄ‚îÄ ai_model: string
‚îÇ   ‚îî‚îÄ‚îÄ current_command: object
‚îÇ   ‚îî‚îÄ‚îÄ currentPoll: {          // Enhanced polling structure
‚îÇ       ‚îú‚îÄ‚îÄ id: string
‚îÇ       ‚îú‚îÄ‚îÄ type: string
‚îÇ       ‚îú‚îÄ‚îÄ question: string
‚îÇ       ‚îú‚îÄ‚îÄ isActive: boolean
‚îÇ       ‚îî‚îÄ‚îÄ responses: {
‚îÇ           // Key: student name (open_text) or studentId (choice)
‚îÇ           // Value: array of strings (open_text) or number (choice)
‚îÇ           }
‚îÇ       }
‚îú‚îÄ‚îÄ students/{studentId}        // Uses session-based ID (NOT Firebase UID)
‚îî‚îÄ‚îÄ messages/{messageId}
```

---

## 3. Case Study: Interactive AI Lesson ("Homer Face Recognition")

This example demonstrates how the platform transforms a standard lesson into an interactive, hands-on experience.

**The Lesson Goal:** Teach middle school students the basic principles of AI face recognition.
**The Teacher's Material:** A PowerPoint slide with pictures of Homer Simpson.

#### **The "Before" Scenario (Without fireClass):**
The teacher shows a slide and asks, "How do you think a computer knows this is Homer?" The discussion is verbal, and engagement is hard to track.

#### **The "After" Scenario (With fireClass):**
1.  **Launch from PowerPoint:** The teacher reaches the relevant slide and clicks a pre-set button. The fireClass Dashboard opens seamlessly.
2.  **Send Interactive Content:** From the dashboard, the teacher selects the "AI Model Training" app (defined in `config.json`) and sends it to all students.
3.  **Active, Measurable Learning:**
    * **Training Phase:** Students are prompted to measure key geometric ratios on a base image of Homer.
    * **Testing Phase:** They test their "trained" model on other images of Homer with different expressions and angles.
    * **Analysis:** A results table shows them a similarity score for each test image, demonstrating why the AI succeeds or fails.
4.  **Real-time Teacher Insights:** The teacher's dashboard shows each student's results and allows for private chat.
5.  **Data-Driven Discussion:** The teacher pauses the activity and says, "I see many of you found the AI failed when Homer was surprised. Let's discuss why a change in expression breaks a measurement-based model."

The platform didn't just show a game; it created a hands-on lab for understanding AI, all launched from the teacher's original presentation.

---

## 4. Performance and Data Management Considerations

The system's architecture was deliberately designed for real-time responsiveness and efficiency, based on two key principles:

### 4.1 Data Structure: Embedded Map vs. Subcollection

For poll responses, the system stores answers in an **embedded map field** (`responses`) within the `currentPoll` object, rather than in a separate subcollection. For a typical classroom size (30-50 students), this approach is significantly more performant:
* **Efficiency**: The teacher's dashboard receives all poll data (the question and all its answers) in a **single document read** from Firestore. A subcollection model would have required one read for the poll metadata plus dozens of individual reads for each answer, increasing latency and cost.
* **Simplicity**: Managing a single real-time listener that receives a complete, self-contained object simplifies the client-side state management logic enormously.

While a subcollection offers greater scalability for millions of entries, the embedded map approach is optimized for the specific use case of a live classroom, where the number of responses is bounded and real-time aggregation is critical.

### 4.2 Local Cache for Immediate Actions

The teacher's dashboard maintains a local, in-memory copy of the current poll's responses (`this.currentQuestionResponses`).
* **Synchronization**: This local cache is kept perfectly in sync with Firestore via the real-time `onSnapshot` listener.
* **Responsiveness**: When the teacher requests an immediate action, such as an AI analysis (`handleAiAnalysis`), the system uses this local cache instead of making a new, asynchronous database query. This ensures that UI actions feel instantaneous, providing a fluid and responsive user experience.

---

## 5. File Structure and Code Organization

### 5.1 Directory Structure
```
public/
‚îú‚îÄ‚îÄ index.html                 # Teacher Dashboard
‚îú‚îÄ‚îÄ student-app.html           # Student Interface  
‚îú‚îÄ‚îÄ firebase-config.js         # Firebase Configuration
‚îú‚îÄ‚îÄ config.json               # Games & URLs Configuration
‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îú‚îÄ‚îÄ teacher-dashboard.css  # Teacher Styling (English LTR)
‚îÇ   ‚îî‚îÄ‚îÄ student-app.css       # Student Styling (English LTR)
‚îî‚îÄ‚îÄ js/
    ‚îú‚îÄ‚îÄ ClassroomSDK.js       # Core SDK
    ‚îú‚îÄ‚îÄ teacher-dashboard.js  # Teacher Logic
    ‚îî‚îÄ‚îÄ student-app.js        # Student Logic
```

### 5.2 ClassroomSDK.js - Core Functionality

#### Room Creation (Teacher)
```javascript
async generateUniqueRoomCode() {
    // 20 attempts to find unique 4-digit code
    let attempts = 0;
    const maxAttempts = 20;
    
    while (attempts < maxAttempts) {
        const roomCode = Math.floor(1000 + Math.random() * 9000).toString();
        const roomRef = this.db.collection('rooms').doc(roomCode);
        const doc = await roomRef.get();
        
        if (!doc.exists) {
            return roomCode;
        }
        attempts++;
    }
}
```

#### Room Joining (Student)
```javascript
async joinRoom(studentId, playerName) {
    const studentRef = this.db.collection('rooms').doc(this.roomCode)
                             .collection('students').doc(studentId);
    await studentRef.set({
        uid: studentId,  // This is the session-based ID, NOT Firebase UID
        name: playerName,
        joined_at: firebase.firestore.FieldValue.serverTimestamp()
    });
}
```

#### Real-time Communication Interfaces
```javascript
// Listen for students (Teacher)
listenForStudents(callback) {
    const studentsCollection = this.db.collection('rooms').doc(this.roomCode)
                                     .collection('students');
    
    this.studentsListener = studentsCollection.onSnapshot(snapshot => {
        const students = [];
        snapshot.forEach(doc => students.push(doc.data()));
        callback(students);
    });
}

// Listen for messages (Everyone)
listenForMessages(callback) {
    const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                     .collection('messages')
                                     .orderBy('timestamp');
    
    this.messagesListener = messagesCollection.onSnapshot(snapshot => {
        const newMessages = [];
        snapshot.docChanges().forEach(change => {
            if (change.type === "added") {
                const msg = change.doc.data();
                const currentUserId = this.isTeacher ? this.auth.currentUser?.uid : this.studentId;
                const isPrivate = msg.is_private === true;
                const isRecipient = msg.recipient_uid === currentUserId;
                const isSender = msg.sender_uid === currentUserId;

                if (!isPrivate || this.isTeacher || isRecipient || isSender) {
                    newMessages.push(msg);
                }
            }
        });

        if (newMessages.length > 0 && typeof callback === 'function') {
            callback(newMessages);
        }
    });
}
```

### 5.3 Command System
```javascript
// Send command (Teacher)
async sendCommand(commandName, payload = {}) {
    const roomRef = this.db.collection('rooms').doc(this.roomCode);
    await roomRef.update({
        'settings.current_command': {
            command: commandName,
            payload: payload,
            timestamp: firebase.firestore.FieldValue.serverTimestamp()
        }
    });
}

// Listen for commands (Student) - Central State Manager
stateManager: function(roomData) {
    if (!roomData || !roomData.settings) return;

    const settings = roomData.settings;
    const pollData = settings.currentPoll;
    const command = settings.current_command;
    const isAiActive = settings.ai_active === true;

    // 1. Update UI components (like AI button) on every update
    const aiButton = document.getElementById('classroom-ai-btn');
    if (aiButton) {
        aiButton.style.display = isAiActive ? 'block' : 'none';
    }

    // 2. Handle polls with priority
    if (pollData && pollData.isActive) {
        if (this.currentPollId !== pollData.id) {
            this.currentPollId = pollData.id;
            this.renderPollInterface(pollData);
        }
        return;
    }

    // 3. Handle content commands
    if (command && command.command === 'LOAD_CONTENT') {
        const iframe = document.getElementById('content-frame');
        const newUrl = command.payload.url || 'about:blank';
        if (iframe && iframe.src !== newUrl) {
            iframe.src = newUrl;
        }
        return;
    }
}
```

---

## 6. User Interfaces

### 6.1 Teacher Dashboard (index.html + teacher-dashboard.js)

#### Top Navigation Menu
- **Quick Actions** - Pre-made messages for class, including "End Lesson" workflow
- **Games & Content** - Load URLs from config.json
- **AI Management** - Enable/disable + model selection (ChatGPT/Claude/Gemini)
- **Tools** - Debug console and data export
- **Polls** - Create quick polls for class
- **Reports** - Advanced reporting and analytics

#### Main Content Areas
```javascript
// Student list with private messaging
updateStudentsList(studentsData) {
    this.students = studentsData;
    const studentsListDiv = document.getElementById('studentsList');
    
    studentsListDiv.innerHTML = '';
    
    this.students.forEach(student => {
        const studentElement = document.importNode(template.content, true);
        const nameSpan = studentElement.querySelector('.student-name');
        nameSpan.textContent = student.name;

        const actionsDiv = studentElement.querySelector('.student-actions');
        const privateMsgBtn = document.createElement('button');
        privateMsgBtn.textContent = 'Private Message';
        privateMsgBtn.className = 'private-message-btn';
        privateMsgBtn.onclick = () => this.openPrivateMessageModal(student);
        actionsDiv.appendChild(privateMsgBtn);
        
        studentsListDiv.appendChild(studentElement);
    });
}

// Messages with full validation and private message support
addSingleMessage(message) {
    const sender = message?.sender || 'Unknown User';
    const content = message?.content || 'Empty Message';
    const isPrivate = message?.is_private === true;
    
    // Prevent duplicate messages
    const messageId = message.timestamp?.seconds + '_' + message.sender_uid + '_' + message.content.substring(0, 20);
    const existingMessage = messagesArea.querySelector(`[data-message-id="${messageId}"]`);
    if (existingMessage) return;
    
    // Create message with proper validation...
}
```

#### Advanced AI System
```javascript
// Teacher AI initialization
async initializeTeacherAI() {
    try {
        // 1. Check AI service availability
        const aiStatus = await this.testAIService();
        
        // 2. Show AI button (even if service not available)
        this.showTeacherAIButton();
        
        // 3. Update AI status
        await this.checkAIStatus();
        
        this.debugLog("‚úÖ Teacher AI initialized successfully");
    } catch (error) {
        console.error("üî• Error initializing teacher AI:", error);
        this.showTeacherAIButton(); // Show button anyway
    }
}

// AI model switching
async switchAIModel(model) {
    const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
    await roomRef.update({
        'settings.ai_model': model
    });
    
    this.currentAiModel = model;
    this.updateAIModelDisplay();
    this.addActivity(`üîÑ AI model switched to: ${this.getModelDisplayName(model)}`);
}
```

### 6.2 Student App (student-app.html + student-app.js)

The student application is designed for simplicity and consistency. Its primary role is to act as a container for variable content while providing a fixed set of communication and interaction tools.

#### **UI Architecture: The Three Permanent Tools**
Upon successful login, the student interface is enhanced with three permanent, floating, and draggable buttons. These buttons are **always visible** and do not appear or disappear.

* **üí¨ Chat Button**: Always available for student-initiated communication.
* **ü§ñ AI Button**: Always visible. Its *functionality* is controlled by the teacher.
* **üìä Poll Button**: Always visible. Becomes active with a visual indicator when a poll is launched by the teacher.

#### **State Management: Teacher Control vs. Student Control**
The core of the architecture is a clear separation of concerns, managed by the `stateManager` function which listens to real-time updates from Firestore.

* **Teacher Controls FUNCTIONALITY**:
    * **AI**: The teacher enables or disables the AI service. If disabled, the student's attempt to use it will result in an "AI not available" message inside the AI window. The button itself is never hidden.
    * **Polls**: The teacher starts and stops polls. Stopping a poll automatically closes the poll window on the student's screen.

* **Student Controls VISIBILITY**:
    * The student can click any of the three buttons at any time to open or close (minimize) the corresponding window.
    * The student can drag any of the buttons or windows to organize their workspace.

#### **Automatic UI Actions (Attention Hooks)**
To ensure students do not miss important events, the system automatically opens windows in specific scenarios:

1.  **Teacher Message Received**: If the student's chat window is closed, it will **automatically open** to display the new message from the teacher.
2.  **New Poll Launched**: When the teacher starts a new poll, the student's poll window will **automatically open** with the question.

This architecture provides a predictable and powerful user experience, where the tools are consistently available but intelligently respond to the teacher's pedagogical actions.

```javascript
// The updated stateManager logic reflecting the new architecture
stateManager: function(roomData) {
    if (!roomData || !roomData.settings) return;

    const settings = roomData.settings;
    const pollData = settings.currentPoll;

    // 1. AI State Management: Update the SDK's internal state. Do NOT hide the button.
    this.classroom.isAiActiveForClass = settings.ai_active === true;

    // 2. Poll State Management: Control badge and auto-open/close the window
    const pollIsActive = pollData && pollData.isActive;
    const pollContainer = document.getElementById('classroom-poll-container');

    if (pollIsActive) {
        // If a new poll arrives, render it and force the window open
        if (this.currentPollId !== pollData.id) {
            this.currentPollId = pollData.id;
            this.renderPollInterface(pollData); // This function now ensures the window is visible
        }
    } else {
        // If teacher stops the poll, force the window to close
        if (this.currentPollId !== null) {
            this.clearPollInterface();
            this.currentPollId = null;
        }
    }
    // ... (Content command logic remains the same)
}
```

---

## 7. Polling System (Enhanced)

### 7.1 Poll Types and Data Structure
```javascript
// Poll configuration in Firestore
currentPoll: {
    id: "poll_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9),
    type: "yes_no" | "multiple_choice" | "open_text",
    question: "What is your understanding of...?", // Added in latest version
    options: 2 | 4 | 0, // Number of choices for yes_no/multiple_choice
    isActive: true,
    createdAt: timestamp,
    responses: {
        // For open_text: student name -> array of answers
        "student_name": ["first answer", "revised answer", "final answer"],
        // For choice-based: studentId -> choice number
        "student_session_id": 1
    }
}
```

### 7.2 Poll Creation and Management

The polling system is designed for real-time interaction while ensuring data integrity and security.

#### Teacher: Poll Creation (`startPoll`)
When a teacher starts a poll, the `startPoll` function on the teacher's dashboard creates a new poll object. This object includes a unique ID, the poll type, and an empty `responses` map. It then overwrites the `settings.currentPoll` field in the room's Firestore document. This "reset" action ensures that each poll starts with a clean slate.

#### Student: Poll Submission (`submitPollAnswer`)
To overcome Firestore security rules that prevent unauthenticated users from writing to the main room document, student answers are not sent directly to the database from the client. Instead, the process is as follows:
1.  The student's client (`ClassroomSDK.js`) calls a dedicated Cloud Function named `submitPollAnswer`.
2.  This function receives the student's answer, name, and room code.
3.  Running with administrative privileges on the server, the Cloud Function securely validates the data and updates the `responses` map within the `settings.currentPoll` object in Firestore.

This architecture is secure, robust, and ensures that the teacher's real-time listener is reliably triggered upon every new answer.

```javascript
// Client-side call from ClassroomSDK.js
async submitPollAnswer(answer) {
    try {
        const submitAnswerFunction = this.functions.httpsCallable('submitPollAnswer');
        await submitAnswerFunction({
            roomCode: this.roomCode,
            studentId: this.studentId,
            playerName: this.playerName,
            answer: answer
        });
    } catch (error) {
        console.error("Error calling submitPollAnswer cloud function:", error);
    }
}
```

### 7.3 Real-time Results Display
```javascript
// Display poll results on teacher dashboard
displayPollResults(pollData) {
    if (pollData && pollData.type === 'open_text' && pollData.isActive) {
        const container = document.getElementById('open-question-results');
        container.innerHTML = '';

        // Update local memory with latest responses
        this.currentQuestionResponses = pollData.responses || {};

        for (const [studentName, answers] of Object.entries(this.currentQuestionResponses)) {
            const lastAnswer = answers[answers.length - 1];
            const answerDiv = document.createElement('div');
            answerDiv.innerHTML = `<strong>${studentName} (${answers.length} versions):</strong><p>${lastAnswer}</p>`;
            container.appendChild(answerDiv);
        }
    } else if (pollData && (pollData.type === 'multiple_choice' || pollData.type === 'yes_no')) {
        const container = document.getElementById('poll-results-container');
        container.innerHTML = '';
        
        const responses = pollData.responses || {};
        let totalVotes = Object.keys(responses).length;
        
        for (let i = 1; i <= pollData.options; i++) {
            const votes = Object.values(responses).filter(vote => vote === i).length;
            const percentage = totalVotes > 0 ? ((votes / totalVotes) * 100).toFixed(1) : 0;
            const label = pollData.type === 'yes_no' ? (i === 1 ? 'Yes' : 'No') : `Option ${i}`;
            
            const barHtml = `
                <div style="margin-bottom: 12px;">
                    <div style="display: flex; justify-content: space-between;">
                        <strong>${label}</strong>
                        <span>${votes} votes (${percentage}%)</span>
                    </div>
                    <div style="background: #e0e0e0; border-radius: 4px; overflow: hidden;">
                        <div style="width: ${percentage}%; background: #42a5f5; height: 20px;"></div>
                    </div>
                </div>
            `;
            container.innerHTML += barHtml;
        }
    }
}
```

---

## 8. Configuration System (config.json)

### 8.1 Configuration File Structure
```json
{
  "studentAppUrl": "https://class-board-ad64e.web.app/student-app.html",
  "games": [
    {
      "name": "AI Model Training",
      "description": "Visual Recognition training",
      "icon": "üìö",
      "url": "https://meir.world/face-recognition/"
    },
    {
      "name": "TM",
      "description": "Goggle Teachable Machines",
      "icon": "üéØ",
      "url": "https://teachablemachine.withgoogle.com/train"
    },
    {
      "name": "PhET",
      "description": "Projectile Data Lab",
      "icon": "üéØ",
      "url": "https://phet.colorado.edu/sims/html/projectile-data-lab/latest/projectile-data-lab_all.html"
    }
  ]
}
```

### 8.2 Configuration Loading and Usage
```javascript
// Teacher dashboard loads config
async loadConfigData() {
    try {
        const response = await fetch('config.json');
        if (!response.ok) throw new Error('Network response was not ok');
        this.config = await response.json();
        this.debugLog('‚úÖ Config file loaded successfully', this.config);
    } catch (error) {
        console.error('üî• Error loading config file:', error);
        this.config = { studentAppUrl: 'student-app.html', games: [] };
    }
}

// Populate games list from config
populateGamesList() {
    const container = document.getElementById('game-list-container');
    const games = this.config?.games || [];
    
    container.innerHTML = '';
    
    games.forEach(game => {
        const gameElement = document.createElement('a');
        gameElement.href = '#';
        gameElement.className = 'dropdown-item';
        gameElement.onclick = (e) => {
            e.preventDefault();
            this.sendSelectedGame(game.url);
        };

        gameElement.innerHTML = `
            <span class="dropdown-icon">${game.icon || 'üîó'}</span>
            <div class="dropdown-content">
                <div class="dropdown-title">${game.name}</div>
                <div class="dropdown-desc">${game.description}</div>
            </div>
        `;
        container.appendChild(gameElement);
    });
}
```

---

## 9. Database Structure (Firestore) - Code-Aligned

### 9.1 Complete Schema
```
/rooms/{4-digit-code}
‚îú‚îÄ‚îÄ room_code: string
‚îú‚îÄ‚îÄ created_at: timestamp
‚îú‚îÄ‚îÄ last_activity: timestamp
‚îú‚îÄ‚îÄ teacher_uid: string (from Firebase Anonymous Auth)
‚îú‚îÄ‚îÄ settings: {
‚îÇ   ‚îú‚îÄ‚îÄ ai_active: boolean
‚îÇ   ‚îú‚îÄ‚îÄ ai_model: string ('chatgpt'|'claude'|'gemini')
‚îÇ   ‚îú‚îÄ‚îÄ current_command: {
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ command: string
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ payload: object
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ timestamp: timestamp
‚îÇ   ‚îÇ   }
‚îÇ   ‚îî‚îÄ‚îÄ currentPoll: {
‚îÇ       ‚îú‚îÄ‚îÄ id: string (unique poll identifier)
‚îÇ       ‚îú‚îÄ‚îÄ type: string ('yes_no'|'multiple_choice'|'open_text')
‚îÇ       ‚îú‚îÄ‚îÄ question: string
‚îÇ       ‚îú‚îÄ‚îÄ isActive: boolean
‚îÇ       ‚îî‚îÄ‚îÄ responses: {
‚îÇ           // For open_text: sanitized student name -> array of answers
‚îÇ           "student_name_sanitized": ["answer1", "answer2", "answer3"],
‚îÇ           // For choice-based: studentId (session-based) -> choice number
‚îÇ           "student_session_id": 1
‚îÇ           }
‚îÇ       }
‚îÇ   }
‚îú‚îÄ‚îÄ /students/{studentId}            // studentId is session-based, NOT Firebase UID
‚îÇ   ‚îú‚îÄ‚îÄ uid: string (the session-based studentId)
‚îÇ   ‚îú‚îÄ‚îÄ name: string
‚îÇ   ‚îî‚îÄ‚îÄ joined_at: timestamp
‚îú‚îÄ‚îÄ /questionHistory/{questionId}     // Historical questions for end-of-lesson reports
‚îÇ   ‚îú‚îÄ‚îÄ id: string
‚îÇ   ‚îú‚îÄ‚îÄ type: string
‚îÇ   ‚îú‚îÄ‚îÄ question: string
‚îÇ   ‚îú‚îÄ‚îÄ isActive: boolean (false for completed)
‚îÇ   ‚îú‚îÄ‚îÄ createdAt: timestamp
‚îÇ   ‚îú‚îÄ‚îÄ closedAt: timestamp
‚îÇ   ‚îî‚îÄ‚îÄ responses: object (complete response history)
‚îî‚îÄ‚îÄ /messages/{messageId}
    ‚îú‚îÄ‚îÄ sender: string (display name)
    ‚îú‚îÄ‚îÄ sender_uid: string (teacher Firebase UID or student session ID)
    ‚îú‚îÄ‚îÄ content: string
    ‚îú‚îÄ‚îÄ timestamp: timestamp
    ‚îú‚îÄ‚îÄ is_teacher: boolean
    ‚îú‚îÄ‚îÄ is_private: boolean
    ‚îî‚îÄ‚îÄ recipient_uid?: string (student session ID for private messages)
```

---

## 9. Security and Privacy Model

### 9.1 Authentication Architecture
**Teacher**: Uses Firebase Anonymous Authentication to get a stable UID for room management and administrative operations.

**Student**: **No Firebase Authentication whatsoever.** Uses browser sessionStorage-based unique IDs that persist only for the session.

### 9.2 Firestore Security Rules (Updated)
```javascript
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Rooms can be read by anyone with the room code
    match /rooms/{roomId} {
      allow read: if true;
      allow write: if request.auth != null; // Only authenticated teachers
      
      // Students collection - anyone can join (unauthenticated writes allowed)
      match /students/{studentId} {
        allow read, write: if true; // Open for session-based students
      }
      
      // Messages collection - anyone can send messages
      match /messages/{messageId} {
        allow read, write: if true; // Open for session-based students
      }
      
      // Question history - teacher only
      match /questionHistory/{questionId} {
        allow read, write: if request.auth != null;
      }
    }
  }
}
```

### 9.3 Privacy Protection
```javascript
// Private message filtering (client-side)
listenForMessages(callback) {
    this.messagesListener = messagesCollection.onSnapshot(snapshot => {
        const newMessages = [];
        snapshot.docChanges().forEach(change => {
            if (change.type === "added") {
                const msg = change.doc.data();
                const currentUserId = this.isTeacher ? this.auth.currentUser?.uid : this.studentId;
                const isPrivate = msg.is_private === true;
                const isRecipient = msg.recipient_uid === currentUserId;
                const isSender = msg.sender_uid === currentUserId;

                // Show message if: public OR user is teacher OR user is recipient/sender
                if (!isPrivate || this.isTeacher || isRecipient || isSender) {
                    newMessages.push(msg);
                }
            }
        });
        
        if (newMessages.length > 0 && typeof callback === 'function') {
            callback(newMessages);
        }
    });
}
```

---

## 10. Typical Workflow

### 10.1 Class Setup
1. **Teacher** opens `index.html`, system auto-generates 4-digit room code
2. **Teacher** shares code with students (QR code displayed in header)
3. **Students** navigate to `student-app.html?classroom={code}` (auto-populates room code)
4. **Students** enter name, system generates session-based `studentId`
5. **Real-time connection** established, teacher sees students appear

### 10.2 Content Delivery
```javascript
// Teacher selects content from config.json
sendSelectedGame(url) {
    this.sendCommand('LOAD_CONTENT', { url });
    // Closes modal automatically
    document.getElementById('customContentModal').querySelector('.modal-close').click();
}

// Student receives and loads content
stateManager: function(roomData) {
    const command = roomData.settings?.current_command;
    if (command && command.command === 'LOAD_CONTENT') {
        const iframe = document.getElementById('content-frame');
        iframe.src = command.payload.url || 'about:blank';
    }
}
```

### 10.3 Real-time Polling Workflow
1. **Teacher** creates poll through dashboard menu
2. **System** assigns unique poll ID and sets `isActive: true`
3. **Students** automatically see poll interface via `stateManager`
4. **Students** submit answers (multiple submissions allowed for open-text)
5. **Teacher** sees real-time results and can request AI analysis
6. **Teacher** stops poll when ready, system saves to question history

### 10.4 Enhanced Communication Flow

#### Real-time Message Architecture
The system uses a dual-stream approach for optimal performance:

**Stream 1: Room State Changes**
```javascript
// Teacher toggles AI, starts polls, sends content
this.classroom.listenForRoomUpdates((roomData) => {
    // Handles: AI settings, polls, content commands
    this.stateManager(roomData);
});
```

**Stream 2: Message Communication**  
```javascript
// Teacher/student chat messages
this.classroom.listenForMessages((messages) => {
    // Handles: Public messages, private messages, auto-chat opening
    messages.forEach(msg => {
        this.classroom.addChatMessage(msg.sender, msg.content, msg);
        
        // Auto-open chat for teacher messages (student-side)
        if (isChatHidden && msg.is_teacher) {
            this.classroom.toggleChat();
        }
    });
});
```

#### Message Flow Sequence
1. **Teacher sends message** ‚Üí Firestore `/rooms/{code}/messages/` subcollection
2. **Student receives via `listenForMessages`** ‚Üí Real-time message stream
3. **Message filtering** ‚Üí Private messages shown only to intended recipients
4. **Auto-UI updates** ‚Üí Chat window opens automatically for teacher messages
5. **State synchronization** ‚Üí Both teacher and student UIs reflect message delivery

#### Critical Implementation Requirements
- **Students MUST initialize both listeners** during login process
- **Teachers rely on Firebase Auth UID** for message attribution  
- **Students use session-based ID** for message attribution
- **Private message filtering** handled client-side via recipient_uid matching

This architecture ensures **complete separation** between system commands and human communication while maintaining real-time responsiveness.

---

## 11. Advanced Features

### 11.1 AI Analysis System
```javascript
// Teacher requests AI analysis of current poll responses
async handleAiAnalysis(type) {
    // Open teacher's AI window
    if (this.sdk.aiContainer.style.display === 'none') {
        this.sdk.toggleAI();
    }

    // Collect responses from local memory
    const allAnswers = JSON.stringify(this.currentQuestionResponses, null, 2);
    const lang = this.sdk.getInterfaceLanguage();
    
    let prompt;
    if (type === 'summarize') {
        prompt = `Here are student responses to a question. Each student name maps to an array of their answers (from first to last). Summarize the class's understanding, identify students whose answers indicate difficulty, and point out students who showed significant improvement across versions:\n\n${allAnswers}`;
    } else { // keywords
        prompt = `Extract the 10 most frequent and significant keywords from the following text:\n\n${allAnswers}`;
    }

    // Send to AI and reset responses for next round
    this.sdk.sendAIMessage(prompt, lang);
    
    try {
        const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
        await roomRef.update({ 'settings.currentPoll.responses': {} });
        this.addActivity(`üîÑ Response repository reset for next round.`);
    } catch (error) {
        console.error("Error resetting poll responses:", error);
    }
}
```

### 11.2 End-of-Lesson Reporting
```javascript
// Generate comprehensive lesson summary
async generateLessonSummary() {
    try {
        const historySnapshot = await this.sdk.db.collection('rooms')
            .doc(this.sdk.getRoomCode())
            .collection('questionHistory')
            .orderBy('createdAt')
            .get();
        
        let fullLessonData = [];
        historySnapshot.forEach(doc => {
            fullLessonData.push(doc.data());
        });
        
        const summaryPrompt = this.buildLessonSummaryPrompt(fullLessonData);
        await this.sdk.sendAIMessage(summaryPrompt, 'en');
        
        this.addActivity('‚úÖ Comprehensive lesson summary generated');
    } catch (error) {
        console.error('üî• Error creating summary report:', error);
    }
}

buildLessonSummaryPrompt(lessonData) {
    let prompt = `Comprehensive Lesson Summary Report\n\n`;
    prompt += `Number of questions asked: ${lessonData.length}\n\n`;
    
    lessonData.forEach((question, index) => {
        prompt += `Question ${index + 1}: ${question.question || 'Untitled question'}\n`;
        prompt += `Student responses:\n`;
        Object.entries(question.responses || {}).forEach(([student, answers]) => {
            if (Array.isArray(answers)) {
                prompt += `  ${student}: ${answers.join(' ‚Üí ')}\n`;
            } else {
                prompt += `  ${student}: ${answers}\n`;
            }
        });
        prompt += `\n`;
    });
    
    prompt += `Please summarize:\n`;
    prompt += `1. Overall class progress\n`;
    prompt += `2. Students who showed significant improvement\n`;
    prompt += `3. Students who need additional attention\n`;
    prompt += `4. Topics that remain unclear\n`;
    prompt += `5. Recommendations for next lesson\n`;
    
    return prompt;
}
```

### 11.3 Private Messaging System
```javascript
// Teacher sends private message to specific student
async sendPrivateMessage() {
    const modal = document.getElementById('privateMessageModal');
    const content = document.getElementById('privateMessageText').value.trim();
    const studentUid = modal.dataset.studentUid; // This is the session-based studentId
    
    if (!content || !studentUid) return;
    
    try {
        await this.sdk.sendPrivateMessage(content, studentUid);
        this.addActivity(`‚úâÔ∏è Private message sent to ${document.getElementById('privateMessageRecipient').textContent}`);
        modal.classList.remove('visible');
    } catch (error) {
        console.error("üî• Error sending private message:", error);
    }
}

// SDK handles private message sending
async sendPrivateMessage(content, recipientUid) {
    const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                     .collection('messages');
    await messagesCollection.add({
        sender: this.playerName,
        sender_uid: this.auth.currentUser?.uid || this.studentId,
        recipient_uid: recipientUid, // Session-based student ID
        content: content,
        timestamp: firebase.firestore.FieldValue.serverTimestamp(),
        is_teacher: this.isTeacher,
        is_private: true
    });
}
```

### 11.4 Floating UI Components (Student)
```javascript
// Create draggable chat interface for students
createChatInterface() {
    if (this.isTeacher) return; // Only for students
    
    // Create floating chat button
    this.chatButton = document.createElement('button');
    this.chatButton.id = 'classroom-chat-btn';
    this.chatButton.innerHTML = 'üí¨';
    this.chatButton.style.cssText = 'position: fixed; bottom: 20px; right: 20px; width: 60px; height: 60px; border-radius: 50%; background: #007bff; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 1000;';
    this.chatButton.onclick = () => this.toggleChat();
    this.makeDraggable(this.chatButton);
    document.body.appendChild(this.chatButton);

    // Create chat container
    this.chatContainer = document.createElement('div');
    this.chatContainer.id = 'classroom-chat-container';
    this.chatContainer.style.cssText = 'position: fixed; bottom: 100px; right: 20px; width: 350px; height: 400px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;';
    
    // Chat header with drag functionality
    const chatHeader = document.createElement('div');
    chatHeader.style.cssText = 'background: #007bff; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
    chatHeader.innerHTML = `
        <span>üí¨ Class Chat</span>
        <button id="chat-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer;">‚àí</button>
    `;
    
    this.makeDraggable(this.chatContainer, chatHeader);
    // ... rest of chat interface setup
}

// Make UI elements draggable
makeDraggable(element, dragHandle = null) {
    const handle = dragHandle || element;
    handle.addEventListener('mousedown', (e) => {
        e.preventDefault();
        let startX = e.clientX - element.offsetLeft;
        let startY = e.clientY - element.offsetTop;
        
        const handleMouseMove = (me) => {
            element.style.left = (me.clientX - startX) + 'px';
            element.style.top = (me.clientY - startY) + 'px';
        };
        
        const handleMouseUp = () => {
            document.removeEventListener('mousemove', handleMouseMove);
            document.removeEventListener('mouseup', handleMouseUp);
        };
        
        document.addEventListener('mousemove', handleMouseMove);
        document.addEventListener('mouseup', handleMouseUp);
    });
}
```

---

## 12. Code Quality and Error Handling

### 12.1 Message Deduplication
```javascript
// Prevent duplicate message display
addSingleMessage(message) {
    // Create unique message ID for deduplication
    const messageId = message.timestamp?.seconds + '_' + message.sender_uid + '_' + message.content.substring(0, 20);
    const existingMessage = messagesArea.querySelector(`[data-message-id="${messageId}"]`);
    if (existingMessage) {
        console.log('‚ö†Ô∏è Duplicate message prevented:', message.content.substring(0, 30));
        return;
    }

    // Create message element with unique identifier
    const messageDiv = document.createElement('div');
    messageDiv.setAttribute('data-message-id', messageId);
    // ... rest of message creation
}
```

### 12.2 Room Validation
```javascript
// Validate room exists before joining (Student)
async checkRoomExists(roomCode) {
    const roomRef = this.db.collection('rooms').doc(roomCode);
    const doc = await roomRef.get();
    return doc.exists;
}

// Enhanced error handling in student login
handleLogin: async function(event) {
    event.preventDefault();
    const loginButton = event.target.querySelector('button');
    
    loginButton.textContent = 'Joining...';
    loginButton.disabled = true;

    try {
        this.classroom = new ClassroomSDK();
        const studentId = this.getOrCreateStudentId();
        await this.classroom.init('student-app', studentId, playerName, roomCode);
        
        // Success - switch to main interface
        document.getElementById('login-container').style.display = 'none';
        document.getElementById('main-container').style.display = 'block';
        
    } catch (error) {
        // Clear error feedback and restore button
        alert(`Failed to join the room: ${error.message}\nPlease check the room code and try again.`);
        loginButton.textContent = 'Join Lesson';
        loginButton.disabled = false;
    }
}
```

### 12.3 Configuration Fallbacks
```javascript
// Robust config loading with fallbacks
async loadConfigData() {
    try {
        const response = await fetch('config.json');
        if (!response.ok) throw new Error('Network response was not ok');
        this.config = await response.json();
        this.debugLog('‚úÖ Config file loaded successfully', this.config);
    } catch (error) {
        console.error('üî• Error loading config file:', error);
        // Fallback configuration
        this.config = { 
            studentAppUrl: 'student-app.html', 
            games: [] 
        };
    }
}
```

---

## 13. Technologies and Dependencies

### 13.1 Frontend Stack
- **HTML5 + CSS3** - Responsive interface with LTR English layout
- **Vanilla JavaScript ES6+** - No external frameworks, modern JS features
- **Firebase SDK v9 (compat)** - Real-time database and authentication
- **CSS Grid + Flexbox** - Advanced responsive layouts

### 13.2 Backend Services
- **Firebase Firestore** - Real-time NoSQL database with offline support
- **Firebase Cloud Functions** - AI services (`askAI`, `askChatGPT`) in europe-west1
- **Firebase Anonymous Auth** - Teacher authentication only
- **Firebase Hosting** - Static file serving with CDN

### 13.3 External Integrations
- **QR Code API** - `https://api.qrserver.com/v1/create-qr-code/`
- **Multiple AI Providers** - ChatGPT, Claude, Gemini via Cloud Functions
- **Educational Content** - Any web-based content via iframe embedding

---

## 14. Development and Deployment

### 14.1 Build Process
```python
# build.py - Production minification
SOURCE_DIR = 'public'
BUILD_DIR = 'BUILD'

def main():
    # Clean and setup
    if os.path.exists(BUILD_DIR):
        shutil.rmtree(BUILD_DIR)
    os.makedirs(BUILD_DIR, exist_ok=True)
    
    # Process files
    for root, _, files in os.walk(SOURCE_DIR):
        for filename in files:
            if filename.endswith('.js'):
                # Minify JavaScript with Terser
                run_command([TERSER_CMD, source_path, '-o', dest_path, '-c', '-m'])
            elif filename.endswith(('.css', '.html')):
                # Minify CSS and HTML with Minify
                # ... minification process
            else:
                # Copy other files as-is
                shutil.copy2(source_path, dest_path)
```

### 14.2 File Collection for Development
```powershell
# collect2txt.ps1 - Collect all project files for analysis
$filesToCollect = @(
    "public/index.html",
    "public/student-app.html",
    "public/firebase-config.js",
    "public/config.json",
    "public/js/teacher-dashboard.js",
    "public/js/student-app.js", 
    "public/js/ClassroomSDK.js",
    "public/css/teacher-dashboard.css",
    "public/css/student-app.css"
)

# Creates single text file with all project code
foreach ($file in $filesToCollect) {
    if (Test-Path $file) {
        $content = Get-Content -Path $file -Raw -Encoding UTF8
        Add-Content -Path $outputFile -Value $content -Encoding UTF8
    }
}
```

---

## 15. Summary and Key Insights

### 15.1 Core Architecture Principles
1. **Session-Based Student Auth** - No Firebase authentication required for students
2. **Real-Time State Synchronization** - Centralized state management via Firestore
3. **Content Agnostic** - Any web content can be classroom-enabled via iframe
4. **Teacher-Centric Control** - All administrative functions require teacher authentication
5. **Progressive Enhancement** - Works without AI, enhanced with AI when available

### 15.2 Security Model
- **Teacher**: Firebase Anonymous Auth with stable UID
- **Student**: Browser sessionStorage with temporary IDs
- **Data**: Ephemeral rooms with automated cleanup
- **Privacy**: Client-side message filtering for private communications

### 15.3 Real-World Deployment
The system is deployed at `https://class-board-ad64e.web.app/` with:
- Static hosting via Firebase Hosting
- Real-time database via Firestore (europe-west1)
- Cloud Functions for AI services
- QR code generation for easy student access

### 15.4 Unique Value Proposition
fireClass Control doesn't replace existing educational content‚Äîit enhances any web-based content with classroom infrastructure. Teachers can use PhET simulations, Google's Teachable Machine, or any educational website, and instantly gain:
- Real-time student monitoring
- Interactive polling and feedback
- AI-powered analysis and insights
- Private messaging and communication tools
- Comprehensive lesson analytics

The platform bridges the gap between "great online content" and "classroom-ready tools" without requiring content creators to modify their applications.

---

**This documentation reflects the actual codebase implementation as of July 2025, ensuring complete alignment between specification and working code.**

================================================================================
File 14/34: C:\Users\Meir Livneh\Documents\fireClass\fireClass_complete_project.py
================================================================================

import os
import datetime

# ==============================================================================
#  Python Concatenation Script for fireClass Project
#
#  This script creates a single text file containing all project files
#  for easy sharing and review. Based on the build.py structure but
#  focused on concatenation instead of minification.
# ==============================================================================

# --- Configuration ---
SOURCE_DIR = 'public'
OUTPUT_FILE = 'fireClass_complete_project.txt'

# File extensions to include (add more as needed)
INCLUDE_EXTENSIONS = {'.html', '.js', '.css', '.json', '.xml', '.txt', '.md'}

# Files/directories to exclude
EXCLUDE_PATTERNS = {
    'node_modules',
    '.git',
    'BUILD',
    '.DS_Store',
    'Thumbs.db',
    '__pycache__',
    '.pyc'
}

def should_include_file(filepath, filename):
    """Determines if a file should be included in the concatenation."""
    # Check if file extension is in our include list
    _, ext = os.path.splitext(filename)
    if ext.lower() not in INCLUDE_EXTENSIONS:
        return False
    
    # Check if any exclude pattern is in the file path
    for pattern in EXCLUDE_PATTERNS:
        if pattern in filepath:
            return False
    
    return True

def read_file_safely(filepath):
    """Reads a file safely, handling encoding issues."""
    encodings = ['utf-8', 'utf-8-sig', 'cp1252', 'latin1']
    
    for encoding in encodings:
        try:
            with open(filepath, 'r', encoding=encoding) as file:
                return file.read()
        except UnicodeDecodeError:
            continue
        except Exception as e:
            return f"Error reading file: {str(e)}"
    
    return "Could not read file with any supported encoding"

def main():
    """Main function to concatenate all project files."""
    print(f"--- Starting fireClass project concatenation ---")
    print(f"Source directory: {SOURCE_DIR}")
    print(f"Output file: {OUTPUT_FILE}")

    # Check if source directory exists
    if not os.path.exists(SOURCE_DIR):
        print(f"ERROR: Source directory '{SOURCE_DIR}' does not exist!")
        return

    # Create/overwrite output file
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as output:
        # Write header
        header = f"""=================================================================
FireClass System - Complete Project Files
Created: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Source Directory: {SOURCE_DIR}
=================================================================

"""
        output.write(header)

        files_processed = 0
        files_skipped = 0

        # Walk through all files in the source directory
        for root, dirs, files in os.walk(SOURCE_DIR):
            # Remove excluded directories from the walk
            dirs[:] = [d for d in dirs if d not in EXCLUDE_PATTERNS]
            
            for filename in files:
                filepath = os.path.join(root, filename)
                
                if should_include_file(filepath, filename):
                    print(f"Processing: {filepath}")
                    
                    # Calculate relative path for cleaner display
                    relative_path = os.path.relpath(filepath, SOURCE_DIR)
                    
                    # Write file separator
                    separator = f"""
=================================================================
FILE: {relative_path}
FULL PATH: {filepath}
=================================================================

"""
                    output.write(separator)
                    
                    # Read and write file content
                    content = read_file_safely(filepath)
                    output.write(content)
                    
                    # Add spacing between files
                    output.write("\n\n")
                    
                    files_processed += 1
                else:
                    files_skipped += 1
                    print(f"Skipped: {filepath}")

        # Write footer
        footer = f"""
=================================================================
END OF PROJECT FILES
Total files processed: {files_processed}
Total files skipped: {files_skipped}
Generated: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
=================================================================
"""
        output.write(footer)

    # Final summary
    print("\n" + "="*50)
    print(f"‚úÖ Concatenation complete!")
    print(f"üìÅ Files processed: {files_processed}")
    print(f"‚è≠Ô∏è  Files skipped: {files_skipped}")
    print(f"üìÑ Output file: {OUTPUT_FILE}")
    
    # Show file size
    if os.path.exists(OUTPUT_FILE):
        size = os.path.getsize(OUTPUT_FILE)
        print(f"üìä File size: {size:,} bytes ({size/1024:.1f} KB)")
    
    print("="*50)

if __name__ == "__main__":
    main()


================================================================================
File 15/34: C:\Users\Meir Livneh\Documents\fireClass\fireClass_complete_project.txt
================================================================================

=================================================================
FireClass System - Complete Project Files
Created: 2025-07-10 21:13:30
Source Directory: public
=================================================================


=================================================================
FILE: config.json
FULL PATH: public\config.json
=================================================================

{
  "studentAppUrl": "https://class-board-ad64e.web.app/student-app.html",
  "games": [
    {
      "name": "AI Model Training",
      "description": "Visual Recognition training",
      "icon": "üìö",
      "url": "https://meir.world/face-recognition/"
    },
    {
      "name": "TM",
      "description": "Goggle Teachable Machines",
      "icon": "üéØ",
      "url": "https://teachablemachine.withgoogle.com/train"
    },
    {
      "name": "PhET",
      "description": "Projectile Data Lab",
      "icon": "üéØ",
      "url": "https://phet.colorado.edu/sims/html/projectile-data-lab/latest/projectile-data-lab_all.html"
    },
    {
      "name": "Kahoot",
      "description": "Interactive quiz game",
      "icon": "üéØ",
      "url": "https://kahoot.it"
    },
    {
      "name": "Wordwall",
      "description": "Word games and creation",
      "icon": "üé≤",
      "url": "https://wordwall.net"
    },
    {
      "name": "Scratch",
      "description": "Programming and creation",
      "icon": "üê±",
      "url": "https://scratch.mit.edu"
    }
  ]
}



=================================================================
FILE: firebase-config.js
FULL PATH: public\firebase-config.js
=================================================================

var firebaseConfig = {
  apiKey: "AIzaSyAyi3h3OZasXI123uA7X6YAbwPFgopgl_w",
  authDomain: "fireclass-us.firebaseapp.com",
  projectId: "fireclass-us",
  storageBucket: "fireclass-us.appspot.com",
  messagingSenderId: "600159423729",
  appId: "1:600159423729:web:0d65fb1b01a67a127fed50",
  measurementId: "G-Y7GYKR7LQD"
};


=================================================================
FILE: index.html
FULL PATH: public\index.html
=================================================================

<!DOCTYPE html>
<!--
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
-->
<html lang="en" dir="ltr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher Dashboard - ClassroomSDK</title>
    <!-- CSS Link -->
    <link rel="stylesheet" href="css/teacher-dashboard.css">
</head>
<body>
    <div id="loading-overlay">
        <div class="spinner"></div>
    </div>
    <!-- Header with Professional Navigation -->
    <header class="header">
        <div class="nav-container">
            <div class="logo">
                <span class="logo-icon">‚öôÔ∏è</span>
                <span class="logo-text">fireClass Control</span>
            </div>
            
            <div id="header-room-display" class="header-room-display">
                <span class="room-code-label">Room Code:</span>
                <span id="header-room-code" class="room-code-value">...</span>
                <img id="qr-code-image" class="qr-code" alt="QR Code for Classroom" title="Click to copy student link"/>
            </div>
            
            <nav>
                <ul class="nav-menu">
                    <!-- Quick Actions -->
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <span class="nav-icon">‚ö°</span>
                            <span>Quick Actions</span>
                        </a>
                        <div class="dropdown">
                            <div class="dropdown-header">Quick actions for lesson management</div>
                            <a href="#" class="dropdown-item success-item" onclick="sendQuickMessage('Let\'s start the lesson!')">
                                <span class="dropdown-icon">üéì</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Start Lesson</div>
                                    <div class="dropdown-desc">Send message to all students</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item warning-item" onclick="sendQuickMessage('Time for a break! Come back in 5 minutes.')">
                                <span class="dropdown-icon">‚òï</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Break Time</div>
                                    <div class="dropdown-desc">Announce break time</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item" onclick="sendQuickMessage('The lesson has ended. Well done everyone!')">
                                <span class="dropdown-icon">‚úÖ</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">End Lesson</div>
                                    <div class="dropdown-desc">Finish the lesson</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item danger-item" onclick="resetClassroomData()">
                                <span class="dropdown-icon">üîÑ</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">New Lesson</div>
                                    <div class="dropdown-desc">Clear all lesson data</div>
                                </div>
                            </a>
                        </div>
                    </li>

                    <!-- Games and Content -->
                    <li class="nav-item">
                        <a href="#" class="nav-link" onclick="window.teacherDashboard.openContentModal()">
                            <span class="nav-icon">üéÆ</span>
                            <span>Games & Content</span>
                        </a>
                    </li>

                    <!-- AI Management -->
                    <li class="nav-item">
                        <a href="#" class="nav-link" id="aiMenuLink">
                            <span class="nav-icon">ü§ñ</span>
                            <span>AI Management</span>
                        </a>
                        <div class="dropdown">
                            <div class="dropdown-header">AI Assistant settings for students</div>
                            
                            <a href="#" class="dropdown-item" id="toggleAI" onclick="console.log('üü¢ TRACE: AI button clicked'); window.teacherDashboard.toggleAIForClass()">
                                <span class="dropdown-icon" id="aiStatusIcon">üî¥</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title" id="aiStatusText">AI disabled for students</div>
                                    <div class="dropdown-desc">Click to enable</div>
                                </div>
                            </a>
                            
                            <div style="padding: 10px 20px; border-top: 1px solid #f0f2f5; background: #f8f9fa;">
                                <strong style="font-size: 14px; color: #555;">üéØ Select model for class:</strong>
                                <div style="font-size: 12px; color: #777; margin-top: 2px;">Current model: <span class="current-ai-model">ChatGPT</span></div>
                            </div>
                            
                            <a href="#" class="dropdown-item ai-model-btn" data-model="chatgpt" onclick="window.teacherDashboard.switchAIModel('chatgpt')">
                                <span class="dropdown-icon">ü§ñ</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">ChatGPT</div>
                                    <div class="dropdown-desc">Advanced model from OpenAI</div>
                                </div>
                            </a>
                            
                            <a href="#" class="dropdown-item ai-model-btn" data-model="claude" onclick="window.teacherDashboard.switchAIModel('claude')">
                                <span class="dropdown-icon">üß†</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Claude</div>
                                    <div class="dropdown-desc">Smart model from Anthropic</div>
                                </div>
                            </a>
                            
                            <a href="#" class="dropdown-item ai-model-btn" data-model="gemini" onclick="window.teacherDashboard.switchAIModel('gemini')">
                                <span class="dropdown-icon">‚ú®</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Gemini</div>
                                    <div class="dropdown-desc">Google's model</div>
                                </div>
                            </a>
                        </div>
                    </li>

                    <!-- Tools -->
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <span class="nav-icon">üîß</span>
                            <span>Tools</span>
                        </a>
                        <div class="dropdown">
                            <div class="dropdown-header">Utilities and debugging tools</div>
                            <a href="#" class="dropdown-item" onclick="toggleDebug()">
                                <span class="dropdown-icon">üêõ</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Debug Console</div>
                                    <div class="dropdown-desc">Show technical information</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item" onclick="exportData()">
                                <span class="dropdown-icon">üìä</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Export Data</div>
                                    <div class="dropdown-desc">Save student list and messages</div>
                                </div>
                            </a>
                        </div>
                    </li>

                    <!-- Polls -->
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <span class="nav-icon">üìä</span>
                            <span>Polls</span>
                        </a>
                        <div class="dropdown">
                            <a href="#" class="dropdown-item" onclick="window.teacherDashboard.openPollCreationModal()">
                                <span class="dropdown-icon">‚ûï</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Start New Poll</div>
                                    <div class="dropdown-desc">Send quick question to class</div>
                                </div>
                            </a>
                        </div>
                    </li>

                    <!-- Reports -->
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <span class="nav-icon">üìä</span>
                            <span>Reports</span>
                        </a>
                        <div class="dropdown">
                            <div class="dropdown-header">Reports and analytics (FFU)</div>
                            <a href="#" class="dropdown-item" onclick="generateLessonSummary()">
                                <span class="dropdown-icon">üìã</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Lesson Summary</div>  
                                    <div class="dropdown-desc">Comprehensive AI report of entire lesson</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item" onclick="exportLessonData()">
                                <span class="dropdown-icon">üíæ</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Export Lesson Data</div>
                                    <div class="dropdown-desc">Save all data to file</div>
                                </div>
                            </a>
                        </div>
                    </li>
                </ul>
            </nav>

            <!-- Add this button right after the <nav> element -->
            <button id="resetScreensBtn" title="Stop current activity and clear all student screens" style="background: #e74c3c; color: white; border: none; padding: 8px 16px; border-radius: 20px; font-weight: 500; cursor: pointer; display: flex; align-items: center; gap: 8px;">
                <span style="font-size: 18px;">‚èπÔ∏è</span>
                <span>Clear Screens</span>
            </button>

            <div class="status-indicator" id="connectionStatus">
                <div class="status-dot"></div>
                <span>Connecting...</span>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Students Section -->
        <div class="section">
            <h2>üë• Connected Students (<span id="studentsCount">0</span>)</h2>
            <div id="studentsList" class="students-list">
                <div class="no-students">No students connected yet</div>
            </div>
        </div>

        <!-- Chat Section -->
        <div class="section">
            <h2>üí¨ Communication with Students</h2>
            <div id="messagesArea" class="chat-messages">
                <div class="no-messages">No messages yet</div>
            </div>
            <form id="chat-form" style="display: flex; gap: 10px;">
                <input type="text" id="chat-input" placeholder="Type a message to all students..." required style="flex-grow: 1;">
                <button type="submit">Send</button>
            </form>
        </div>

        <!-- Poll Section -->
        <div class="section" id="poll-section" style="display:none;">
            <h2>üìä Real-time Poll Results</h2>
            <div id="poll-results-container"></div>
            <button id="stop-poll-btn" style="background: #e74c3c; color: white; padding: 10px 20px; border: none; border-radius: 6px; cursor: pointer; margin-top: 20px;">End poll and hide results</button>
        </div>

        <!-- Activity Section -->
        <div class="section">
            <h2>üìä Recent Activity</h2>
            <div id="activitiesArea" class="activity-log">
                <div class="no-activity">No activity yet</div>
            </div>
        </div>
    </div>

    <!-- Templates -->
    <template id="studentTemplate">
        <div class="student-item">
            <div class="student-info">
                <span class="student-name"></span>
                <div class="student-actions"></div>
            </div>
        </div>
    </template>

    <!-- Private Message Modal -->
    <div id="privateMessageModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>‚úâÔ∏è Private Message</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body">
                <p>Sending private message to: <span id="privateMessageRecipient"></span></p>
                <textarea id="privateMessageText" placeholder="Write your private message..." rows="4"></textarea>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Cancel</button>
                <button onclick="sendPrivateMessage()" class="primary">Send Message</button>
            </div>
        </div>
    </div>

    <!-- Message Modal -->
    <div id="messageModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>üí¨ Send Message to Class</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body">
                <form id="messageForm">
                    <textarea id="messageText" placeholder="Write a message to all students..." rows="4" required></textarea>
                </form>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Cancel</button>
                <button type="submit" form="messageForm" class="primary">Send Message</button>
            </div>
        </div>
    </div>

    <!-- Custom Content Modal -->
    <div id="customContentModal" class="modal-overlay">
        <div class="modal-content" style="max-width: 600px;">
            <div class="modal-header">
                <h3>üì§ Send Game or Content to Students</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body" style="padding: 0;">
                <div id="game-list-container" style="padding: 20px; max-height: 300px; overflow-y: auto; border-bottom: 1px solid #eee;">
                </div>
                <div id="custom-url-section" style="padding: 20px; background: #f9f9f9;">
                    <p style="margin: 0 0 10px 0; font-weight: 500;">Or send custom link:</p>
                    <form id="customUrlForm" style="display: flex; gap: 10px;">
                        <input type="url" id="customUrlInput" placeholder="Enter full URL..." required style="flex-grow: 1; padding: 10px; border: 1px solid #ccc; border-radius: 6px;">
                        <button type="submit" class="primary" style="white-space: nowrap;">Send Link</button>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                 <a href="#" class="danger-item" onclick="window.teacherDashboard.sendCommand('LOAD_CONTENT', { url: 'about:blank' })" style="margin-right: auto; text-decoration:none; padding: 8px 12px; border-radius: 6px;">
                    ‚èπÔ∏è Stop content and clear screens
                </a>
                <button class="modal-close">Close</button>
            </div>
        </div>
    </div>

    <!-- Poll Creation Modal -->
    <div id="poll-creation-modal" class="modal-overlay">
        <div class="modal-content" style="max-width: 400px;">
            <div class="modal-header">
                <h3>Select Poll Type</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body" style="display: flex; flex-direction: column; gap: 15px;">
                <button class="poll-type-btn" data-type="yes_no">Yes / No Poll</button>
                <button class="poll-type-btn" data-type="multiple_choice">Multiple Choice Poll (1-4)</button>
                <button class="poll-type-btn" data-type="open_text">Open Question (Free text)</button>
            </div>
        </div>
    </div>

    <!-- Open Question Modal -->
    <div id="open-question-modal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Open Question Responses</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div id="open-question-results" class="modal-body" style="max-height: 400px; overflow-y: auto;"></div>
            <div class="modal-footer" style="display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; gap: 10px;">
                    <button id="ai-summarize-btn">Summarize with AI</button>
                    <button id="ai-keywords-btn">Extract Keywords</button>
                </div>
                <button id="close-open-question-btn" class="danger-item" style="padding: 8px 16px; border-radius: 6px; border: none; cursor: pointer;">
                    ‚èπÔ∏è End Poll
                </button>
            </div>
        </div>
    </div>

    <!-- End Lesson Modal -->
    <div id="end-lesson-modal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>üéì End of Lesson</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body">
                <p>The lesson has ended! Choose which report you'd like to generate:</p>
                <div style="display: flex; flex-direction: column; gap: 10px; margin-top: 15px;">
                    <button class="poll-type-btn" onclick="generateLessonSummary()">
                        üìã Comprehensive Summary Report
                    </button>
                    <button class="poll-type-btn" onclick="exportLessonData()">
                        üíæ Export Lesson Data
                    </button>
                    <button class="poll-type-btn" onclick="generateStudentProgress()">
                        üë• Student Progress Report
                    </button>
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Close</button>
            </div>
        </div>
    </div>

<!-- Scripts -->
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-functions-compat.js"></script>
    <script src="firebase-config.js"></script>

    <!-- ◊ò◊¢◊ü ◊ê◊™ ClassroomSDK ◊ú◊§◊†◊ô teacher-dashboard -->
    <script src="js/ClassroomSDK.js"></script>
    <script src="js/teacher-dashboard.js"></script>

    <script>
        console.log('üü¢ TRACE: index.html loaded');
        
        // ◊ï◊ï◊ì◊ê ◊©Firebase ◊û◊ê◊ï◊™◊ó◊ú
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();
        const auth = firebase.auth();
        const functions = firebase.functions();
        
        console.log('üîç Firebase initialized');
        console.log('üîç ClassroomSDK available:', typeof ClassroomSDK);
        
        window.addEventListener('load', () => {
            console.log('üü¢ TRACE: Window loaded, initializing teacher dashboard');
            window.teacherDashboard = new TeacherDashboard();
            window.teacherDashboard.init().then(() => {
                console.log('‚úÖ Teacher dashboard fully initialized');
            }).catch(error => {
                console.error('‚ùå Teacher dashboard initialization failed:', error);
            });
        });
        
        // ◊§◊ï◊†◊ß◊¶◊ô◊ï◊™ ◊í◊ú◊ï◊ë◊ú◊ô◊ï◊™
        function sendQuickMessage(message) {
            console.log('üü¢ TRACE: sendQuickMessage called');
            if (window.teacherDashboard) {
                window.teacherDashboard.sendMessageToClass(message);
            } else {
                console.error('‚ùå teacherDashboard not available');
            }
        }

        function testAIService() {
            console.log('üü¢ TRACE: testAIService called');
            if (window.teacherDashboard && window.teacherDashboard.testAIService) {
                window.teacherDashboard.testAIService();
            } else {
                console.error('‚ùå testAIService not available');
            }
        }

        function sendPrivateMessage() {
            if (window.teacherDashboard && window.teacherDashboard.sendPrivateMessage) {
                window.teacherDashboard.sendPrivateMessage();
            }
        }

        // ◊ë◊ì◊ô◊ß◊™ debug ◊ú◊û◊¶◊ë ◊î◊û◊¢◊®◊õ◊™
        function debugSystemState() {
            console.log('üîç System Debug:');
            console.log('- window.teacherDashboard:', !!window.teacherDashboard);
            console.log('- teacherDashboard.sdk:', !!window.teacherDashboard?.sdk);
            console.log('- sdk.toggleAI:', !!window.teacherDashboard?.sdk?.toggleAI);
            console.log('- ClassroomSDK:', typeof ClassroomSDK);
            
            if (window.teacherDashboard?.sdk) {
                console.log('- SDK methods:', Object.getOwnPropertyNames(window.teacherDashboard.sdk));
            }
        }
        
        // ◊ß◊®◊ê ◊ú◊ë◊ì◊ô◊ß◊î ◊ê◊ó◊®◊ô 3 ◊©◊†◊ô◊ï◊™
        setTimeout(debugSystemState, 3000);
    </script>
</body>
</html>


=================================================================
FILE: student-app.html
FULL PATH: public\student-app.html
=================================================================

<!DOCTYPE html>
<!--
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
-->
<html lang="en" dir="ltr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Learning Space</title>
    <link rel="stylesheet" href="css/student-app.css">
</head>
<body>
    <div id="login-container" class="container">
        <div class="login-box">
            <h1>‚úèÔ∏è Classroom Learning Space</h1>
            <p>To join the lesson, please enter your name and room code</p>
            <form id="login-form">
                <input type="text" id="player-name" placeholder="Your name" required>
                <div class="input-group">
                    <label for="teacher-uid">üè´ Room Code:</label>
                    <input type="text" id="teacher-uid" placeholder="Enter 4-digit room code" maxlength="4" required>
                </div>
                <button type="submit">Join Lesson</button>
            </form>
        </div>
    </div>

    <main id="main-container" style="display: none;">
        <iframe id="content-frame" src="about:blank" title="Lesson Content"></iframe>
    </main>

    <div id="poll-interface" style="position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); z-index: 1001; background: rgba(30, 30, 50, 0.9); padding: 20px; border-radius: 12px; display: none; gap: 15px; border: 2px solid white; box-shadow: 0 0 20px rgba(0,0,0,0.5);">
    </div>

    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-functions-compat.js"></script>

    <script src="firebase-config.js"></script>

    <script>
      // Initialize the Firebase app using your configuration
      firebase.initializeApp(firebaseConfig);

      // Create global references to the services we will use
      const db = firebase.firestore();
      const auth = firebase.auth();
      const functions = firebase.functions();
    </script>

    <script src="js/ClassroomSDK.js"></script>
    <script src="js/student-app.js"></script>
</body>
</html>


=================================================================
FILE: css\student-app.css
FULL PATH: public\css\student-app.css
=================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */

/* student-app.css - English LTR Version */

body, html {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    background-color: #f0f2f5;
    overflow: hidden;
    direction: ltr; /* Explicit LTR direction */
}

.container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
}

.login-box {
    background: white;
    padding: 40px;
    border-radius: 12px;
    box-shadow: 0 8px 30px rgba(0,0,0,0.12);
    text-align: center;
    width: 90%;
    max-width: 400px;
}

.login-box h1 {
    color: #333;
    margin-bottom: 10px;
}

.login-box p {
    color: #666;
    margin-bottom: 25px;
}

#player-name {
    width: 100%;
    padding: 12px;
    margin-bottom: 20px;
    border: 1px solid #ccc;
    border-radius: 8px;
    font-size: 16px;
    box-sizing: border-box;
    text-align: left; /* Explicit LTR alignment */
    direction: ltr;
}

.input-group {
    margin-bottom: 20px;
    text-align: left; /* Align labels to the left for LTR */
}

.input-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: #555;
}

#teacher-uid {
    width: 100%;
    padding: 12px;
    border: 1px solid #ccc;
    border-radius: 8px;
    font-size: 16px;
    box-sizing: border-box;
    text-align: left; /* Explicit LTR alignment */
    direction: ltr;
}

.login-box button {
    width: 100%;
    padding: 12px;
    border: none;
    background-color: #007bff;
    color: white;
    border-radius: 8px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s;
}

.login-box button:hover {
    background-color: #0056b3;
}

#main-container {
    width: 100%;
    height: 100%;
}

#content-frame {
    width: 100%;
    height: 100%;
    border: none;
}

/* Message and Poll Animations */
.new-message-indicator {
    animation: pulse 1.5s infinite;
}

@keyframes pulse {
    0% {
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.7);
    }
    70% {
        transform: scale(1.1);
        box-shadow: 0 0 10px 20px rgba(0, 123, 255, 0);
    }
    100% {
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0);
    }
}

/* Shake animation for notifications */
@keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-2px); }
    75% { transform: translateX(2px); }
}

.new-message-shake {
    animation: shake 0.5s ease-in-out 3;
}

/* Bounce animation for message badges */
@keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-10px); }
    60% { transform: translateY(-5px); }
}

.message-badge {
    position: absolute !important;
    top: -5px !important;
    right: -5px !important;
    background: #dc3545 !important;
    color: white !important;
    border-radius: 50% !important;
    width: 20px !important;
    height: 20px !important;
    font-size: 12px !important;
    font-weight: bold !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    animation: bounce 0.5s ease !important;
    z-index: 1001 !important;
}

/* Poll Interface Styles */
#poll-interface {
    display: flex;
    gap: 15px;
    align-items: center;
    justify-content: center;
    text-align: center;
    direction: ltr;
}

#poll-interface button {
    transition: all 0.3s ease;
    font-family: inherit;
}

#poll-interface button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

#poll-interface button:active {
    transform: translateY(0);
}

#poll-interface button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
}

#poll-interface textarea {
    text-align: left; /* LTR text input */
    direction: ltr;
}

/* Blinking animation for chat notifications */
.blinking {
    animation: blink-animation 0.5s infinite alternate;
}

@keyframes blink-animation {
    from {
        transform: scale(1);
        box-shadow: 0 0 10px #fff;
    }
    to {
        transform: scale(1.1);
        box-shadow: 0 0 20px #ffeb3b, 0 0 30px #ffeb3b;
    }
}

/* High Z-index for floating elements */
#classroom-ai-container {
    z-index: 10002 !important;
}

#classroom-chat-btn {
    z-index: 10000 !important;
}

#classroom-chat-container {
    z-index: 10001 !important;
}

/* Auto Chat Opening Animation - updated for LTR */
@keyframes chatSlideIn {
    from {
        transform: translateX(100%); /* Slide in from right for LTR */
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

/* Special visual effect for auto-opened chat */
.chat-auto-opened {
    border: 2px solid #007bff !important;
    box-shadow: 0 0 20px rgba(0, 123, 255, 0.5) !important;
}

/* Button pulse animation */
@keyframes chatButtonPulse {
    0% {
        transform: scale(1);
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }
    50% {
        transform: scale(1.1);
        box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
    }
    100% {
        transform: scale(1);
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }
}

.chat-button-pulse {
    animation: chatButtonPulse 0.6s ease-in-out;
}

/* Responsive adjustments for mobile */
@media (max-width: 768px) {
    .login-box {
        padding: 30px;
        margin: 20px;
    }
    
    #poll-interface {
        flex-direction: column;
        gap: 10px;
        padding: 15px;
    }
    
    #poll-interface button {
        width: 100%;
        max-width: 200px;
    }
}

/* Success notification styles */
.success-notification {
    background: #28a745;
    color: white;
    padding: 10px 15px;
    border-radius: 6px;
    margin: 10px 0;
    text-align: center;
    animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}


=================================================================
FILE: css\teacher-dashboard.css
FULL PATH: public\css\teacher-dashboard.css
=================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */

/* teacher-dashboard.css - English LTR Version */

/* Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    color: #333;
}

/* Header & Navigation */
.header {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    box-shadow: 0 2px 20px rgba(0,0,0,0.1);
    position: sticky;
    top: 0;
    z-index: 1000;
}

.nav-container {
    max-width: 1400px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 20px;
    height: 70px;
}

.logo {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 24px;
    font-weight: bold;
    color: #2c3e50;
}

.nav-menu {
    display: flex;
    list-style: none;
    gap: 0;
}

.nav-item {
    position: relative;
}

.nav-link {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 15px 20px;
    text-decoration: none;
    color: #555;
    font-weight: 500;
    transition: all 0.3s ease;
    border-radius: 8px;
    margin: 0 2px;
}

.nav-link:hover {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    transform: translateY(-2px);
}

.nav-icon {
    font-size: 18px;
}

/* Dropdown Menu */
.dropdown {
    position: absolute;
    top: 100%;
    left: 0; /* Changed from right: 0 for LTR */
    background: white;
    min-width: 280px;
    border-radius: 12px;
    box-shadow: 0 10px 40px rgba(0,0,0,0.15);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    border: 1px solid #e1e5e9;
    overflow: hidden;
}

.nav-item:hover .dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
}

.dropdown-header {
    padding: 15px 20px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-bottom: 1px solid #dee2e6;
    font-weight: bold;
    color: #495057;
    font-size: 14px;
}

.dropdown-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 20px;
    text-decoration: none;
    color: #555;
    transition: all 0.2s ease;
    border-bottom: 1px solid #f8f9fa;
}

.dropdown-item:hover {
    background: #f8f9fa;
    color: #007bff;
    padding-left: 25px; /* Changed from padding-right for LTR */
}

.dropdown-item:last-child {
    border-bottom: none;
}

.dropdown-icon {
    font-size: 16px;
    width: 20px;
    text-align: center;
}

.dropdown-content {
    flex: 1;
}

.dropdown-title {
    font-weight: 600;
    margin-bottom: 2px;
}

.dropdown-desc {
    font-size: 12px;
    color: #6c757d;
}

/* Status Indicator */
.status-indicator {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    background: #28a745;
    color: white;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
}

.status-dot {
    width: 8px;
    height: 8px;
    background: white;
    border-radius: 50%;
    animation: pulse 2s infinite;
}

.connected {
    background: #27ae60;
    color: white;
}

.disconnected {
    background: #e74c3c;
    color: white;
}

/* Main Content */
.main-content {
    max-width: 1400px;
    margin: 30px auto;
    padding: 0 20px;
    display: grid;
    grid-template-columns: 1fr 1fr 400px;
    gap: 30px;
}

.section {
    background: white;
    border-radius: 15px;
    padding: 25px;
    box-shadow: 0 5px 25px rgba(0,0,0,0.1);
    backdrop-filter: blur(10px);
}

.section h2 {
    margin-bottom: 20px;
    color: #2c3e50;
    font-size: 20px;
    display: flex;
    align-items: center;
    gap: 10px;
    border-bottom: 2px solid #3498db;
    padding-bottom: 10px;
}

/* Students List */
.students-list {
    max-height: 300px;
    overflow-y: auto;
}

.student-item {
    background: white;
    margin: 10px 0;
    padding: 15px;
    border-radius: 8px;
    border-left: 4px solid #27ae60; /* Changed from border-right for LTR */
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.student-name {
    font-weight: bold;
    font-size: 1.2em;
    color: #2c3e50;
}

.student-status {
    font-size: 0.9em;
    color: #27ae60;
    margin-top: 5px;
}

.no-students {
    text-align: center;
    color: #666;
    font-style: italic;
    padding: 20px;
}

/* Messages Area */
.chat-messages, .messages-area {
    max-height: 400px;
    overflow-y: auto;
    border: 1px solid #ddd;
    border-radius: 8px;
    background: white;
    padding: 15px;
    margin-bottom: 15px;
}

.message-item {
    padding: 15px;
    border-bottom: 1px solid #eee;
    animation: slideInMessage 0.3s ease-out;
    text-align: left; /* Explicit LTR alignment */
    direction: ltr;
}

.message-item:last-child {
    border-bottom: none;
}

.message-sender {
    font-weight: bold;
    color: #3498db;
    margin-bottom: 5px;
}

.message-content {
    color: #555;
    margin-bottom: 5px;
}

.message-time {
    font-size: 0.8em;
    color: #999;
}

.no-messages {
    text-align: center;
    color: #666;
    font-style: italic;
    padding: 20px;
}

/* Chat Input */
.chat-input, .send-message-area {
    background: white;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    margin-top: 15px;
}

.chat-input textarea, .message-input {
    width: 100%;
    padding: 12px;
    border: 2px solid #ddd;
    border-radius: 20px;
    resize: none;
    font-family: inherit;
    font-size: 14px;
    line-height: 1.4;
    transition: all 0.3s ease;
    direction: ltr; /* Changed from rtl */
    text-align: left; /* Changed from right */
    min-height: 60px;
}

.chat-input textarea:focus, .message-input:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 10px rgba(52, 152, 219, 0.2);
}

.chat-input button, .send-button {
    width: 100%;
    margin-top: 10px;
    padding: 12px;
    background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
    color: white;
    border: none;
    border-radius: 20px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 16px;
}

.chat-input button:hover, .send-button:hover {
    background: linear-gradient(135deg, #2980b9 0%, #1f5f8b 100%);
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
}

.chat-input button:active, .send-button:active {
    transform: translateY(0);
}

/* Activity Log */
.activity-log {
    max-height: 300px;
    overflow-y: auto;
    padding: 10px;
}

.activity-item {
    background: white;
    margin: 8px 0;
    padding: 12px;
    border-radius: 6px;
    border-left: 3px solid #e74c3c; /* Changed from border-right for LTR */
    font-size: 0.9em;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    text-align: left; /* Explicit LTR alignment */
    direction: ltr;
}

.activity-time {
    font-size: 0.8em;
    color: #666;
    margin-bottom: 5px;
}

.activity-content {
    color: #333;
}

.no-activity {
    text-align: center;
    color: #666;
    font-style: italic;
    padding: 20px;
}

/* Stats */
.stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 15px;
    margin-bottom: 20px;
}

.stat-card {
    background: white;
    padding: 20px;
    border-radius: 10px;
    text-align: center;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.stat-number {
    font-size: 2em;
    font-weight: bold;
    color: #3498db;
}

.stat-label {
    color: #666;
    margin-top: 5px;
}

/* Special Buttons */
.danger-item:hover {
    background: #fff5f5 !important;
    color: #dc3545 !important;
}

.success-item:hover {
    background: #f0fff4 !important;
    color: #28a745 !important;
}

.warning-item:hover {
    background: #fffbf0 !important;
    color: #ffc107 !important;
}

.tool-button.danger {
    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
    color: white;
    border: 2px solid #c0392b;
}

.tool-button.danger:hover {
    background: linear-gradient(135deg, #c0392b 0%, #a93226 100%);
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
}

.tool-button.danger:active {
    transform: translateY(-1px);
}

.tool-button.danger .tool-icon {
    font-size: 24px;
}

.tool-button.danger .tool-label {
    font-weight: bold;
}

/* Quick Actions */
.quick-actions {
    margin-top: 20px;
}

.action-button {
    display: block;
    width: 100%;
    padding: 10px;
    margin: 8px 0;
    background: #27ae60;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    transition: background 0.3s;
}

.action-button:hover {
    background: #229954;
}

.action-button.secondary {
    background: #95a5a6;
}

.action-button.secondary:hover {
    background: #7f8c8d;
}

/* Debug Console */
.enhanced-debug-console {
    position: fixed;
    bottom: 10px;
    left: 10px;
    width: 500px;
    height: 200px;
    background: #1a1a1a;
    color: #00ff00;
    font-family: 'Courier New', monospace;
    font-size: 11px;
    padding: 10px;
    border-radius: 8px;
    overflow-y: auto;
    z-index: 9999;
    border: 2px solid #333;
    box-shadow: 0 4px 20px rgba(0,0,0,0.5);
    display: none;
    direction: ltr; /* Force LTR for debug console */
    text-align: left;
}

/* Animations */
@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}

@keyframes slideInMessage {
    from {
        transform: translateX(-100%); /* Changed direction for LTR */
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.pulse {
    animation: pulse 2s infinite;
}

/* Scrollbars */
.students-list::-webkit-scrollbar,
.chat-messages::-webkit-scrollbar,
.messages-area::-webkit-scrollbar,
.activity-log::-webkit-scrollbar {
    width: 6px;
}

.students-list::-webkit-scrollbar-track,
.chat-messages::-webkit-scrollbar-track,
.messages-area::-webkit-scrollbar-track,
.activity-log::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
}

.students-list::-webkit-scrollbar-thumb,
.chat-messages::-webkit-scrollbar-thumb,
.messages-area::-webkit-scrollbar-thumb,
.activity-log::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 3px;
}

.students-list::-webkit-scrollbar-thumb:hover,
.chat-messages::-webkit-scrollbar-thumb:hover,
.messages-area::-webkit-scrollbar-thumb:hover,
.activity-log::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

/* Responsive Design */
@media (max-width: 768px) {
    .nav-menu {
        display: none;
    }
    
    .main-content {
        grid-template-columns: 1fr;
        gap: 20px;
        margin: 20px auto;
    }
    
    .dropdown {
        position: fixed;
        top: 70px;
        left: 20px;
        right: 20px;
        min-width: auto;
    }
    
    .section {
        padding: 15px;
    }
    
    .nav-container {
        padding: 0 15px;
    }
}

/* Modal Styles */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9998 !important;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.modal-overlay.visible {
    opacity: 1;
    visibility: visible;
}

.modal-content {
    background: white;
    border-radius: 15px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow: hidden;
    transform: scale(0.9);
    transition: transform 0.3s ease;
}

.modal-overlay.visible .modal-content {
    transform: scale(1);
}

.modal-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-header h3 {
    margin: 0;
    font-size: 18px;
}

.modal-close {
    background: none;
    border: none;
    color: white;
    font-size: 24px;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background 0.2s ease;
}

.modal-close:hover {
    background: rgba(255, 255, 255, 0.2);
}

.modal-body {
    padding: 20px;
    text-align: left; /* Explicit LTR */
    direction: ltr;
}

.modal-body p {
    margin-bottom: 15px;
    color: #666;
    font-size: 14px;
}

.modal-body textarea {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 8px;
    resize: vertical;
    font-family: inherit;
    font-size: 14px;
    outline: none;
    transition: border-color 0.2s ease;
    direction: ltr; /* Explicit LTR */
    text-align: left;
}

.modal-body textarea:focus {
    border-color: #667eea;
}

.modal-footer {
    padding: 20px;
    display: flex;
    gap: 10px;
    justify-content: flex-end;
    border-top: 1px solid #eee;
}

.modal-footer button {
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.2s ease;
}

.modal-footer button:not(.primary) {
    background: #f8f9fa;
    color: #666;
}

.modal-footer button:not(.primary):hover {
    background: #e9ecef;
}

.modal-footer button.primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.modal-footer button.primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
}

/* Private Message Button */
.private-message-btn {
    background: linear-gradient(135deg, #43a047 0%, #388e3c 100%);
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.private-message-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(67, 160, 71, 0.4);
}

/* Student Item Styles */
.student-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    border: 1px solid #eee;
    border-radius: 8px;
    margin-bottom: 8px;
    background: #f8f9fa;
    transition: all 0.2s ease;
}

.student-item:hover {
    background: #e9ecef;
    border-color: #667eea;
}

.student-info {
    display: flex;
    align-items: center;
    gap: 10px;
    flex: 1;
}

.student-name {
    font-weight: 600;
    color: #333;
}

.student-actions {
    display: flex;
    gap: 8px;
}

/* Message Item Styles */
.message-item {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 12px;
    margin-bottom: 8px;
    border-left: 4px solid #667eea; /* Changed from border-right for LTR */
}

.message-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
}

.message-sender {
    font-weight: 600;
    color: #333;
}

.message-time {
    font-size: 12px;
    color: #666;
}

.message-content {
    color: #555;
    line-height: 1.4;
}

/* Room Code Section */
.room-code-section {
    grid-column: 1 / -1;
    margin-bottom: 20px;
}

/* AI Model Button Styles */
.ai-model-btn.active {
    background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%) !important;
    color: white !important;
}

.ai-model-btn.active .dropdown-title,
.ai-model-btn.active .dropdown-desc {
    color: white !important;
}

.current-ai-model {
    font-weight: bold;
    color: #4CAF50;
}

/* Header Room Display */
.header-room-display {
    display: flex;
    align-items: center;
    gap: 12px;
    background-color: rgba(255, 255, 255, 0.1);
    padding: 5px 15px;
    border-radius: 20px;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.room-code-label {
    font-size: 14px;
    font-weight: 500;
    color: #444;
}

.room-code-value {
    font-size: 20px;
    font-weight: bold;
    color: #3f51b5;
    letter-spacing: 2px;
}

.qr-code {
    width: 40px;
    height: 40px;
    border-radius: 4px;
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.qr-code:hover {
    transform: scale(3.5);
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    border: 2px solid white;
}

/* Loading Overlay */
#loading-overlay {
    position: fixed;
    inset: 0;
    background-color: rgba(94, 91, 204, 0.95);
    z-index: 10001;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: opacity 0.5s ease;
}

#loading-overlay.hidden {
    opacity: 0;
    pointer-events: none;
}

.spinner {
    width: 60px;
    height: 60px;
    border: 5px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: #ffffff;
    animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Poll Styles */
.poll-type-btn {
    padding: 15px 20px;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    background: white;
    color: #333;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: center;
}

.poll-type-btn:hover {
    border-color: #42a5f5;
    background: #f0f8ff;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(66, 165, 245, 0.2);
}

.poll-type-btn:active {
    transform: translateY(0);
}

#poll-results-container {
    margin-top: 20px;
}

#poll-results-container > div {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 10px;
    border-left: 4px solid #42a5f5; /* Changed from border-right for LTR */
}

#stop-poll-btn {
    background: #e74c3c;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    margin-top: 20px;
    font-weight: 500;
    transition: all 0.3s ease;
}

#stop-poll-btn:hover {
    background: #c0392b;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(231, 76, 60, 0.3);
}

/* Logo Styles */
.logo-icon {
  font-size: 1.3em;
  margin-right: 8px;
  vertical-align: middle;
}

.logo-text {
  vertical-align: middle;
}

/* High Z-index Elements */
#classroom-ai-btn {
    z-index: 10001 !important;
    position: fixed !important;
}

#classroom-ai-container {
    z-index: 10002 !important;
    position: fixed !important;
}

#poll-creation-modal,
#open-question-modal {
    z-index: 9998 !important;
}

#classroom-chat-btn {
    z-index: 10000 !important;
}

#classroom-chat-container {
    z-index: 10001 !important;
}


=================================================================
FILE: js\ClassroomSDK.js
FULL PATH: public\js\ClassroomSDK.js
=================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */

// SIMPLIFIED CLASSROOM SDK - 4-DIGIT ROOM CODES ONLY!

class ClassroomSDK {
    constructor() {
        try {
            this.db = firebase.firestore();
            this.auth = firebase.auth();
            this.functions = firebase.app().functions();
            console.log('‚úÖ Firebase services initialized in constructor.');
        } catch (e) {
            console.error("‚ùå CRITICAL: Could not initialize Firebase services.", e);
            alert("Fatal Error: Could not connect to Firebase services. Please refresh.");
        } 
        

        this.playerName = null;
        this.roomCode = null; // 4-digit room code
        this.isTeacher = false;
        this.isInitialized = false;
        this.studentId = null;
        this.isAiActiveForClass = false;

        // UI components
        this.chatButton = null;
        this.chatContainer = null;
        this.chatMessages = null;
        this.chatInput = null;
        this.aiButton = null;
        this.aiContainer = null;
        this.aiMessages = null;
        this.aiInput = null;
        
        // Listeners
        this.studentsListener = null;
        this.messagesListener = null;
        this.roomListener = null;
    }

    // Anonymous authentication
    async loginAnonymously() {
        try {
            const userCredential = await this.auth.signInAnonymously();
            console.log('‚úÖ Anonymous login successful:', userCredential.user.uid);
            return userCredential.user;
        } catch (error) {
            console.error('üî• Anonymous login failed:', error);
            throw error;
        }
    }

    // Generate unique 4-digit room code
    async generateUniqueRoomCode() {
        let attempts = 0;
        const maxAttempts = 20; // Maximum 20 attempts
        
        while (attempts < maxAttempts) {
            // Generate random 4-digit code
            const roomCode = Math.floor(1000 + Math.random() * 9000).toString();
            
            // Check that code doesn't exist
            const roomRef = this.db.collection('rooms').doc(roomCode);
            const doc = await roomRef.get();
            
            if (!doc.exists) {
                console.log(`‚úÖ Found unique room code: ${roomCode}`);
                return roomCode;
            }
            
            console.log(`üîÑ Room code ${roomCode} exists, trying next...`);
            attempts++;
        }
        
        // If not found after 20 attempts, return random code
        const randomCode = Math.floor(1000 + Math.random() * 9000).toString();
        console.log(`‚úÖ Generated random room code: ${randomCode}`);
        return randomCode;
    }

    // SIMPLIFIED INIT - 4-digit room codes only!
    async init(appName, userOrStudentId, playerName, roomCode = null) {
        console.log(`üöÄ Initializing ${appName}...`);
        this.appName = appName;
        this.playerName = playerName;

        if (appName === 'teacher-dashboard') {
            // ◊™◊î◊ú◊ô◊ö ◊î◊ê◊™◊ó◊ï◊ú ◊©◊ú ◊î◊û◊ï◊®◊î
            this.isTeacher = true;
            this.playerName = "Teacher";
            this.roomCode = await this.generateUniqueRoomCode();
            await this.initializeRoom(userOrStudentId.uid); // Pass the teacher's UID

        } else if (appName === 'student-app' && roomCode) {
            // ◊™◊î◊ú◊ô◊ö ◊î◊ê◊™◊ó◊ï◊ú ◊©◊ú ◊î◊™◊ú◊û◊ô◊ì
            this.isTeacher = false;
            this.roomCode = roomCode;
            this.studentId = userOrStudentId; // This is the student's session ID

            // ◊ï◊ì◊ê ◊©◊î◊ó◊ì◊® ◊ß◊ô◊ô◊ù ◊ú◊§◊†◊ô ◊†◊ô◊°◊ô◊ï◊ü ◊î◊¶◊ò◊®◊§◊ï◊™
            const roomExists = await this.checkRoomExists(roomCode);
            if (!roomExists) {
                throw new Error(`Room with code ${roomCode} does not exist.`);
            }
            await this.joinRoom(this.studentId, this.playerName);

        } else {
            throw new Error('Invalid initialization parameters.');
        }

        this.isInitialized = true;
        console.log(`‚úÖ ${appName} initialized successfully for room: ${this.roomCode}`);
    }

    // ◊î◊ï◊°◊£ ◊ê◊™ ◊©◊™◊ô ◊î◊§◊ï◊†◊ß◊¶◊ô◊ï◊™ ◊î◊ê◊ú◊î ◊ú◊ß◊ú◊ê◊°
    async checkRoomExists(roomCode) {
        const roomRef = this.db.collection('rooms').doc(roomCode);
        const doc = await roomRef.get();
        return doc.exists;
    }

    // ◊¢◊ì◊õ◊ï◊ü ◊ß◊ú ◊ú◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ initializeRoom
    async initializeRoom(teacherUid) {
        const roomRef = this.db.collection('rooms').doc(this.roomCode);
        await roomRef.set({
            room_code: this.roomCode,
            created_at: firebase.firestore.FieldValue.serverTimestamp(),
            teacher_uid: teacherUid,
            settings: {
                ai_active: false,
                ai_model: 'chatgpt',
                current_command: null,
                currentPoll: { isActive: false }
            }
        });
    }

    // ◊¢◊ì◊õ◊ï◊ü ◊ß◊ú ◊ú◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ joinRoom
    async joinRoom(studentId, playerName) {
        const studentRef = this.db.collection('rooms').doc(this.roomCode)
                                 .collection('students').doc(studentId);
        await studentRef.set({
            uid: studentId,
            name: playerName,
            joined_at: firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // Listen for students
    listenForStudents(callback) {
        if (!this.roomCode) return;
        
        const studentsCollection = this.db.collection('rooms').doc(this.roomCode)
                                         .collection('students');
        
        this.studentsListener = studentsCollection.onSnapshot(snapshot => {
            const students = [];
            snapshot.forEach(doc => {
                students.push(doc.data());
            });
            console.log('üë®‚Äçüéì Students updated:', students.length);
            
            if (typeof callback === 'function') {
                callback(students);
            }
        }, error => {
            console.error("üî• Error listening for students:", error);
        });
    }

    // Listen for messages
    listenForMessages(callback) {
        if (!this.roomCode) return;

        const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                         .collection('messages')
                                         .orderBy('timestamp');

        this.messagesListener = messagesCollection.onSnapshot(snapshot => {
            const newMessages = [];
            snapshot.docChanges().forEach(change => {
                if (change.type === "added") {
                    const msg = change.doc.data();
                    const currentUserId = this.isTeacher ? this.auth.currentUser?.uid : this.studentId;
                    const isPrivate = msg.is_private === true;
                    const isRecipient = msg.recipient_uid === currentUserId;
                    const isSender = msg.sender_uid === currentUserId;

                    if (!isPrivate || this.isTeacher || isRecipient || isSender) {
                        newMessages.push(msg);
                    }
                }
            });

            if (newMessages.length > 0 && typeof callback === 'function') {
                callback(newMessages);
            }
        }, error => {
            console.error("üî• Error listening for messages:", error);
        });
    }

    // Listen for room updates (commands, AI, etc.)
    listenForRoomUpdates(callback) {
        if (!this.roomCode) return;
        const roomRef = this.db.collection('rooms').doc(this.roomCode);

        this.roomListener = roomRef.onSnapshot(doc => {
            if (doc.exists && typeof callback === 'function') {
                // ◊©◊ú◊ë ◊ß◊®◊ô◊ò◊ô: ◊©◊ú◊ó ◊ê◊™ ◊õ◊ú ◊ê◊ï◊ë◊ô◊ô◊ß◊ò ◊î◊†◊™◊ï◊†◊ô◊ù, ◊ï◊™◊ü ◊ú◊ê◊§◊ú◊ô◊ß◊¶◊ô◊î ◊ú◊î◊ó◊ú◊ô◊ò
                callback(doc.data());
            }
        }, error => {
            console.error("üî• Error listening for room updates:", error);
        });
    }

    // Send message
    async sendMessage(content) {
        if (!content || !content.trim() || !this.roomCode) return;

        try {
            const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                             .collection('messages');
            await messagesCollection.add({
                sender: this.playerName || "Teacher",
                sender_uid: this.isTeacher ? this.auth.currentUser?.uid : this.studentId,
                content: content,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                is_teacher: this.isTeacher
            });
        } catch (error) {
            console.error('üî• Error sending message:', error);
            throw error;
        }
    }

    // Send command (teacher only)
    async sendCommand(commandName, payload = {}) {
        const roomRef = this.db.collection('rooms').doc(this.roomCode);
        await roomRef.update({
            'settings.current_command': {
                command: commandName,
                payload: payload,
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            },
            'last_activity': firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // Toggle AI mode (teacher only)
    async toggleAI() {
        console.log('[DIAGNOSTIC] 1. toggleAI function started.');
        const roomRef = this.db.collection('rooms').doc(this.roomCode);

        try {
            const doc = await roomRef.get();
            const currentAI = doc.exists ? doc.data().settings?.ai_active : false;
            console.log(`[DIAGNOSTIC] 2. Read from DB. currentAI is: ${currentAI}`);

            const newValue = !currentAI;
            console.log(`[DIAGNOSTIC] 3. Value to be written to DB is: ${newValue}`);

            await roomRef.update({
                'settings.ai_active': newValue
            });

            console.log('[DIAGNOSTIC] 4. SUCCESS: roomRef.update command finished without error.');
            return newValue;

        } catch (error) {
            // ◊ê◊ù ◊™◊î◊ô◊î ◊©◊í◊ô◊ê◊î ◊õ◊ú◊©◊î◊ô ◊ë◊§◊¢◊ï◊ú◊™ ◊î◊õ◊™◊ô◊ë◊î, ◊†◊®◊ê◊î ◊ê◊ï◊™◊î ◊õ◊ê◊ü
            console.error('[DIAGNOSTIC] 5. CRITICAL FAILURE: Error during toggleAI process.', error);
            // ◊ñ◊®◊ï◊ß ◊ê◊™ ◊î◊©◊í◊ô◊ê◊î ◊î◊ú◊ê◊î ◊õ◊ì◊ô ◊©◊î◊ß◊ï◊ì ◊©◊ß◊®◊ê ◊ú◊§◊ï◊†◊ß◊¶◊ô◊î ◊ô◊ì◊¢ ◊©◊î◊ô◊ê ◊†◊õ◊©◊ú◊î
            throw error;
        }
    }

    // Cleanup
    cleanup() {
        if (this.studentsListener) {
            this.studentsListener();
            this.studentsListener = null;
        }
        if (this.messagesListener) {
            this.messagesListener();
            this.messagesListener = null;
        }
        if (this.roomListener) {
            this.roomListener();
            this.roomListener = null;
        }
        if (this.roomListener_Polls) {
            this.roomListener_Polls();
            this.roomListener_Polls = null;
        }
    }

    // Returns room code
    getRoomCode() {
        return this.roomCode;
    }

    // ========== CHAT INTERFACE ==========
    createChatInterface() {
        // Show chat interface only for students
        if (this.isTeacher) {
            console.log("Teacher view: Floating chat interface disabled.");
            return; 
        }

        if (document.getElementById('classroom-chat-btn')) return;
        
        this.chatButton = document.createElement('button');
        this.chatButton.id = 'classroom-chat-btn';
        this.chatButton.innerHTML = 'üí¨';
        this.chatButton.style.cssText = 'position: fixed; bottom: 20px; right: 20px; width: 60px; height: 60px; border-radius: 50%; background: #007bff; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 1000;';
        this.chatButton.onclick = () => this.toggleChat();
        this.makeDraggable(this.chatButton);
        document.body.appendChild(this.chatButton);

        this.chatContainer = document.createElement('div');
        this.chatContainer.id = 'classroom-chat-container';
        this.chatContainer.style.cssText = 'position: fixed; bottom: 100px; right: 20px; width: 350px; height: 400px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;';
        
        const chatHeader = document.createElement('div');
        chatHeader.style.cssText = 'background: #007bff; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        chatHeader.innerHTML = `
            <span>üí¨ Class Chat</span>
            <button id="chat-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 5px;">‚àí</button>
        `;
        
        this.makeDraggable(this.chatContainer, chatHeader);
        
        chatHeader.querySelector('#chat-minimize-btn').onclick = (e) => {
            e.stopPropagation();
            // Use App's close function to ensure state is updated
            if (window.App && window.App.closeChat) {
                window.App.closeChat();
            } else {
                this.toggleChat();
            }
        };
        
        this.chatContainer.appendChild(chatHeader);
        
        const chatContent = document.createElement('div');
        chatContent.style.cssText = 'height: calc(100% - 60px); display: flex; flex-direction: column;';
        
        this.chatMessages = document.createElement('div');
        this.chatMessages.id = 'classroom-chat-messages';
        this.chatMessages.style.cssText = 'flex: 1; padding: 15px; overflow-y: auto; background: #f8f9fa;';
        this.chatMessages.innerHTML = '<div style="text-align: center; color: #999; font-style: italic;">No messages sent yet</div>';
        
        const chatInputArea = document.createElement('div');
        chatInputArea.style.cssText = 'padding: 15px; border-top: 1px solid #eee; background: white;';
        
        this.chatInput = document.createElement('input');
        this.chatInput.type = 'text';
        this.chatInput.placeholder = 'Type a message...';
        this.chatInput.style.cssText = 'width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 20px; outline: none; font-size: 14px;';
        
        this.chatInput.onkeypress = (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const messageContent = this.chatInput.value.trim();
                if (messageContent) {
                    this.sendMessage(messageContent);
                    this.chatInput.value = '';
                }
            }
        };
        
        chatInputArea.appendChild(this.chatInput);
        chatContent.appendChild(this.chatMessages);
        chatContent.appendChild(chatInputArea);
        this.chatContainer.appendChild(chatContent);
        document.body.appendChild(this.chatContainer);
    }

    enableChat() {
        if (this.chatButton) {
            this.chatButton.style.display = 'block';
        }
    }

    toggleChat() {
        if (!this.chatContainer) return;
        
        // Use the App's state management functions
        if (window.App) {
            if (window.App.isChatOpen) {
                window.App.closeChat();
            } else {
                window.App.openChat();
                if (this.chatInput) {
                    this.chatInput.focus();
                }
            }
        } else {
            // Fallback for direct usage
            const isVisible = this.chatContainer.style.display !== 'none';
            this.chatContainer.style.display = isVisible ? 'none' : 'block';
            
            if (!isVisible && this.chatInput) {
                this.chatInput.focus();
            }
        }
    }

    addChatMessage(sender, content, messageObj) {
        if (!this.chatMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.style.cssText = 'margin-bottom: 10px; padding: 8px 12px; background: white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);';
        
        const senderSpan = document.createElement('div');
        senderSpan.style.cssText = 'font-weight: bold; color: #007bff; font-size: 12px; margin-bottom: 4px;';
        senderSpan.textContent = sender;
        
        const contentSpan = document.createElement('div');
        contentSpan.style.cssText = 'color: #333; line-height: 1.4;';
        contentSpan.textContent = content;
        
        messageDiv.appendChild(senderSpan);
        messageDiv.appendChild(contentSpan);
        
        // Remove first message if it's "No messages sent yet"
        if (this.chatMessages.children.length === 1 && 
            this.chatMessages.children[0].textContent.includes('No messages sent yet')) {
            this.chatMessages.innerHTML = '';
        }
        
        this.chatMessages.appendChild(messageDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    // ========== AI INTERFACE ==========
    createAIInterface() {
        if (document.getElementById('classroom-ai-btn')) return;

        this.aiButton = document.createElement('button');
        this.aiButton.id = 'classroom-ai-btn';
        this.aiButton.innerHTML = 'ü§ñ';
        // Button is now always visible
        this.aiButton.style.cssText = `position: fixed; bottom: 20px; right: 90px; width: 60px; height: 60px; border-radius: 50%; background: #4caf50; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10000; display: block;`;

        this.aiButton.onclick = () => this.toggleAI();
        this.makeDraggable(this.aiButton);
        document.body.appendChild(this.aiButton);

        // The rest of the function remains the same for creating the container...
        this.aiContainer = document.createElement('div');
        this.aiContainer.id = 'classroom-ai-container';
        this.aiContainer.style.cssText = 'position: fixed; bottom: 100px; right: 20px; width: 400px; height: 500px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;';

        const aiHeader = document.createElement('div');
        aiHeader.style.cssText = 'background: #4caf50; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        aiHeader.innerHTML = `<span>ü§ñ AI Assistant</span><button style="background:none;border:none;color:white;font-size:18px;cursor:pointer;">‚àí</button>`;

        this.makeDraggable(this.aiContainer, aiHeader);

        aiHeader.querySelector('button').onclick = (e) => {
            e.stopPropagation();
            this.toggleAI();
        };

        this.aiContainer.appendChild(aiHeader);

        const aiContent = document.createElement('div');
        aiContent.style.cssText = 'height: calc(100% - 60px); display: flex; flex-direction: column;';

        this.aiMessages = document.createElement('div');
        this.aiMessages.id = 'classroom-ai-messages';
        this.aiMessages.style.cssText = 'flex: 1; padding: 15px; overflow-y: auto; background: #f8f9fa;';
        this.aiMessages.innerHTML = '<div style="text-align: center; color: #999; font-style: italic;">Ask the AI assistant...</div>';

        const aiInputArea = document.createElement('div');
        aiInputArea.style.cssText = 'padding: 15px; border-top: 1px solid #eee; background: white;';

        this.aiInput = document.createElement('input');
        this.aiInput.type = 'text';
        this.aiInput.placeholder = 'Ask a question...';
        this.aiInput.style.cssText = 'width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 20px; outline: none; font-size: 14px;';
        this.aiInput.onkeypress = (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const prompt = this.aiInput.value.trim();
                if (prompt) {
                    const lang = document.documentElement.lang || 'en';
                    this.sendAIMessage(prompt, lang);
                    this.aiInput.value = '';
                }
            }
        };

        aiInputArea.appendChild(this.aiInput);
        aiContent.appendChild(this.aiMessages);
        aiContent.appendChild(aiInputArea);
        this.aiContainer.appendChild(aiContent);
        document.body.appendChild(this.aiContainer);
    }

    toggleAI() {
        if (!this.aiContainer) return;
        
        const isVisible = this.aiContainer.style.display !== 'none';
        this.aiContainer.style.display = isVisible ? 'none' : 'block';
        
        if (!isVisible && this.aiInput) {
            this.aiInput.focus();
        }
    }

    getInterfaceLanguage() {
        return document.documentElement.lang || 'en';
    }

    async sendAIMessage(prompt, language) {
        // Check if AI is disabled for students
        if (!this.isTeacher && !this.isAiActiveForClass) {
            this.addAIMessage("ü§ñ", "AI is not available at the moment.", false);
            return;
        }

        if (!language) language = this.getInterfaceLanguage();

        if (!this.functions) {
            this.addAIMessage("ü§ñ", "Error: AI service not initialized", false);
            return;
        }
        this.addAIMessage(this.playerName || "You", prompt, true);

        try {
            const askAIFunction = this.functions.httpsCallable('askAI');
            const result = await askAIFunction({ prompt, roomCode: this.roomCode, language });
            const senderName = result.data.model ? `ü§ñ (${result.data.model})` : "ü§ñ";
            this.addAIMessage(senderName, result.data.result, false);
        } catch (error) {
            console.error("üî• Error calling askAI:", error);
            let errorMsg = "An error occurred with the AI service.";
            if (error.code === 'functions/unauthenticated') {
                errorMsg = "Authentication error. Please reconnect.";
            }
            this.addAIMessage("ü§ñ", errorMsg, false);
        }
    }

    addAIMessage(sender, content, isUser) {
        if (!this.aiMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.style.cssText = `margin-bottom: 10px; padding: 8px 12px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); ${isUser ? 'background: #007bff; color: white; margin-left: 20px;' : 'background: white; color: #333; margin-right: 20px;'}`;
        
        const senderSpan = document.createElement('div');
        senderSpan.style.cssText = `font-weight: bold; font-size: 12px; margin-bottom: 4px; ${isUser ? 'color: rgba(255,255,255,0.8);' : 'color: #28a745;'}`;
        senderSpan.textContent = sender;
        
        const contentSpan = document.createElement('div');
        contentSpan.style.cssText = 'line-height: 1.4;';
        contentSpan.textContent = content;
        
        messageDiv.appendChild(senderSpan);
        messageDiv.appendChild(contentSpan);
        
        // Remove first message if it's "Ask the AI assistant..."
        if (this.aiMessages.children.length === 1 && 
            this.aiMessages.children[0].textContent.includes('Ask the AI assistant')) {
            this.aiMessages.innerHTML = '';
        }
        
        this.aiMessages.appendChild(messageDiv);
        this.aiMessages.scrollTop = this.aiMessages.scrollHeight;
    }

    // ========== UTILITY FUNCTIONS ==========
    makeDraggable(element, dragHandle = null) {
        const handle = dragHandle || element;
        handle.addEventListener('mousedown', (e) => {
            e.preventDefault();
            let startX = e.clientX - element.offsetLeft;
            let startY = e.clientY - element.offsetTop;
            if (element.style.right) {
                element.style.left = element.offsetLeft + 'px';
                element.style.right = ''; 
            }
            const handleMouseMove = (me) => {
                element.style.left = (me.clientX - startX) + 'px';
                element.style.top = (me.clientY - startY) + 'px';
            };
            const handleMouseUp = () => {
                document.removeEventListener('mousemove', handleMouseMove);
                document.removeEventListener('mouseup', handleMouseUp);
            };
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
        });
    }

    showGameNotification(message) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; left: 50%; transform: translateX(-50%);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; padding: 15px 25px; border-radius: 25px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2); z-index: 10000;
            font-weight: bold; font-size: 16px; animation: slideDown 0.3s ease;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideUp 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
        
        // Add CSS for animations
        if (!document.getElementById('notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                @keyframes slideDown { from { transform: translateX(-50%) translateY(-100%); opacity: 0; } to { transform: translateX(-50%) translateY(0); opacity: 1; } }
                @keyframes slideUp { from { transform: translateX(-50%) translateY(0); opacity: 1; } to { transform: translateX(-50%) translateY(-100%); opacity: 0; } }
            `;
            document.head.appendChild(style);
        }
    }

    // Send private message (teacher only)
    async sendPrivateMessage(content, recipientUid) {
        if (!content || !content.trim() || !this.roomCode || !recipientUid) return;

        try {
            const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                             .collection('messages');
            await messagesCollection.add({
                sender: this.playerName || "Teacher",
                sender_uid: this.isTeacher ? this.auth.currentUser?.uid : this.studentId,
                recipient_uid: recipientUid,
                content: content,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                is_teacher: this.isTeacher,
                is_private: true
            });
        } catch (error) {
            console.error('üî• Error sending private message:', error);
            throw error;
        }
    }

    // Test AI service availability
    async testAIService() {
        if (!this.functions) {
            return { available: false, error: "Firebase Functions not initialized", code: "functions/not-initialized" };
        }

        // Ensure user is authenticated before calling cloud function
        let user = this.auth.currentUser;
        if (!user) {
            try {
                const userCredential = await this.auth.signInAnonymously();
                user = userCredential.user;
            } catch (authError) {
                return { available: false, error: "Authentication failed", code: "auth-failed" };
            }
        }

        if (!user || !user.uid) {
            return { available: false, error: "User not authenticated", code: "auth-missing" };
        }
        
        try {
            const askChatGPTFunction = this.functions.httpsCallable('askChatGPT');
            const result = await askChatGPTFunction({ prompt: "Hello" });

            return { available: true, result: result.data.result, code: "success" };
        } catch (error) {
            return { available: false, error: error.message, code: error.code || "unknown" };
        }
    }

    // Poll management functions
    async startPoll(pollConfig) {
        if (!this.isTeacher) return;
        
        console.log("üìä Starting poll", pollConfig);
        
        const newPoll = {
            id: Date.now() + '_' + Math.random().toString(36).substr(2, 9), // New unique ID
            type: pollConfig.type,
            question: pollConfig.question || '', // Add question field
            options: pollConfig.options,
            isActive: true,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            responses: {}
        };

        await this.db.collection('rooms').doc(this.roomCode).update({
            'settings.currentPoll': newPoll
        });
        
        console.log("‚úÖ Poll started successfully");
    }

    async stopPoll() {
        if (!this.isTeacher) return;
        
        console.log("üìä Stopping poll");
        
        await this.db.collection('rooms').doc(this.roomCode).update({
            'settings.currentPoll.isActive': false
        });
        
        console.log("‚úÖ Poll stopped successfully");
    }

    async submitPollAnswer(answer) {
        if (!this.functions) {
            console.error("Firebase Functions is not initialized.");
            return;
        }
        try {
            const submitAnswerFunction = this.functions.httpsCallable('submitPollAnswer');
            await submitAnswerFunction({
                roomCode: this.roomCode,
                studentId: this.studentId,
                playerName: this.playerName,
                answer: answer
            });
            console.log("‚úÖ Poll answer successfully sent via Cloud Function.");
        } catch (error) {
            console.error("üî• Error calling submitPollAnswer cloud function:", error);
        }
    }

    listenForPollUpdates(callback) {
        this.roomListener_Polls = this.db.collection('rooms').doc(this.roomCode)
            .onSnapshot(doc => {
                const pollData = doc.data()?.settings?.currentPoll;
                this.lastKnownPollData = pollData;
                console.log("üìä Poll update received", pollData);
                if (typeof callback === 'function') {
                    callback(pollData);
                }
            });
    }

    getCurrentPollData() {
        return this.lastKnownPollData;
    }

    getStudentId() {
        return this.studentId;
    }

    // Function to save question history
    async saveQuestionToHistory(pollData) {
        if (!this.isTeacher || !pollData) return;
        const historyRef = this.db.collection('rooms').doc(this.roomCode)
            .collection('questionHistory').doc(pollData.id);
        await historyRef.set({
            ...pollData,
            closedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // ========== POLL INTERFACE ==========
    createPollInterface() {
        if (this.isTeacher || document.getElementById('classroom-poll-btn')) return;

        // 1. Create the permanent floating button
        this.pollButton = document.createElement('button');
        this.pollButton.id = 'classroom-poll-btn';
        this.pollButton.innerHTML = 'üìä<div id="poll-badge" style="position:absolute; top:-2px; right:-2px; width:12px; height:12px; border-radius:50%; background:red; display:none; border: 2px solid white;"></div>';
        this.pollButton.style.cssText = 'position: fixed; bottom: 20px; right: 160px; width: 60px; height: 60px; border-radius: 50%; background: #607d8b; color: white; border: none; font-size: 24px; cursor: pointer; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10000; display: block;'; // Always visible

        this.pollButton.onclick = () => {
            if (this.pollContainer && this.pollContainer.dataset.active === 'true') {
                const isVisible = this.pollContainer.style.display !== 'none';
                this.pollContainer.style.display = isVisible ? 'none' : 'block';
            }
        };

        // *** ADD THIS LINE TO MAKE THE BUTTON DRAGGABLE ***
        this.makeDraggable(this.pollButton);

        document.body.appendChild(this.pollButton);

        // 2. Create the draggable container
        this.pollContainer = document.createElement('div');
        this.pollContainer.id = 'classroom-poll-container';
        this.pollContainer.dataset.active = 'false'; // Custom attribute to track state
        this.pollContainer.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 450px; min-height: 200px; background: white; border-radius: 15px; box-shadow: 0 8px 40px rgba(0,0,0,0.25); z-index: 10001; display: none; overflow: hidden;';

        const pollHeader = document.createElement('div');
        pollHeader.style.cssText = 'background: #ff9800; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        pollHeader.innerHTML = '<span>üìä Poll / Question</span><button id="poll-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 5px;">‚àí</button>';

        this.makeDraggable(this.pollContainer, pollHeader);

        pollHeader.querySelector('#poll-minimize-btn').onclick = (e) => {
            e.stopPropagation();
            this.pollContainer.style.display = 'none';
        };

        const pollContentArea = document.createElement('div');
        pollContentArea.id = 'classroom-poll-content-area';
        pollContentArea.style.cssText = 'padding: 20px;';

        this.pollContainer.appendChild(pollHeader);
        this.pollContainer.appendChild(pollContentArea);
        document.body.appendChild(this.pollContainer);
    }
}


=================================================================
FILE: js\student-app.js
FULL PATH: public\js\student-app.js
=================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */
// ================== START OF FILE: public/js/student-app.js (COMPLETE AND FIXED) ==================
const App = {
    classroom: null,
    currentPollId: null, // Variable to track the currently displayed poll

    getOrCreateStudentId: function() {
        let studentId = sessionStorage.getItem('studentId');
        if (!studentId) {
            studentId = 'student_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('studentId', studentId);
        }
        return studentId;
    },

    init: function() {
        this.loadRoomCodeFromURL();
        document.getElementById('login-form')?.addEventListener('submit', this.handleLogin.bind(this));
    },

    loadRoomCodeFromURL: function() {
        const params = new URLSearchParams(window.location.search);
        const roomCode = params.get('classroom');
        if (roomCode) {
            const input = document.getElementById('teacher-uid');
            if(input) input.value = roomCode;
        }
    },

    handleLogin: async function(event) {
        event.preventDefault();
        const playerName = document.getElementById('player-name').value.trim();
        const roomCode = document.getElementById('teacher-uid').value.trim();
        const loginButton = event.target.querySelector('button');
        if (!playerName || !/^\d{4}$/.test(roomCode)) {
            alert('Name and a 4-digit room code are required!');
            return;
        }

        loginButton.textContent = 'Joining...';
        loginButton.disabled = true;

        try {
            this.classroom = new ClassroomSDK();
            const studentId = this.getOrCreateStudentId();
            await this.classroom.init('student-app', studentId, playerName, roomCode);

            document.getElementById('login-container').style.display = 'none';
            document.getElementById('main-container').style.display = 'block';

            this.classroom.createChatInterface();
            this.classroom.createAIInterface();
            this.classroom.createPollInterface();
            this.classroom.listenForRoomUpdates(this.stateManager.bind(this));

            this.classroom.listenForMessages((messages) => {
                const chatContainer = document.getElementById('classroom-chat-container');
                const isChatHidden = !chatContainer || chatContainer.style.display === 'none';

                messages.forEach(msg => {
                    this.classroom.addChatMessage(msg.sender, msg.content, msg);

                    if (isChatHidden && msg.is_teacher) {
                        this.classroom.toggleChat();
                    }
                });
            });

        } catch (error) {
            console.error("‚ùå Failed to initialize student app:", error);
            alert(`Failed to join the room: ${error.message}\nPlease check the room code and try again.`);
            loginButton.textContent = 'Join Lesson';
            loginButton.disabled = false;
        }
    },

    // The new central State Manager function
    stateManager: function(roomData) {
        if (!roomData || !roomData.settings) return;

        const settings = roomData.settings;
        const pollData = settings.currentPoll;
        const command = settings.current_command;

        // --- AI State Management ---
        // ** THE MAIN FIX IS HERE **
        // We no longer hide the AI button. Instead, we update the SDK's internal state.
        // The SDK's sendAIMessage function will now handle the logic of checking if AI is active.
        this.classroom.isAiActiveForClass = settings.ai_active === true;

        // --- Poll State Management ---
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollBadge = document.getElementById('poll-badge');
        const pollIsActive = pollData && pollData.isActive;

        if (pollBadge && pollContainer) {
            pollContainer.dataset.active = pollIsActive ? 'true' : 'false';
            pollBadge.style.display = pollIsActive ? 'block' : 'none';
        }

        if (pollIsActive) {
            // If a new poll has arrived, render its content and OPEN the window
            if (this.currentPollId !== pollData.id) {
                this.currentPollId = pollData.id;
                this.renderPollInterface(pollData); // This function will also make the window visible
            }
        } else {
            // If the poll has been stopped by the teacher, force-close the window
            if (this.currentPollId !== null) {
                this.clearPollInterface(); // This function now closes the window
                this.currentPollId = null;
            }
        }

        // --- Content Command Management ---
        if (command && command.command === 'LOAD_CONTENT') {
            const iframe = document.getElementById('content-frame');
            const newUrl = command.payload.url || 'about:blank';
            if (iframe && iframe.src !== newUrl) {
                iframe.src = newUrl;
            }
        }
    },

    renderPollInterface: function(pollData) {
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollContentArea = document.getElementById('classroom-poll-content-area');
        if (!pollContainer || !pollContentArea) return;

        // Show the poll window and render content inside it
        pollContainer.style.display = 'block';

        // Build the poll UI based on its type
        if (pollData.type === 'open_text') {
            pollContentArea.innerHTML = `
                <p style="margin-top:0; margin-bottom:15px; font-weight:500;">The teacher is asking a question. Please type your answer below.</p>
                <textarea id="open-answer-input" placeholder="Write your answer here..." style="width: 100%; height: 80px; padding: 10px; border-radius: 6px; border: 1px solid #ccc; box-sizing: border-box;"></textarea>
                <button id="submit-open-answer" style="width: 100%; padding: 12px; margin-top: 10px; border: none; background: #007bff; color: white; border-radius: 6px; cursor: pointer;">Submit Answer</button>
            `;
            document.getElementById('submit-open-answer').onclick = (event) => {
                const answerInput = document.getElementById('open-answer-input');
                const answer = answerInput.value.trim();
                const submitBtn = event.currentTarget;

                if (answer) {
                    this.classroom.submitPollAnswer(answer);
                    answerInput.value = '';
                    submitBtn.textContent = '‚úÖ Answer Sent!';
                    submitBtn.disabled = true;

                    setTimeout(() => {
                        submitBtn.textContent = 'Submit Answer';
                        submitBtn.disabled = false;
                    }, 2000);
                }
            };
        } else { 
            const labels = (pollData.type === 'yes_no') ? ['Yes', 'No'] : ['1', '2', '3', '4'];
            pollContentArea.innerHTML = `<p style="margin-top:0; margin-bottom:15px; font-weight:500;">The teacher is asking a quick question:</p>`;

            const buttonsWrapper = document.createElement('div');
            buttonsWrapper.style.cssText = 'display: flex; gap: 10px; flex-wrap: wrap;';

            for (let i = 1; i <= pollData.options; i++) {
                const button = document.createElement('button');
                button.textContent = labels[i-1];
                button.style.cssText = 'flex-grow: 1; padding: 12px; border: 1px solid #ccc; background: #f0f0f0; border-radius: 6px; cursor: pointer;';
                button.onclick = () => {
                    this.classroom.submitPollAnswer(i);
                    pollContentArea.innerHTML = '<p style="text-align:center; font-weight: bold; color: #28a745;">Thank you for your answer!</p>';
                };
                buttonsWrapper.appendChild(button);
            }
            pollContentArea.appendChild(buttonsWrapper);
        }
    },

    clearPollInterface: function() {
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollContentArea = document.getElementById('classroom-poll-content-area');

        if (pollContainer) {
            pollContainer.style.display = 'none'; // Hide the window
            pollContainer.dataset.active = 'false';
        }
        if (pollContentArea) {
            pollContentArea.innerHTML = ''; // Clear its content for the next poll
        }
    }
};

document.addEventListener('DOMContentLoaded', () => {
    App.init();
});
// ================== END OF FILE ==================


=================================================================
FILE: js\teacher-dashboard.js
FULL PATH: public\js\teacher-dashboard.js
=================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */
// teacher-dashboard.js - English version with advanced AI selection menu

class TeacherDashboard {
    constructor() {
        console.log('üü¢ TRACE: TeacherDashboard constructor called');
        this.sdk = null;
        this.students = [];
        this.activities = [];
        this.isAiActive = false; // Track AI status
        this.isAiActiveForStudents = false; // Add new variable for tracking
        this.currentAiModel = 'chatgpt';
        this.aiWarningShown = false; // Prevent repeated messages
        this.config = {}; // üéØ Change here
        this.debugMode = false;
        this.currentQuestionResponses = {}; // Stores { studentName: [answers] }
        
        // üîß English locale fix - set locale
        this.locale = 'en-US';
        this.rtlSupport = false;
    }

    // Debugging utility with English support
    debugLog(message, data = null) {
        const debugEnabled = true;
        if (!debugEnabled) return;
        
        const debugConsoleContent = document.querySelector('.enhanced-debug-console .debug-content');
        if(debugConsoleContent) {
            const logEntry = document.createElement('div');
            logEntry.style.direction = 'ltr';
            logEntry.style.textAlign = 'left';
            logEntry.innerHTML = `<div>[${new Date().toLocaleTimeString(this.locale)}] ${message}</div>`;
            if (data) {
                const dataPre = document.createElement('pre');
                dataPre.style.cssText = 'margin-left: 20px; color: #ffaa00; direction: ltr; text-align: left;';
                dataPre.textContent = JSON.stringify(data, null, 2);
                logEntry.appendChild(dataPre);
            }
            debugConsoleContent.appendChild(logEntry);
            debugConsoleContent.scrollTop = debugConsoleContent.scrollHeight;
        }
        console.log(`[TEACHER DEBUG] ${message}`, data);
    }

    async init() {
        console.log('üü¢ TRACE: TeacherDashboard.init called');
        const loadingOverlay = document.getElementById('loading-overlay');
        try {
            this.debugLog("üöÄ Initializing teacher dashboard...");
            await this.loadConfigData();

            // ◊¶◊ï◊® SDK ◊ï◊™◊û◊™◊ô◊ü ◊©◊î◊ï◊ê ◊ô◊î◊ô◊î ◊û◊ï◊õ◊ü ◊ú◊ó◊ú◊ï◊ò◊ô◊ü
            this.sdk = new ClassroomSDK();
            console.log('üîç SDK created:', !!this.sdk);
            console.log('üîç SDK toggleAI method:', !!this.sdk.toggleAI);
            
            const user = await this.sdk.loginAnonymously();
            this.debugLog("üëë Teacher logged in successfully", { uid: user.uid });

            await this.sdk.init('teacher-dashboard', user);
            this.debugLog(`‚úÖ Teacher dashboard initialized with room: ${this.sdk.getRoomCode()}`);

            // ◊ï◊ï◊ì◊ê ◊©◊î-SDK ◊û◊ï◊õ◊ü ◊ú◊§◊†◊ô ◊ô◊¶◊ô◊®◊™ AI
            console.log('üîç Final SDK check before AI init:');
            console.log('- SDK exists:', !!this.sdk);
            console.log('- toggleAI exists:', !!this.sdk.toggleAI);
            console.log('- DB exists:', !!this.sdk.db);
            console.log('- roomCode exists:', !!this.sdk.roomCode);

            // ◊®◊ß ◊ê◊ñ ◊¶◊ï◊® ◊ê◊™ ◊û◊û◊©◊ß ◊î-AI
            this.sdk.createAIInterface();
            this.initializeTeacherAI();
            
            // ◊î◊û◊©◊ö ◊õ◊®◊í◊ô◊ú...
            this.sdk.listenForStudents(this.updateStudentsList.bind(this));
            this.sdk.listenForMessages((messages) => {
                if (messages && messages.length > 0) {
                    this.addMessage(messages);
                }
            });
            this.sdk.listenForRoomUpdates((roomData) => {
                if (!roomData || !roomData.settings) return;

                if (roomData.settings.currentPoll) {
                    this.displayPollResults(roomData.settings.currentPoll);
                }

                const aiIsActiveInDB = roomData.settings.ai_active === true;
                if (this.isAiActive !== aiIsActiveInDB) {
                    console.log(`üîÑ Syncing teacher UI. AI status changed to: ${aiIsActiveInDB}`);
                    this.isAiActive = aiIsActiveInDB;
                    this.updateAIButton();
                }
            });

            this.updateConnectionStatus(true);
            this.setupEventListeners();
            this.updateRoomDisplay();
            
            // ◊ê◊ó◊®◊ô ◊©◊î◊õ◊ú ◊û◊ï◊õ◊ü, ◊ë◊ì◊ï◊ß ◊©◊ï◊ë ◊ê◊™ ◊î-AI
            setTimeout(() => {
                if (this.checkSDKReady()) {
                    this.showTeacherAIButton();
                    this.checkAIStatus();
                    console.log('‚úÖ Teacher AI button initialized and shown');
                } else {
                    console.error('‚ùå SDK not ready even after timeout');
                }
            }, 2000); // ◊™◊ü ◊ô◊ï◊™◊® ◊ñ◊û◊ü

            this.debugLog("‚úÖ Teacher dashboard initialized successfully.");

        } catch (error) {
            console.error("üî• Critical initialization error:", error);
            console.error("üîç Error stack:", error.stack);
            this.updateConnectionStatus(false);
        } finally {
            if(loadingOverlay) loadingOverlay.classList.add('hidden');
        }
    }

    // üÜï New function to activate AI for teacher
    async initializeTeacherAI() {
        this.debugLog("ü§ñ Initializing AI for teacher...");
        
        try {
            // 1. Check AI service availability
            const aiStatus = await this.testAIService();
            if (!aiStatus) {
                this.debugLog("‚ö†Ô∏è AI service not available, but continuing...");
            }
            
            // 2. Show AI button in any case (even if service is not available)
            this.showTeacherAIButton();
            
            // 3. Update AI status in interface
            await this.checkAIStatus();
            
            // 4. Add activity message
            this.addActivity("ü§ñ AI interface enabled for teacher");
            
            this.debugLog("‚úÖ Teacher AI initialized successfully");
            
        } catch (error) {
            console.error("üî• Error initializing teacher AI:", error);
            this.debugLog("‚ùå Teacher AI initialization failed", error);
            
            // Even in case of error - show the button
            this.showTeacherAIButton();
            this.addActivity("‚ö†Ô∏è AI available but with limitations");
        }
    }

    // üÜï Function to show AI button for teacher
    showTeacherAIButton() {
        // üîß FIX: Ensure AI button is created and visible
        let aiBtn = document.getElementById('classroom-ai-btn');
        
        if (!aiBtn) {
            // Create the button if it doesn't exist
            console.log('üîß Creating missing AI button for teacher');
            if (this.sdk && this.sdk.createAIInterface) {
                this.sdk.createAIInterface();
                aiBtn = document.getElementById('classroom-ai-btn');
            }
        }
        
        if (aiBtn) {
            aiBtn.style.display = 'block';
            aiBtn.style.opacity = '1';
            aiBtn.style.visibility = 'visible';
            
            // Add teacher indicator
            const teacherIndicator = document.createElement('div');
            teacherIndicator.className = 'teacher-ai-indicator';
            teacherIndicator.innerHTML = 'üéì';
            teacherIndicator.style.cssText = `
                position: absolute; top: -5px; left: -5px;
                background: #28a745; color: white;
                border-radius: 50%; width: 20px; height: 20px;
                font-size: 12px; display: flex;
                align-items: center; justify-content: center;
                z-index: 10003;
            `;
            
            if (!aiBtn.querySelector('.teacher-ai-indicator')) {
                aiBtn.style.position = 'relative';
                aiBtn.appendChild(teacherIndicator);
            }
            
            this.debugLog("ü§ñ AI button displayed for teacher");
            console.log('‚úÖ Teacher AI button is now visible and functional');
        } else {
            console.error('‚ùå Could not create or find AI button for teacher');
        }
    }

    // Check AI status and read current model
    async checkAIStatus() {
        console.log('üîç checkAIStatus called');
        if (!this.sdk || !this.sdk.db) {
            console.log('‚ùå SDK or DB not ready');
            this.debugLog("‚ùå Cannot check AI status - SDK/DB not ready");
            return;
        }
        
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            const doc = await roomRef.get();
            
            console.log('üîç Room document exists:', doc.exists);
            
            if (doc.exists) {
                const roomData = doc.data();
                console.log('üîç Room data:', roomData);
                console.log('üîç AI settings:', roomData.settings);
                
                this.isAiActive = roomData.settings?.ai_active === true;
                this.currentAiModel = roomData.settings?.ai_model || 'chatgpt';
                
                console.log('üîç Set isAiActive to:', this.isAiActive);
                
                this.updateAIButton();
                this.updateAIModelDisplay();
                
                this.debugLog(`ü§ñ AI Status: ${this.isAiActive ? 'Active' : 'Disabled'}, Model: ${this.currentAiModel}`);
            } else {
                console.log('‚ö†Ô∏è Room document not found');
                this.debugLog("‚ö†Ô∏è Room document not found for AI status check");
            }
        } catch (error) {
            console.error("üî• Error checking AI status:", error);
            this.debugLog("‚ùå AI status check failed", error);
        }
    }

    // Update AI button display
    updateAIButton() {
        const aiStatusIcon = document.getElementById('aiStatusIcon');
        const aiStatusText = document.getElementById('aiStatusText');
        const aiStatusDesc = document.querySelector('#toggleAI .dropdown-desc');

        if (this.isAiActive) {
            if (aiStatusIcon) aiStatusIcon.textContent = 'üü¢';
            if (aiStatusText) aiStatusText.textContent = 'AI Active for Students';
            if (aiStatusDesc) aiStatusDesc.textContent = 'Click to disable';
        } else {
            if (aiStatusIcon) aiStatusIcon.textContent = 'üî¥';
            if (aiStatusText) aiStatusText.textContent = 'AI Disabled for Students';
            if (aiStatusDesc) aiStatusDesc.textContent = 'Click to enable';
        }
    }

    // Update current model display
    updateAIModelDisplay() {
        // Update current model text
        const modelDisplays = document.querySelectorAll('.current-ai-model');
        modelDisplays.forEach(display => {
            display.textContent = this.getModelDisplayName(this.currentAiModel);
        });

        // Highlight active button
        document.querySelectorAll('.dropdown-item.ai-model-btn').forEach(btn => {
            if (btn.dataset.model === this.currentAiModel) {
                btn.style.backgroundColor = '#e8f5e9';
                btn.style.fontWeight = 'bold';
            } else {
                btn.style.backgroundColor = '';
                btn.style.fontWeight = 'normal';
            }
        });
    }

    // Get display name for model
    getModelDisplayName(model) {
        const modelNames = {
            'chatgpt': 'ChatGPT',
            'claude': 'Claude',
            'gemini': 'Gemini'
        };
        return modelNames[model] || model;
    }

    // Toggle AI mode (enable/disable)
    async toggleAIForClass() {
        console.log('--- Starting toggleAIForClass ---');
        if (!this.sdk || !this.sdk.db || !this.sdk.roomCode) {
            console.error('SDK not ready. Cannot update Firestore.');
            alert('SDK not ready. Please refresh.');
            return;
        }

        const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.roomCode);
        
        try {
            // ◊ß◊ï◊ì◊ù ◊ß◊ï◊®◊ê◊ô◊ù ◊õ◊ì◊ô ◊ú◊ì◊¢◊™ ◊û◊î ◊î◊û◊¶◊ë ◊î◊†◊ï◊õ◊ó◊ô
            const doc = await roomRef.get();
            if (!doc.exists) {
                console.error('Document does not exist!');
                return;
            }

            const currentState = doc.data().settings.ai_active;
            const newState = !currentState;

            // ◊û◊ë◊¶◊¢◊ô◊ù ◊ê◊™ ◊î◊¢◊ì◊õ◊ï◊ü ◊ë◊û◊°◊ì ◊î◊†◊™◊ï◊†◊ô◊ù
            await roomRef.update({
                'settings.ai_active': newState
            });

            console.log(`SUCCESS: Firestore updated. New state is: ${newState}`);

            // ======================================================
            // === ◊î◊ó◊ú◊ß ◊î◊ó◊°◊®: ◊¢◊ì◊õ◊ï◊ü ◊û◊û◊©◊ß ◊î◊û◊©◊™◊û◊© ◊ú◊ê◊ó◊® ◊î◊î◊¶◊ú◊ó◊î ===
            // ======================================================

            // 1. ◊¢◊ì◊õ◊ï◊ü ◊î◊û◊©◊™◊†◊î ◊î◊û◊ß◊ï◊û◊ô ◊©◊û◊ó◊ñ◊ô◊ß ◊ê◊™ ◊î◊°◊ò◊ò◊ï◊°
            this.isAiActive = newState;
            
            // 2. ◊¢◊ì◊õ◊ï◊ü ◊û◊®◊ê◊î ◊î◊õ◊§◊™◊ï◊® (◊¶◊ë◊¢ ◊ï◊ò◊ß◊°◊ò)
            this.updateAIButton();
            
            // 3. ◊î◊ï◊°◊§◊™ ◊©◊ï◊®◊î ◊ú◊ô◊ï◊û◊ü ◊î◊ê◊ô◊®◊ï◊¢◊ô◊ù
            if (newState) {
                this.addActivity('ü§ñ AI enabled for class.');
            } else {
                this.addActivity('üî¥ AI disabled for class.');
            }
            
        } catch (error) {
            console.error('FAILURE: Could not update Firestore.', error);
            alert('Failed to update the AI status. See console for error details.');
        }
    }

    checkSDKReady() {
        if (!this.sdk) {
            console.error('‚ùå SDK not initialized');
            return false;
        }
        
        if (!this.sdk.toggleAI) {
            console.error('‚ùå toggleAI method missing from SDK');
            console.log('üîç Available methods:', Object.getOwnPropertyNames(this.sdk));
            return false;
        }
        
        if (!this.sdk.db) {
            console.error('‚ùå Firebase DB not ready');
            return false;
        }
        
        if (!this.sdk.roomCode) {
            console.error('‚ùå Room code not set');
            return false;
        }
        
        console.log('‚úÖ SDK ready for AI operations');
        return true;
    }

    // Switch AI model (without turning off/on)
    async switchAIModel(model) {
        if (!this.sdk) return;
        
        this.debugLog(`üîÑ Switching AI model to: ${model}`);
        
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.update({
                'settings.ai_model': model,
                'last_activity': firebase.firestore.FieldValue.serverTimestamp()
            });
            
            this.currentAiModel = model;
            this.updateAIButton();
            this.updateAIModelDisplay();
            
            const modelName = this.getModelDisplayName(model);
            this.addActivity(`üîÑ AI model switched to: ${modelName}`);
            this.debugLog(`‚úÖ AI model switched to: ${model}`);
            
            // Message to students
            if (this.isAiActive) {
                this.showModelSwitchMessage(modelName);
            }
            
        } catch (error) {
            console.error("üî• Error switching AI model:", error);
            this.debugLog("‚ùå AI model switch failed", error);
            alert("Error switching AI model: " + error.message);
        }
    }

    // Model switch message
    showModelSwitchMessage(modelName) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 10000;
            background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
            color: white; padding: 15px 20px; border-radius: 8px;
            box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);
            font-weight: bold; max-width: 300px;
            animation: slideInRight 0.5s ease;
            direction: ltr; text-align: left;
        `;
        
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 24px;">üîÑ</span>
                <div>
                    <div>AI Model Switched!</div>
                    <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">
                        Now using: ${modelName}
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease';
            setTimeout(() => notification.remove(), 500);
        }, 3000);
    }

    // Test AI service - updated to work with askAI
    async testAIService() {
        // Comprehensive check of all required components
        if (!this.sdk) {
            this.debugLog("‚ùå SDK not available for AI test");
            return false;
        }
        
        if (!this.sdk.auth?.currentUser) {
            this.debugLog("‚ùå User not authenticated for AI test");
            return false;
        }
        
        if (!this.sdk.functions) {
            this.debugLog("‚ùå Firebase Functions not initialized");
            return false;
        }
            
        this.debugLog("üîç Testing AI service availability...");
        
        try {
            // Check if SDK has testAIService method, if not use fallback
            if (this.sdk.testAIService) {
                const result = await this.sdk.testAIService();
                
                if (result.available) {
                    this.debugLog("‚úÖ AI service available and working", result);
                    return true;
                } else {
                    this.debugLog("‚ùå AI service not available", result);
                    
                    // Show detailed message to teacher
                    let errorDetails = "AI service not available";
                    if (result.code === 'functions/failed-precondition') {
                        errorDetails = "AI service not configured (missing API key)";
                    } else if (result.code === 'functions/unauthenticated') {
                        errorDetails = "Authentication error in system";
                    } else if (result.code === 'functions/not-initialized') {
                        errorDetails = "Firebase Functions not initialized";
                    }
                    
                    // Show one-time alert
                    if (!this.aiWarningShown) {
                        this.aiWarningShown = true;
                        setTimeout(() => {
                            if (confirm(`‚ö†Ô∏è ${errorDetails}\n\nWould you like to try again?`)) {
                                this.testAIService();
                            }
                        }, 1000);
                    }
                    
                    return false;
                }
            } else {
                // Fallback if SDK doesn't have testAIService
                this.debugLog("‚ö†Ô∏è SDK testAIService method not found, assuming available");
                return true;
            }
        } catch (error) {
            this.debugLog("üî• AI service test failed with error", error);
            console.error("AI test error:", error);
            // Don't fail completely, just log and continue
            return true;
        }
    }

    updateConnectionStatus(isConnected) {
        const statusDiv = document.getElementById('connectionStatus');
        if (!statusDiv) return;
        if (isConnected) {
            statusDiv.textContent = 'üü¢ Connected to Firebase';
            statusDiv.className = 'connection-status connected';
        } else {
            statusDiv.textContent = 'üî¥ Not Connected';
            statusDiv.className = 'connection-status disconnected';
        }
    }

    addActivity(activityText) {
        const activitiesArea = document.getElementById('activitiesArea');
        if (!activitiesArea) return;

        const activityDiv = document.createElement('div');
        activityDiv.className = 'activity-item';
        activityDiv.style.direction = 'ltr';
        activityDiv.style.textAlign = 'left';
        activityDiv.innerHTML = `
            <span class="activity-time">${new Date().toLocaleTimeString(this.locale)}</span>
            <span class="activity-text">${activityText}</span>
        `;
        activitiesArea.appendChild(activityDiv);
        activitiesArea.scrollTop = activitiesArea.scrollHeight;
    }

    updateStudentsList(studentsData) {
        this.students = studentsData;
        const studentsListDiv = document.getElementById('studentsList');
        const studentsCountSpan = document.getElementById('studentsCount');
        if (!studentsListDiv || !studentsCountSpan) return;

        // Clear existing list
        studentsListDiv.innerHTML = '';
        studentsCountSpan.textContent = this.students.length;

        if (this.students.length === 0) {
            studentsListDiv.innerHTML = '<div class="no-students">No students connected currently</div>';
            return;
        }
        
        const template = document.getElementById('studentTemplate');
        
        // Process ALL students in the array
        this.students.forEach(student => {
            const studentName = student.name || 'Unknown Student';
            const studentElement = document.importNode(template.content, true);
            
            const nameSpan = studentElement.querySelector('.student-name');
            if(nameSpan) nameSpan.textContent = studentName;

            const actionsDiv = studentElement.querySelector('.student-actions');
            if (actionsDiv) {
                const privateMsgBtn = document.createElement('button');
                privateMsgBtn.textContent = 'Private Message';
                privateMsgBtn.className = 'private-message-btn';
                privateMsgBtn.onclick = () => this.openPrivateMessageModal(student);
                actionsDiv.appendChild(privateMsgBtn);
            }
            
            studentsListDiv.appendChild(studentElement);
        });
        
        this.addActivity(`Student list updated. ${this.students.length} students connected.`);
        console.log(`‚úÖ Updated student list: ${this.students.length} students displayed`);
    }

    // üîß Fix #1: undefined messages - complete and fixed function
    addMessage(messages) {
        // If it's an array of messages - iterate through each one
        if (Array.isArray(messages)) {
            messages.forEach(message => this.addSingleMessage(message));
            return;
        }
        
        // If it's a single message
        this.addSingleMessage(messages);
    }

    addSingleMessage(message) {
        const messagesArea = document.getElementById('messagesArea');
        const messagesCountSpan = document.getElementById('messagesCount');
        if (!messagesArea) return;

        // üîß FIX: Prevent duplicate messages by checking if already exists
        const messageId = message.timestamp?.seconds + '_' + message.sender_uid + '_' + message.content.substring(0, 20);
        const existingMessage = messagesArea.querySelector(`[data-message-id="${messageId}"]`);
        if (existingMessage) {
            console.log('‚ö†Ô∏è Duplicate message prevented:', message.content.substring(0, 30));
            return;
        }

        // Validation and message creation code...
        const sender = message?.sender || 'Unknown User';
        const content = message?.content || 'Empty Message';
        const timestamp = message?.timestamp;
        const isTeacher = message?.is_teacher === true;
        const isPrivate = message?.is_private === true;

        // Remove "no messages" placeholder
        const noMessages = messagesArea.querySelector('.no-messages');
        if (noMessages) {
            noMessages.remove();
        }

        // Update message count
        if (messagesCountSpan) {
            const currentCount = parseInt(messagesCountSpan.textContent) || 0;
            messagesCountSpan.textContent = currentCount + 1;
        }

        // Create message element
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-item';
        messageDiv.setAttribute('data-message-id', messageId); // üîß FIX: Add unique identifier
        messageDiv.style.direction = 'ltr';
        messageDiv.style.textAlign = 'left';
        
        // Icon and time formatting...
        let senderIcon = '';
        if (isTeacher) {
            senderIcon = 'üéì ';
        } else if (isPrivate) {
            senderIcon = 'üîí ';
        }

        let timeString = 'Unknown Time';
        if (timestamp) {
            try {
                const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
                timeString = date.toLocaleTimeString(this.locale);
            } catch (e) {
                console.warn('Cannot parse timestamp:', timestamp);
                timeString = new Date().toLocaleTimeString(this.locale);
            }
        }

        messageDiv.innerHTML = `
            <div class="message-header">
                <span class="message-sender">${senderIcon}${sender}</span>
                <span class="message-time">${timeString}</span>
            </div>
            <div class="message-content">${content}</div>
            ${isPrivate ? '<div class="message-private-indicator">Private Message</div>' : ''}
        `;

        if (isPrivate) {
            messageDiv.style.borderLeft = '4px solid #ffc107';
            messageDiv.style.background = '#fff9c4';
        }

        messagesArea.appendChild(messageDiv);
        messagesArea.scrollTop = messagesArea.scrollHeight;

        console.log(`‚úÖ Message added: ${content.substring(0, 30)}...`);
    }

    sendCommand(command, payload = {}) {
        if (!this.sdk) return;
        this.sdk.sendCommand(command, payload);
        this.addActivity(`üì§ Command sent: ${command}`);
    }

    sendMessageToClass(content) {
        if (!content || !content.trim()) return;
        
        if (this.sdk) {
            this.sdk.sendMessage(content);
            this.addActivity(`üí¨ Message sent to class: ${content}`);
        }
    }

    // üÜï AI activation encouragement message with English support
    showAIActivationMessage() {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 10000;
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white; padding: 15px 20px; border-radius: 8px;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
            font-weight: bold; max-width: 300px;
            animation: slideInRight 0.5s ease;
            direction: ltr; text-align: left;
        `;
        
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 24px;">ü§ñ</span>
                <div>
                    <div>AI Enabled Successfully!</div>
                    <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">
                        Students can now ask questions
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // Remove after 4 seconds
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease';
            setTimeout(() => notification.remove(), 500);
        }, 4000);
        
        // Add CSS for animations if not exists
        if (!document.getElementById('ai-notification-styles')) {
            const style = document.createElement('style');
            style.id = 'ai-notification-styles';
            style.textContent = `
                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOutRight {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(style);
        }
    }

    setupEventListeners() {
        // Modal handling
        const openModal = (modalId) => document.getElementById(modalId)?.classList.add('visible');
        const closeModal = (modal) => modal.closest('.modal-overlay')?.classList.remove('visible');

        // üéØ Fix: Single block handling model buttons
        document.querySelectorAll('.dropdown-item.ai-model-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                const model = btn.dataset.model;
                if (model) {
                    this.switchAIModel(model);
                }
            });
        });

        // Modal close buttons
        document.querySelectorAll('.modal-close').forEach(btn => {
            btn.addEventListener('click', (e) => {
                closeModal(e.target);
            });
        });

        // Private message form submit
        const privateMessageForm = document.getElementById('privateMessageForm');
        if (privateMessageForm) {
            privateMessageForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.sendPrivateMessage();
            });
        }

        // üéØ Add the following code block within the function
        const customUrlForm = document.getElementById('customUrlForm');
        if (customUrlForm) {
            customUrlForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const urlInput = document.getElementById('customUrlInput');
                const url = urlInput.value.trim();
                if (url) {
                    this.sendSelectedGame(url); // Reuse function for sending and closing
                    urlInput.value = '';
                }
            });
        }

        // üéØ Add poll handling
        document.querySelectorAll('.poll-type-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const pollType = btn.dataset.type;
                this.startPoll(pollType);
            });
        });

        const stopPollBtn = document.getElementById('stop-poll-btn');
        if(stopPollBtn) {
            stopPollBtn.addEventListener('click', () => this.stopPoll());
        }

        // üéØ Handle general chat form
        const chatForm = document.getElementById('chat-form');
        if (chatForm) {
            chatForm.addEventListener('submit', (e) => {
                e.preventDefault(); // Prevents page refresh - the critical fix!
                const input = document.getElementById('chat-input');
                const message = input.value.trim();
                if (message) {
                    this.sdk.sendMessage(message);
                    input.value = '';
                }
            });
        }

        document.getElementById('ai-summarize-btn')?.addEventListener('click', () => this.handleAiAnalysis('summarize'));
        document.getElementById('ai-keywords-btn')?.addEventListener('click', () => this.handleAiAnalysis('keywords'));

        // Handle closing the open question modal and stopping the poll
        document.getElementById('close-open-question-btn')?.addEventListener('click', () => this.closeOpenEndedQuestion());
        document.querySelector('#open-question-modal .modal-close')?.addEventListener('click', () => this.closeOpenEndedQuestion());

        // ◊î◊ï◊°◊§◊™ ◊î◊ê◊ñ◊†◊î ◊ú◊õ◊§◊™◊ï◊® ◊ê◊ô◊§◊ï◊° ◊û◊°◊õ◊ô◊ù
        document.getElementById('resetScreensBtn')?.addEventListener('click', () => {
            if (confirm('Are you sure you want to reset all student screens? This will stop any active poll or content.')) {
                this.resetStudentScreens();
            }
        });
    }

    openPrivateMessageModal(student) {
        const modal = document.getElementById('privateMessageModal');
        if (modal) {
            document.getElementById('privateMessageRecipient').textContent = student.name;
            modal.dataset.studentUid = student.uid;
            modal.classList.add('visible');
        }
    }

    async sendPrivateMessage() {
        const modal = document.getElementById('privateMessageModal');
        const content = document.getElementById('privateMessageText').value.trim();
        const studentUid = modal.dataset.studentUid;
        
        if (!content || !studentUid) return;
        
        try {
            await this.sdk.sendPrivateMessage(content, studentUid);
            this.addActivity(`‚úâÔ∏è Private message sent to ${document.getElementById('privateMessageRecipient').textContent}`);
            document.getElementById('privateMessageText').value = '';
            modal.classList.remove('visible');
        } catch (error) {
            console.error("üî• Error sending private message:", error);
            alert("Error sending private message");
        }
    }

    async resetClassroomData() {
        if (!this.sdk || !confirm('Are you sure you want to reset the classroom? This action will delete all data.')) {
            return;
        }
        
        try {
            // Delete room from cloud
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.delete();
            
            // Create new room
            await this.sdk.initializeRoom();
            
            this.addActivity('üîÑ Classroom reset successfully');
            alert('Classroom reset successfully!');
        } catch (error) {
            console.error("üî• Error resetting classroom:", error);
            alert("Error resetting classroom");
        }
    }

    updateRoomDisplay() {
        const roomCode = this.sdk ? this.sdk.getRoomCode() : null;
        if (!roomCode) return;

        // Update text display in header
        const roomCodeSpan = document.getElementById('header-room-code');
        if (roomCodeSpan) {
            roomCodeSpan.textContent = roomCode;
        }

        // Create and display QR code
        const qrImage = document.getElementById('qr-code-image');
        if (qrImage) {
            const studentUrl = `${window.location.origin}/${this.config.studentAppUrl}?classroom=${roomCode}`;
            const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(studentUrl)}`;
            
            qrImage.src = qrApiUrl;

            // Add copy functionality on click
            qrImage.onclick = () => {
                navigator.clipboard.writeText(studentUrl).then(() => {
                    this.addActivity(`‚úÖ Student link copied`);
                    // Can add small visual notification here if desired
                }).catch(err => {
                    console.error('Failed to copy URL: ', err);
                });
            };
        }
    }

    async loadConfigData() {
        try {
            const response = await fetch('config.json');
            if (!response.ok) throw new Error('Network response was not ok');
            this.config = await response.json();
            this.debugLog('‚úÖ Config file loaded successfully', this.config);
        } catch (error) {
            console.error('üî• Error loading config file:', error);
            this.config = { studentAppUrl: 'student-app.html', games: [] }; // Fallback
        }
    }

    openContentModal() {
        document.getElementById('customContentModal')?.classList.add('visible');
        this.populateGamesList();
    }

    populateGamesList() {
        const container = document.getElementById('game-list-container');
        if (!container) return;

        const games = this.config?.games || []; // üéØ Change here
        container.innerHTML = ''; // Clear previous content

        if (games.length === 0) {
            container.innerHTML = '<p>No games found in config.json</p>';
            return;
        }

        games.forEach(game => {
            const gameElement = document.createElement('a');
            gameElement.href = '#';
            gameElement.className = 'dropdown-item'; // Reuse existing CSS
            gameElement.onclick = (e) => {
                e.preventDefault();
                this.sendSelectedGame(game.url);
            };

            gameElement.innerHTML = `
                <span class="dropdown-icon">${game.icon || 'üîó'}</span>
                <div class="dropdown-content">
                    <div class="dropdown-title">${game.name}</div>
                    <div class="dropdown-desc">${game.description}</div>
                </div>
            `;
            container.appendChild(gameElement);
        });
    }

    sendSelectedGame(url) {
        if (!url) return;
        this.sendCommand('LOAD_CONTENT', { url });

        // Close window after sending
        const modal = document.getElementById('customContentModal');
        if (modal) {
            modal.querySelector('.modal-close').click();
        }
    }

    // üéØ Functions for poll management
    openPollCreationModal() {
        this.debugLog("üìä Opening poll creation window");
        document.getElementById('poll-creation-modal')?.classList.add('visible');
    }

    // ◊î◊ó◊ú◊£ ◊ê◊™ ◊õ◊ú ◊î◊§◊ï◊†◊ß◊¶◊ô◊î startPoll ◊ë◊ñ◊ï:
    async startPoll(pollType) {
        this.debugLog(`üìä Starting a new poll of type: ${pollType}`);

        try {
            // ◊©◊ú◊ë 1: ◊ë◊ì◊ô◊ß◊î ◊ï◊ê◊®◊õ◊ï◊ë ◊©◊ú ◊î◊°◊ß◊® ◊î◊§◊¢◊ô◊ú ◊î◊ß◊ï◊ì◊ù (◊ê◊ù ◊ß◊ô◊ô◊ù)
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.roomCode);
            const roomDoc = await roomRef.get();
            const existingPoll = roomDoc.data()?.settings?.currentPoll;

            if (existingPoll && existingPoll.isActive) {
                this.debugLog('Archiving previous active poll...', existingPoll.id);
                await this.sdk.saveQuestionToHistory(existingPoll);
                this.addActivity(`üìù Previous poll (${existingPoll.id.substring(0,5)}) archived.`);
            }

            // ◊©◊ú◊ë 2: ◊ô◊¶◊ô◊®◊™ ◊ê◊ï◊ë◊ô◊ô◊ß◊ò ◊î◊°◊ß◊® ◊î◊ó◊ì◊© ◊¢◊ù ◊û◊ê◊í◊® ◊™◊©◊ï◊ë◊ï◊™ ◊®◊ô◊ß
            const pollOptions = {
                'yes_no': 2,
                'multiple_choice': 4,
                'open_text': 0
            };

            const newPoll = {
                id: "poll_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9),
                type: pollType,
                question: '', // ◊†◊ô◊™◊ü ◊ú◊î◊®◊ó◊ë◊î ◊ë◊¢◊™◊ô◊ì
                options: pollOptions[pollType],
                isActive: true,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                responses: {} // ◊î◊™◊ó◊ú◊î ◊¢◊ù ◊û◊ê◊í◊® ◊†◊ß◊ô
            };

            // ◊©◊ú◊ë 3: ◊¢◊ì◊õ◊ï◊ü ◊î-Firestore ◊¢◊ù ◊î◊°◊ß◊® ◊î◊ó◊ì◊©
            await roomRef.update({
                'settings.currentPoll': newPoll
            });

            // ◊©◊ú◊ë 4: ◊¢◊ì◊õ◊ï◊ü ◊û◊û◊©◊ß ◊î◊û◊©◊™◊û◊© ◊ë◊î◊™◊ê◊ù ◊ú◊°◊ï◊í ◊î◊°◊ß◊® ◊î◊ó◊ì◊©
            if (pollType === 'open_text') {
                this.currentQuestionResponses = {}; // ◊ê◊ô◊§◊ï◊° ◊î◊ß◊ê◊© ◊î◊û◊ß◊ï◊û◊ô
                document.getElementById('open-question-modal')?.classList.add('visible');
            } else {
                document.getElementById('poll-section').style.display = 'block';
            }

            this.addActivity(`üìä Started new poll of type: ${pollType}`);
            document.getElementById('poll-creation-modal')?.classList.remove('visible');
            this.debugLog(`‚úÖ New poll ${newPoll.id} started successfully.`);

        } catch (error) {
            console.error("üî• Failed to start a new poll:", error);
            this.debugLog("‚ùå Error during startPoll", error);
            this.addActivity("‚ùå Error starting new poll.");
        }
    }

    stopPoll() {
        this.debugLog("üìä Stopping poll");
        this.sdk.stopPoll();
        document.getElementById('poll-section').style.display = 'none';
        this.addActivity(`‚èπÔ∏è Poll ended`);
    }

    displayPollResults(pollData) {
        // Handle Open Text Polls
        if (pollData && pollData.type === 'open_text' && pollData.isActive) {
            const container = document.getElementById('open-question-results');
            if (!container) return;
            container.innerHTML = ''; // Clear previous results to re-render

            const responses = pollData.responses || {};
            this.currentQuestionResponses = responses; // Update local memory

            // Correctly iterate over the responses object
            for (const studentName in responses) {
                if (Object.hasOwnProperty.call(responses, studentName)) {
                    const answers = responses[studentName];
                    if (Array.isArray(answers) && answers.length > 0) {
                        const lastAnswer = answers[answers.length - 1];
                        const answerDiv = document.createElement('div');
                        answerDiv.innerHTML = `<strong>${studentName} (${answers.length} versions):</strong><p style="margin: 5px 0 0 0; color: #333;">${lastAnswer}</p>`;
                        answerDiv.style.borderBottom = '1px solid #eee';
                        answerDiv.style.padding = '10px 0';
                        container.appendChild(answerDiv);
                    }
                }
            }
        } 
        // Handle Multiple Choice and Yes/No Polls
        else if (pollData && (pollData.type === 'multiple_choice' || pollData.type === 'yes_no')) {
            const container = document.getElementById('poll-results-container');
            const section = document.getElementById('poll-section');
            if (!container || !section) return;

            section.style.display = 'block';
            container.innerHTML = '';

            const responses = pollData.responses || {};
            const totalVotes = Object.keys(responses).length;
            const voteCounts = {};

            // Count votes for each option
            for (let i = 1; i <= pollData.options; i++) {
                voteCounts[i] = 0;
            }
            Object.values(responses).forEach(vote => {
                if (voteCounts[vote] !== undefined) {
                    voteCounts[vote]++;
                }
            });

            // Display results
            for (let i = 1; i <= pollData.options; i++) {
                const votes = voteCounts[i];
                const percentage = totalVotes > 0 ? ((votes / totalVotes) * 100).toFixed(1) : 0;
                const label = pollData.type === 'yes_no' ? (i === 1 ? 'Yes' : 'No') : `Option ${i}`;

                const barHtml = `
                    <div style="margin-bottom: 12px;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                            <strong>${label}</strong>
                            <span>${votes} votes (${percentage}%)</span>
                        </div>
                        <div style="background: #e0e0e0; border-radius: 4px; overflow: hidden;">
                            <div style="width: ${percentage}%; background: #42a5f5; height: 20px; transition: width 0.3s ease;"></div>
                        </div>
                    </div>
                `;
                container.innerHTML += barHtml;
            }
        }
    }

    async handleAiAnalysis(type) {
        // 1. Open the teacher's AI window immediately
        if (this.sdk && this.sdk.aiContainer.style.display === 'none') {
            this.sdk.toggleAI();
        }

        // 2. Collect current responses from local memory
        if (Object.keys(this.currentQuestionResponses).length === 0) {
            this.sdk.addAIMessage("ü§ñ", "No responses to analyze currently.", false);
            return;
        }

        const allAnswers = JSON.stringify(this.currentQuestionResponses, null, 2);
        const lang = this.sdk.getInterfaceLanguage();
        let prompt;

        // 3. Create language-aware prompt
        if (type === 'summarize') {
            prompt = (lang === 'he')
                ? `◊ú◊§◊†◊ô◊ö ◊™◊©◊ï◊ë◊ï◊™ ◊©◊ú ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊ú◊©◊ê◊ú◊î. ◊õ◊ú ◊©◊ù ◊™◊ú◊û◊ô◊ì ◊û◊û◊ï◊§◊î ◊ú◊û◊¢◊®◊ö ◊©◊ú ◊î◊™◊©◊ï◊ë◊ï◊™ ◊©◊ú◊ï (◊û◊î◊®◊ê◊©◊ï◊†◊î ◊ú◊ê◊ó◊®◊ï◊†◊î). ◊°◊õ◊ù ◊ê◊™ ◊®◊û◊™ ◊î◊î◊ë◊†◊î ◊î◊õ◊ô◊™◊™◊ô◊™, ◊ñ◊î◊î ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊™◊©◊ï◊ë◊ï◊™◊ô◊î◊ù ◊û◊¶◊ë◊ô◊¢◊ï◊™ ◊¢◊ú ◊ß◊ï◊©◊ô, ◊ï◊¶◊ô◊ô◊ü ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊î◊®◊ê◊ï ◊©◊ô◊§◊ï◊® ◊û◊©◊û◊¢◊ï◊™◊ô ◊ë◊ô◊ü ◊î◊í◊®◊°◊ê◊ï◊™:\n\n${allAnswers}`
                : `Here are student responses to a question. Each student name maps to an array of their answers (from first to last). Summarize the class's understanding, identify students whose answers indicate difficulty, and point out students who showed significant improvement across versions:\n\n${allAnswers}`;
        } else { // keywords
            prompt = (lang === 'he')
                ? `◊ñ◊î◊î ◊ê◊™ 10 ◊û◊ô◊ú◊ï◊™ ◊î◊û◊§◊™◊ó ◊î◊†◊§◊ï◊¶◊ï◊™ ◊ï◊î◊û◊©◊û◊¢◊ï◊™◊ô◊ï◊™ ◊ë◊ô◊ï◊™◊® ◊û◊î◊™◊©◊ï◊ë◊ï◊™ ◊î◊ë◊ê◊ï◊™:\n\n${allAnswers}`
                : `Extract the 10 most frequent and significant keywords from the following text:\n\n${allAnswers}`;
        }

        // 4. Send prompt to AI
        this.sdk.sendAIMessage(prompt, lang);
        this.addActivity(`üìà Sent "situation analysis" to AI.`);

        // 5. Reset responses in Firestore for a new round
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.update({ 'settings.currentPoll.responses': {} });
            this.addActivity(`üîÑ Response repository in Firestore reset and ready for next round.`);
        } catch (error) {
            console.error("Error resetting poll responses:", error);
        }
    }

    async generateLessonSummary() {
        this.addActivity('üìä Preparing comprehensive summary report...');
        if (this.sdk && this.sdk.aiContainer) {
            if (this.sdk.aiContainer.style.display === 'none') {
                this.sdk.toggleAI();
            }
        }
        try {
            const historySnapshot = await this.sdk.db.collection('rooms')
                .doc(this.sdk.getRoomCode())
                .collection('questionHistory')
                .orderBy('createdAt')
                .get();
            let fullLessonData = [];
            historySnapshot.forEach(doc => {
                fullLessonData.push(doc.data());
            });
            const summaryPrompt = this.buildLessonSummaryPrompt(fullLessonData);
            const language = this.sdk.getInterfaceLanguage();
            await this.sdk.sendAIMessage(summaryPrompt, language);
            this.addActivity('‚úÖ Summary report sent to AI');
            document.getElementById('end-lesson-modal')?.classList.remove('visible');
        } catch (error) {
            console.error('üî• Error creating summary report:', error);
            this.addActivity('‚ùå Error creating summary report');
        }
    }

    buildLessonSummaryPrompt(lessonData) {
        const language = this.sdk.getInterfaceLanguage();
        if (language === 'he') {
            let prompt = `◊ì◊ï◊ó ◊°◊ô◊õ◊ï◊ù ◊û◊ß◊ô◊£ ◊ú◊©◊ô◊¢◊ï◊®\n\n`;
            prompt += `◊û◊°◊§◊® ◊©◊ê◊ú◊ï◊™ ◊©◊†◊©◊ê◊ú◊ï: ${lessonData.length}\n\n`;
            lessonData.forEach((question, index) => {
                prompt += `◊©◊ê◊ú◊î ${index + 1}: ${question.question || '◊©◊ê◊ú◊î ◊ú◊ú◊ê ◊õ◊ï◊™◊®◊™'}\n`;
                prompt += `◊™◊©◊ï◊ë◊ï◊™ ◊î◊™◊ú◊û◊ô◊ì◊ô◊ù:\n`;
                Object.entries(question.responses || {}).forEach(([student, answers]) => {
                    if (Array.isArray(answers)) {
                        prompt += `  ${student}: ${answers.join(' ‚Üí ')}\n`;
                    } else {
                        prompt += `  ${student}: ${answers}\n`;
                    }
                });
                prompt += `\n`;
            });
            prompt += `◊ê◊†◊ê ◊°◊õ◊ù:\n`;
            prompt += `1. ◊î◊™◊ß◊ì◊û◊ï◊™ ◊õ◊ú◊ú◊ô◊™ ◊©◊ú ◊î◊õ◊ô◊™◊î\n`;
            prompt += `2. ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊î◊®◊ê◊ï ◊©◊ô◊§◊ï◊® ◊û◊©◊û◊¢◊ï◊™◊ô\n`;
            prompt += `3. ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊†◊ñ◊ß◊ß◊ô◊ù ◊ú◊™◊©◊ï◊û◊™ ◊ú◊ë ◊†◊ï◊°◊§◊™\n`;
            prompt += `4. ◊†◊ï◊©◊ê◊ô◊ù ◊©◊†◊ï◊™◊®◊ï ◊ú◊ê ◊ë◊®◊ï◊®◊ô◊ù\n`;
            prompt += `5. ◊î◊û◊ú◊¶◊ï◊™ ◊ú◊©◊ô◊¢◊ï◊® ◊î◊ë◊ê\n`;
            return prompt;
        } else {
            let prompt = `Comprehensive Lesson Summary Report\n\n`;
            prompt += `Number of questions asked: ${lessonData.length}\n\n`;
            lessonData.forEach((question, index) => {
                prompt += `Question ${index + 1}: ${question.question || 'Untitled question'}\n`;
                prompt += `Student responses:\n`;
                Object.entries(question.responses || {}).forEach(([student, answers]) => {
                    if (Array.isArray(answers)) {
                        prompt += `  ${student}: ${answers.join(' ‚Üí ')}\n`;
                    } else {
                        prompt += `  ${student}: ${answers}\n`;
                    }
                });
                prompt += `\n`;
            });
            prompt += `Please summarize:\n`;
            prompt += `1. Overall class progress\n`;
            prompt += `2. Students who showed significant improvement\n`;
            prompt += `3. Students who need additional attention\n`;
            prompt += `4. Topics that remain unclear\n`;
            prompt += `5. Recommendations for next lesson\n`;
            return prompt;
        }
    }

    async closeOpenEndedQuestion() {
        if (!this.sdk) return;
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            const roomDoc = await roomRef.get();
            const currentPoll = roomDoc.data()?.settings?.currentPoll;
            if (currentPoll && currentPoll.isActive) {
                await this.sdk.saveQuestionToHistory(currentPoll);
                await roomRef.update({ 'settings.currentPoll.isActive': false });
                this.addActivity('üìù Open question closed - student modal closed');
            }
            document.getElementById('open-question-modal')?.classList.remove('visible');
        } catch (error) {
            console.error('üî• Error closing open question:', error);
            this.addActivity('‚ùå Error closing question');
        }
    }

    // ◊î◊ï◊°◊§◊™ ◊û◊™◊ï◊ì◊î ◊ú◊û◊ó◊ú◊ß◊î TeacherDashboard
    async resetStudentScreens() {
        if (!this.sdk) return;
        console.log("üîÑ Resetting all student screens...");
        try {
            // ◊©◊ú◊ó ◊§◊ß◊ï◊ì◊î ◊ú◊†◊ß◊ï◊™ ◊ê◊™ ◊î-iframe
            await this.sdk.sendCommand('LOAD_CONTENT', { url: 'about:blank' });
            // ◊¢◊¶◊ï◊® ◊õ◊ú ◊°◊ß◊® ◊§◊¢◊ô◊ú
            await this.sdk.stopPoll();
            this.addActivity('‚èπÔ∏è All student screens have been cleared.');
        } catch (error) {
            console.error("Error resetting student screens:", error);
        }
    }
}

// Global functions for HTML buttons with English support
function sendQuickMessage(message) {
    if (window.teacherDashboard) {
        window.teacherDashboard.sendMessageToClass(message);
    }
}

function sendGameContent(url) {
    if (window.teacherDashboard) {
        window.teacherDashboard.sendCommand('LOAD_CONTENT', { url });
    }
}

function sendCustomContent() {
    document.getElementById('customContentModal').classList.add('visible');
}

// Global functions - updated
function toggleAIForClass() {
    if (window.teacherDashboard) {
        window.teacherDashboard.toggleAIForClass();
    }
}

function switchAIModel(model) {
    if (window.teacherDashboard) {
        window.teacherDashboard.switchAIModel(model);
    }
}

function resetClassroomData() {
    if (window.teacherDashboard) {
        window.teacherDashboard.resetClassroomData();
    }
}

function toggleDebug() {
    const debugConsole = document.querySelector('.enhanced-debug-console');
    if (debugConsole) {
        debugConsole.classList.toggle('visible');
    }
}

function sendMessage() {
    document.getElementById('messageModal').classList.add('visible');
}

function exportData() {
    if (!window.teacherDashboard) return;
    
    const data = {
        students: window.teacherDashboard.students,
        activities: window.teacherDashboard.activities,
        timestamp: new Date().toISOString(),
        roomCode: window.teacherDashboard.sdk?.getRoomCode()
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `classroom-data-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
}

function updateAIMenuStatus(isActive) {
    const aiMenuItems = document.querySelectorAll('.ai-menu-item');
    aiMenuItems.forEach(item => {
        item.style.opacity = isActive ? '1' : '0.5';
        item.style.pointerEvents = isActive ? 'auto' : 'none';
    });
}

// Function to copy classroom ID to clipboard with English support
function copyClassroomId() {
    if (!window.teacherDashboard || !window.teacherDashboard.sdk) {
        alert('System is not ready yet');
        return;
    }
    
    const roomCode = window.teacherDashboard.sdk.getRoomCode();
    
    // Copy to clipboard
    navigator.clipboard.writeText(roomCode).then(() => {
        // Change button text temporarily
        const copyBtn = document.getElementById('copyClassroomIdBtn');
        if (copyBtn) {
            const originalText = copyBtn.textContent;
            copyBtn.textContent = '‚úÖ Copied!';
            copyBtn.style.background = 'rgba(76, 175, 80, 0.3)';
            
            setTimeout(() => {
                copyBtn.textContent = originalText;
                copyBtn.style.background = 'rgba(255,255,255,0.2)';
            }, 2000);
        }
        
        // User notification
        if (window.teacherDashboard) {
            window.teacherDashboard.addActivity('üìã Classroom ID copied to clipboard');
        }
    }).catch(err => {
        console.error('Copy error:', err);
        alert('Error copying ID. Try copying manually.');
    });
}

// Function to test AI status with English messages
function testAIService() {
    if (window.teacherDashboard) {
        window.teacherDashboard.testAIService().then(result => {
            if (result) {
                alert('‚úÖ AI service is available and working properly!');
            } else {
                alert('‚ùå AI service is currently unavailable. Check settings.');
            }
        });
    }
}

// üîß Add English support for the entire system
document.addEventListener('DOMContentLoaded', function() {
    // Set text direction for all relevant elements
    const ltrElements = document.querySelectorAll('.message-item, .activity-item, .student-item');
    ltrElements.forEach(element => {
        element.style.direction = 'ltr';
        element.style.textAlign = 'left';
    });
    
    // Set font that supports English
    const style = document.createElement('style');
    style.textContent = `
        body, * {
            font-family: 'Segoe UI', Tahoma, Arial, 'Roboto', 'Open Sans', sans-serif !important;
        }
        
        .message-content, .activity-text, .student-name {
            direction: ltr !important;
            text-align: left !important;
            unicode-bidi: embed !important;
        }
        
        .debug-log, .debug-content {
            direction: ltr !important;
            text-align: left !important;
        }
        
        /* Fix English texts in interface */
        .dropdown-title, .dropdown-desc, .tool-label, .tool-desc {
            direction: ltr !important;
            text-align: left !important;
        }
    `;
    document.head.appendChild(style);
});

// Debug function with English logs
function debugClassroom() {
    if (!window.teacherDashboard) {
        console.log('Teacher dashboard not initialized');
        return;
    }
    
    const debug = {
        'Room': window.teacherDashboard.sdk?.getRoomCode(),
        'Students': window.teacherDashboard.students.length,
        'AI Active': window.teacherDashboard.isAiActive,
        'AI Model': window.teacherDashboard.currentAiModel,
        'SDK Connected': !!window.teacherDashboard.sdk,
        'Init Time': new Date().toLocaleTimeString('en-US')
    };
    
    console.table(debug);
    return debug;
}


=================================================================
END OF PROJECT FILES
Total files processed: 9
Total files skipped: 0
Generated: 2025-07-10 21:13:30
=================================================================


================================================================================
File 16/34: C:\Users\Meir Livneh\Documents\fireClass\firebase.json
================================================================================

{
  "firestore": {
    "database": "(default)",
    "location": "me-west1",
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  },
  "functions": [
    {
      "source": "functions",
      "codebase": "default",
      "ignore": [
        "node_modules",
        ".git",
        "firebase-debug.log",
        "firebase-debug.*.log",
        "*.local"
      ]
    }
  ],
  "hosting": {
    "public": "BUILD",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ]
  }
}

================================================================================
File 17/34: C:\Users\Meir Livneh\Documents\fireClass\fireclass-launch\index.html
================================================================================

<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>fireClass Control - From PowerPoint to Interactive Classroom</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            line-height: 1.7;
            color: #333;
            background: #f4f7f9;
            margin: 0;
            padding: 0;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            text-align: center;
            padding: 60px 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .header h1 {
            font-size: 3em;
            margin: 0;
            font-weight: 700;
        }
        .header p {
            font-size: 1.25em;
            opacity: 0.9;
            margin-top: 10px;
            max-width: 700px;
            margin-left: auto;
            margin-right: auto;
        }
        .main-cta-button {
            display: inline-block;
            background: #ffc107;
            color: #333;
            padding: 15px 35px;
            border-radius: 50px;
            text-decoration: none;
            font-weight: bold;
            font-size: 1.1em;
            margin-top: 30px;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .main-cta-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.15);
        }
        .hero-image {
            text-align: center;
            margin: -80px auto 40px auto;
            position: relative;
            z-index: 2;
        }
        .hero-image img {
            max-width: 90%;
            width: 800px;
            border-radius: 12px;
            box-shadow: 0 20px 50px rgba(0,0,0,0.2);
            border: 5px solid white;
            opacity: 0;
            transition: opacity 0.5s ease;
        }
        .hero-image img.loaded {
            opacity: 1;
        }
        .content-section {
            background: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            margin-bottom: 40px;
        }
        h2 {
            font-size: 2.2em;
            color: #2c3e50;
            border-bottom: 3px solid #667eea;
            padding-bottom: 10px;
            margin-top: 0;
        }
        h3 {
            font-size: 1.5em;
            color: #34495e;
            margin-top: 30px;
        }
        code {
            background: #e9ecef;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            color: #c7254e;
        }
        .image-table {
            width: 100%;
            border: none;
            border-collapse: collapse;
            margin: 20px 0;
        }
        .image-table td {
            border: none;
            padding: 10px;
            vertical-align: top;
            text-align: center;
        }
        .image-table img {
            width: 100%;
            border-radius: 8px;
            opacity: 0;
            transition: opacity 0.5s ease;
        }
        .image-table img.loaded {
            opacity: 1;
        }
        .footer {
            text-align: center;
            padding: 30px;
            font-size: 0.9em;
            color: #6c757d;
        }
        .final-cta {
            text-align: center;
            padding: 40px 20px;
            background: #e9ecef;
            border-radius: 10px;
        }
        .loading-placeholder {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            color: #6c757d;
            font-style: italic;
        }
        .single-image {
            opacity: 0;
            transition: opacity 0.5s ease;
            max-width: 700px;
            width: 100%;
            border-radius: 8px;
        }
        .single-image.loaded {
            opacity: 1;
        }
    </style>
</head>
<body>

    <header class="header">
        <h1>fireClass Control</h1>
        <p>From a static PowerPoint slide to a live, interactive, and data-driven classroom in a single click.</p>
        <a href="https://class-board-ad64e.web.app/" class="main-cta-button" target="_blank">Try Live Demo üöÄ</a>
    </header>

    <div class="container">
        <div class="content-section">
            <h2>The Problem: Great Content, Isolated Classrooms</h2>
            <p>Teachers and the internet are full of amazing educational content. But there's a huge gap between a great online simulation and a tool that's truly classroom-ready. How do you integrate it into a lesson? How do you know who understands and who is struggling? Most teachers face a choice: use a closed platform with limited content, or find great content online that works in isolation.</p>
        </div>

        <div class="content-section">
            <h2>A Third Way: The Classroom Wrapper</h2>
            <p>What if the answer isn't choosing, but bridging? I built a platform that takes any web-based content and "wraps" it with classroom infrastructure. With one click from an existing PowerPoint slide, any educational website becomes a full classroom tool with real-time data, AI-powered insights, and communication channels. The magic isn't in replacing content‚Äîit's in making it classroom-ready.</p>
        </div>

        <div class="hero-image">
            <div class="loading-placeholder" id="hero-placeholder">Loading overview image...</div>
            <img id="hero-img" alt="An overview of the fireClass workflow">
        </div>

        <div class="content-section">
            <h2>Visual Workflow: Teacher and Student Views</h2>
            <table class="image-table">
              <tr>
                <td><strong>Teacher's Dashboard View</strong></td>
                <td><strong>Student's Multi-Tool View</strong></td>
              </tr>
              <tr>
                <td>
                    <div class="loading-placeholder" id="teacher-placeholder">Loading teacher view...</div>
                    <img id="teacher-img" alt="Teacher Dashboard with AI Analysis">
                </td>
                <td>
                    <div class="loading-placeholder" id="student-placeholder">Loading student view...</div>
                    <img id="student-img" alt="Student View with all tools open">
                </td>
              </tr>
            </table>
            <p>The transformation happens in one click - from a traditional presentation to a live environment where students are actively engaged on their devices, while the teacher maintains full visibility and control.</p>
        </div>

        <div class="content-section">
            <h2>The Pedagogical Foundation: From Q&A to Dialogue</h2>
            <h3>The Two-Loop Feedback System</h3>
            <p>The platform enables a powerful two-loop feedback system. The <strong>Micro-Loop</strong> provides real-time AI "snapshot analysis" of student answers, allowing the teacher to adjust their teaching on the fly. The <strong>Macro-Loop</strong> provides an end-of-lesson AI synthesis, analyzing the entire history of answers to reveal patterns of growth and understanding across the whole class.</p>
            <h3>Making Thinking Visible</h3>
            <p>By saving a history of each student's evolving answers to a single question, we make their thinking process visible. This transforms classroom discussions from "right or wrong" to a data-driven exploration of *why* and *how* understanding changes.</p>
        </div>

        <div class="content-section">
            <h2>A Real Example: AI Face Recognition, Reimagined</h2>
            <p>Consider a simple web app teaching the basics of AI face recognition. With fireClass, this standalone app becomes part of a rich classroom experience: the teacher sends the app to all students, asks probing questions via the polling system, gets an AI snapshot of their strategies, and guides a targeted discussion based on real-time data‚Äîall without leaving their original presentation flow.</p>
            <p align="center">
              <div class="loading-placeholder" id="homer-placeholder">Loading Homer Simpson example...</div>
              <img id="homer-img" class="single-image" alt="The Homer Simpson face recognition application">
            </p>
        </div>

        <div class="content-section">
            <h2>Modern Development and Reliability</h2>
            <p>This platform was built orchestrating modern AI tools like Claude and GPT, and implemented with the help of Cursor. To ensure rock-solid reliability, the system is validated using an extensive suite of automated end-to-end tests built with **Playwright**. These tests simulate entire pedagogical scenarios‚Äîmultiple students answering polls simultaneously, real-time communication flows, and AI analysis cycles‚Äîto guarantee that the technology remains an invisible and robust support for the teacher.</p>
        </div>

        <div class="content-section">
            <h2>About the Creator</h2>
            <p>This platform emerged from the intersection of mathematical curiosity and classroom reality. As a mathematics teacher, I needed a way to bridge the gap between brilliant educational content and the practical need for real-time feedback. fireClass is the result: a system designed for educators who want to use the entire internet as their curriculum while maintaining the personal connection that makes teaching effective.</p>
        </div>

        <div class="final-cta">
            <h2>Ready to Transform Your Classroom?</h2>
            <p>Experience the platform from the teacher's perspective. Launch the live demo to create a room and get started.</p>
            <a href="https://class-board-ad64e.web.app/" class="main-cta-button" target="_blank">Try Teacher Live Demo üöÄ</a>

            <p style="margin-top: 25px; font-size: 0.9em; color: #6c757d;">
                Joining as a student? Go to the student app page and enter the room code provided by the teacher.<br>
                <a href="https://class-board-ad64e.web.app/student-app.html" target="_blank" style="font-weight: bold; color: #34495e;">Student App Entry Point</a>
            </p>
        </div>
    </div>

    <footer class="footer">
        <p><strong>Copyright and Permissions</strong></p>
        <p>Copyright ¬© 2025 Meir Livneh. All Rights Reserved.</p>
        <p>For permission requests, please contact the author directly: mlivneh@gmail.com</p>
        <p><strong>Technical Note:</strong> For the best experience, please disable Ad-Blockers. Real-time communication may be disrupted by some extensions.</p>
    </footer>

    <script>
        // Image loading configuration
        const imageConfig = {
            'hero-img': 'images/the_big_picture.png',
            'teacher-img': 'images/teacher_poll_ai_analysis.png',
            'student-img': 'images/student_all_windows_open.png',
            'homer-img': 'images/homer_face_recognition.png'
        };

        // Function to load a single image
        function loadImage(imgId, imagePath) {
            const img = document.getElementById(imgId);
            const placeholder = document.getElementById(imgId.replace('-img', '-placeholder'));
            
            if (!img) return;
            
            img.onload = function() {
                img.classList.add('loaded');
                if (placeholder) {
                    placeholder.style.display = 'none';
                }
            };
            
            img.onerror = function() {
                console.warn(`Could not load image: ${imagePath}`);
                if (placeholder) {
                    placeholder.innerHTML = `Image not available: ${imagePath.split('/').pop()}`;
                    placeholder.style.color = '#dc3545';
                }
            };
            
            img.src = imagePath;
        }

        // Load all images when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Small delay to let the page render first
            setTimeout(() => {
                console.log('Starting to load images...');
                Object.entries(imageConfig).forEach(([imgId, imagePath]) => {
                    console.log(`Loading ${imgId}: ${imagePath}`);
                    loadImage(imgId, imagePath);
                });
            }, 100);
        });
    </script>

</body>
</html>

================================================================================
File 18/34: C:\Users\Meir Livneh\Documents\fireClass\firestore.indexes.json
================================================================================

{
  "indexes": [],
  "fieldOverrides": []
}

================================================================================
File 19/34: C:\Users\Meir Livneh\Documents\fireClass\functions\.eslintrc.js
================================================================================

module.exports = {
  env: {
    es6: true,
    node: true,
  },
  parserOptions: {
    "ecmaVersion": 2020,
  },
  extends: [
    "eslint:recommended",
    "google",
  ],
  rules: {
    "no-restricted-globals": ["error", "name", "length"],
    "prefer-arrow-callback": "error",
    "quotes": ["error", "double", {"allowTemplateLiterals": true}],
  },
  overrides: [
    {
      files: ["**/*.spec.*"],
      env: {
        mocha: true,
      },
      rules: {},
    },
  ],
  globals: {},
};


================================================================================
File 20/34: C:\Users\Meir Livneh\Documents\fireClass\functions\index.js
================================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */
// functions/index.js - askAI ◊õ◊§◊ï◊†◊ß◊¶◊ô◊î ◊û◊®◊õ◊ñ◊ô◊™ ◊©◊ß◊ï◊®◊ê◊™ ◊ú◊î◊í◊ì◊®◊ï◊™ ◊î◊ó◊ì◊®

const {onCall} = require("firebase-functions/v2/https");
const {onSchedule} = require("firebase-functions/v2/scheduler");
const {HttpsError} = require("firebase-functions/v2/https");
const {defineSecret} = require("firebase-functions/params");
const admin = require("firebase-admin");
const https = require("https");



// Initialize Firebase Admin SDK
if (admin.apps.length === 0) {
  admin.initializeApp();
}
//
//========================= DEPLOYMENT AREA ===================================
const DEPLOY_REGION = "us-central1";
//const DEPLOY_REGION = "europe-west1";
//=============================================================================
//
// Define secrets
const geminiApiKey = defineSecret("GEMINI_API_KEY");
const claudeApiKey = defineSecret("CLAUDE_API_KEY");
const openaiApiKey = defineSecret("OPENAI_API_KEY");

/**
 * ◊§◊ï◊†◊ß◊¶◊ô◊î ◊û◊®◊õ◊ñ◊ô◊™ ◊ú◊õ◊ú ◊ß◊®◊ô◊ê◊ï◊™ AI - ◊ß◊ï◊®◊ê◊™ ◊ú◊î◊í◊ì◊®◊ï◊™ ◊î◊ó◊ì◊® ◊ï◊û◊ó◊ú◊ô◊ò◊î ◊ê◊ô◊ñ◊î ◊û◊ï◊ì◊ú ◊ú◊î◊§◊¢◊ô◊ú
 */
exports.askAI = onCall({
  region: DEPLOY_REGION,
  secrets: [geminiApiKey, claudeApiKey, openaiApiKey]
}, async (request) => {
  console.log("üéØ askAI called with:", request.data);
  
  if (!request.auth) {
    console.error("‚ùå No authentication provided");
    throw new HttpsError("unauthenticated", "Authentication required");
  }

  let prompt = request.data.prompt;
  const roomCode = request.data.roomCode;
  const language = request.data.language;
  
  if (!prompt || !roomCode) {
    console.error("‚ùå No prompt or roomCode provided");
    throw new HttpsError("invalid-argument", "Prompt and roomCode are required");
  }

  // üéØ ◊¢◊ò◊ô◊§◊™ ◊î◊§◊®◊ï◊û◊§◊ò ◊ú◊§◊ô ◊©◊§◊î
  if (language === 'he') {
    prompt = `Please answer the following prompt in Hebrew:\n\n"${prompt}"`;
  } else {
    prompt = `Please answer the following prompt in English:\n\n"${prompt}"`;
  }

  try {
    const roomRef = admin.firestore().collection('rooms').doc(roomCode);
    const roomDoc = await roomRef.get();
    
    if (!roomDoc.exists) {
      console.error("‚ùå Room not found:", roomCode);
      throw new HttpsError("not-found", "Room not found");
    }
    
    const roomData = roomDoc.data();
    
    // üéØ --- ◊™◊ó◊ô◊ú◊™ ◊î◊ú◊ï◊í◊ô◊ß◊î ◊î◊ó◊ì◊©◊î ---
    const teacherUid = roomData.teacher_uid;
    const isTeacherRequest = request.auth.uid === teacherUid;
    const aiActive = roomData.settings?.ai_active === true;
    
    console.log(`Request Details: isTeacher=${isTeacherRequest}, aiActiveForStudents=${aiActive}`);
    
    // ◊ê◊ù ◊î◊ë◊ß◊©◊î ◊î◊ô◊ê ◊ú◊ê ◊û◊î◊û◊ï◊®◊î, ◊ï◊í◊ù ◊î-AI ◊õ◊ë◊ï◊ô ◊ú◊™◊ú◊û◊ô◊ì◊ô◊ù - ◊ó◊°◊ï◊ù ◊ê◊™ ◊î◊ë◊ß◊©◊î.
    if (!isTeacherRequest && !aiActive) {
      console.log("üî¥ AI request blocked for student (AI is off).");
      throw new HttpsError("failed-precondition", "AI is disabled for this classroom");
    }
    // üéØ --- ◊°◊ï◊£ ◊î◊ú◊ï◊í◊ô◊ß◊î ◊î◊ó◊ì◊©◊î ---
    
    const selectedModel = roomData.settings?.ai_model || 'chatgpt';
    console.log(`üéØ Room ${roomCode} selected model: ${selectedModel}`);
    
    let result;
    switch (selectedModel) {
      case 'chatgpt':
        result = await callChatGPT(prompt);
        break;
      case 'claude':
        result = await callClaude(prompt);
        break;
      case 'gemini':
        result = await callGemini(prompt);
        break;
      default:
        console.log(`‚ö†Ô∏è Unknown model ${selectedModel}, falling back to ChatGPT`);
        result = await callChatGPT(prompt);
        break;
    }
    
    await roomRef.update({ 'last_activity': admin.firestore.FieldValue.serverTimestamp() });
    
    console.log(`‚úÖ AI response generated successfully using ${selectedModel}`);
    return { 
      result: result.text, 
      model: result.modelName 
    };
    
  } catch (error) {
    console.error("‚ùå Error in askAI:", error);
    if (error instanceof HttpsError) {
      throw error;
    }
    throw new HttpsError("internal", "Internal server error");
  }
});

/**
 * ◊§◊ï◊†◊ß◊¶◊ô◊î ◊ú◊©◊ú◊ô◊ó◊™ ◊™◊©◊ï◊ë◊ï◊™ ◊°◊ß◊® - ◊û◊ê◊§◊©◊®◊™ ◊ú◊™◊ú◊û◊ô◊ì◊ô◊ù ◊ú◊©◊ú◊ï◊ó ◊™◊©◊ï◊ë◊ï◊™ ◊ú◊ú◊ê ◊ê◊ô◊û◊ï◊™
 */
exports.submitPollAnswer = onCall({
  region: DEPLOY_REGION,
  allow: "all" // ◊û◊ê◊§◊©◊® ◊ß◊®◊ô◊ê◊ï◊™ ◊û◊û◊©◊™◊û◊©◊ô◊ù ◊ú◊ê ◊û◊ê◊ï◊û◊™◊ô◊ù (◊™◊ú◊û◊ô◊ì◊ô◊ù)
}, async (request) => {
  const { roomCode, studentId, playerName, answer } = request.data;

  if (!roomCode || !studentId || !playerName || answer === undefined) {
    throw new HttpsError("invalid-argument", "Missing required fields.");
  }

  const db = admin.firestore();
  const roomRef = db.collection("rooms").doc(roomCode);

  try {
    await db.runTransaction(async (transaction) => {
      const roomDoc = await transaction.get(roomRef);
      if (!roomDoc.exists) {
        throw new HttpsError("not-found", `Room ${roomCode} does not exist.`);
      }

      const currentPoll = roomDoc.data().settings.currentPoll;
      if (!currentPoll || !currentPoll.isActive) {
        return; // No active poll to answer
      }

      const updateData = {
        'settings.last_poll_activity': admin.firestore.FieldValue.serverTimestamp()
      };

      if (currentPoll.type === 'open_text') {
        const studentIdentifier = playerName.replace(/[.#$[\]]/g, '_');
        const responseField = `settings.currentPoll.responses.${studentIdentifier}`;
        updateData[responseField] = admin.firestore.FieldValue.arrayUnion(answer);
      } else {
        const responseField = `settings.currentPoll.responses.${studentId}`;
        updateData[responseField] = answer;
      }

      transaction.update(roomRef, updateData);
    });

    return { success: true };

  } catch (error) {
    console.error(`Error in submitPollAnswer for room ${roomCode}:`, error);
    if (error instanceof HttpsError) throw error;
    throw new HttpsError("internal", "Failed to submit answer.");
  }
});

/**
 * ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ ◊¢◊ñ◊® ◊ú◊ß◊®◊ô◊ê◊î ◊ú-ChatGPT
 */
async function callChatGPT(prompt) {
  const apiKey = openaiApiKey.value();
  if (!apiKey) {
    throw new HttpsError("failed-precondition", "OpenAI API key not configured");
  }

  console.log("ü§ñ Calling ChatGPT...");

  const requestBody = JSON.stringify({
    model: "gpt-4",
    messages: [{
      role: "user",
      content: prompt
    }],
    max_tokens: 1000
  });

  return new Promise((resolve, reject) => {
    const req = https.request("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      }
    }, (res) => {
      console.log("üì® ChatGPT response status:", res.statusCode);
      
      let responseBody = "";
      res.on("data", (chunk) => responseBody += chunk);
      res.on("end", () => {
        try {
          const response = JSON.parse(responseBody);
          if (response.error) {
            console.error("‚ùå ChatGPT API error:", response.error);
            reject(new HttpsError("internal", `ChatGPT error: ${response.error.message}`));
            return;
          }
          
          const text = response.choices?.[0]?.message?.content;
          if (!text) {
            console.error("‚ùå Invalid ChatGPT response format:", response);
            reject(new HttpsError("internal", "Invalid ChatGPT response format"));
            return;
          }
          
          console.log("‚úÖ ChatGPT response success, length:", text.length);
          resolve({ text, modelName: "ChatGPT" });
        } catch (e) {
          console.error("‚ùå Failed to parse ChatGPT response:", e);
          reject(new HttpsError("internal", "Failed to parse ChatGPT response"));
        }
      });
    });

    req.on("error", (error) => {
      console.error("‚ùå ChatGPT request error:", error);
      reject(new HttpsError("internal", "Failed to connect to ChatGPT"));
    });

    req.write(requestBody);
    req.end();
  });
}

/**
 * ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ ◊¢◊ñ◊® ◊ú◊ß◊®◊ô◊ê◊î ◊ú-Claude
 */
async function callClaude(prompt) {
  const apiKey = claudeApiKey.value();
  if (!apiKey) {
    throw new HttpsError("failed-precondition", "Claude API key not configured");
  }

  console.log("ü§ñ Calling Claude...");

  const requestBody = JSON.stringify({
    model: "claude-3-sonnet-20240229",
    max_tokens: 1000,
    messages: [{
      role: "user",
      content: prompt
    }]
  });

  return new Promise((resolve, reject) => {
    const req = https.request("https://api.anthropic.com/v1/messages", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": apiKey,
        "anthropic-version": "2023-06-01"
      }
    }, (res) => {
      console.log("üì® Claude response status:", res.statusCode);
      
      let responseBody = "";
      res.on("data", (chunk) => responseBody += chunk);
      res.on("end", () => {
        try {
          const response = JSON.parse(responseBody);
          if (response.error) {
            console.error("‚ùå Claude API error:", response.error);
            reject(new HttpsError("internal", `Claude error: ${response.error.message}`));
            return;
          }
          
          const text = response.content?.[0]?.text;
          if (!text) {
            console.error("‚ùå Invalid Claude response format:", response);
            reject(new HttpsError("internal", "Invalid Claude response format"));
            return;
          }
          
          console.log("‚úÖ Claude response success, length:", text.length);
          resolve({ text, modelName: "Claude" });
        } catch (e) {
          console.error("‚ùå Failed to parse Claude response:", e);
          reject(new HttpsError("internal", "Failed to parse Claude response"));
        }
      });
    });

    req.on("error", (error) => {
      console.error("‚ùå Claude request error:", error);
      reject(new HttpsError("internal", "Failed to connect to Claude"));
    });

    req.write(requestBody);
    req.end();
  });
}

/**
 * ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ ◊¢◊ñ◊® ◊ú◊ß◊®◊ô◊ê◊î ◊ú-Gemini
 */
async function callGemini(prompt) {
  const apiKey = geminiApiKey.value();
  if (!apiKey) {
    throw new HttpsError("failed-precondition", "Gemini API key not configured");
  }

  console.log("ü§ñ Calling Gemini using v1beta endpoint...");

  const geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${apiKey}`;
  
  const requestBody = JSON.stringify({
    contents: [{parts: [{text: prompt}]}],
  });

  return new Promise((resolve, reject) => {
    const req = https.request(geminiUrl, {
      method: "POST",
      headers: {"Content-Type": "application/json"}
    }, (res) => {
      console.log("üì® Gemini response status:", res.statusCode);
      
      let responseBody = "";
      res.on("data", (chunk) => responseBody += chunk);
      res.on("end", () => {
        try {
          const response = JSON.parse(responseBody);
          if (response.error) {
            console.error("‚ùå Gemini API error:", response.error);
            reject(new HttpsError("internal", `Gemini error: ${response.error.message}`));
            return;
          }
          
          const text = response.candidates?.[0]?.content?.parts?.[0]?.text;
          if (!text) {
            console.error("‚ùå Invalid Gemini response format:", response);
            reject(new HttpsError("internal", "Invalid Gemini response format"));
            return;
          }
          
          console.log("‚úÖ Gemini response success, length:", text.length);
          resolve({ text, modelName: "Gemini" });
        } catch (e) {
          console.error("‚ùå Failed to parse Gemini response:", e);
          reject(new HttpsError("internal", "Failed to parse Gemini response"));
        }
      });
    });

    req.on("error", (error) => {
      console.error("‚ùå Gemini request error:", error);
      reject(new HttpsError("internal", "Failed to connect to Gemini"));
    });

    req.write(requestBody);
    req.end();
  });
}

/**
 * ◊î◊§◊ï◊†◊ß◊¶◊ô◊ï◊™ ◊î◊ô◊©◊†◊ï◊™ - ◊¢◊ì◊ô◊ô◊ü ◊†◊©◊ê◊®◊ï◊™ ◊ú◊™◊ê◊ô◊û◊ï◊™ ◊ú◊ê◊ó◊ï◊® (◊ê◊ù ◊¶◊®◊ô◊ö ◊ú◊ë◊ì◊ô◊ß◊ï◊™)
 * ◊ê◊ë◊ú ◊îClient ◊ú◊ê ◊ê◊û◊ï◊® ◊ú◊ß◊®◊ï◊ê ◊ú◊î◊ü ◊ô◊©◊ô◊®◊ï◊™ ◊ô◊ï◊™◊®
 */
exports.askGemini = onCall({
  region: DEPLOY_REGION,
  secrets: [geminiApiKey]
}, async (request) => {
  console.log("üîç askGemini called directly (deprecated, use askAI instead)");
  const prompt = request.data.prompt;
  if (!prompt) {
    throw new HttpsError("invalid-argument", "Prompt is required");
  }
  const result = await callGemini(prompt);
  return { result: result.text, model: result.modelName };
});

exports.askClaude = onCall({
  region: DEPLOY_REGION,
  secrets: [claudeApiKey]
}, async (request) => {
  console.log("üîç askClaude called directly (deprecated, use askAI instead)");
  const prompt = request.data.prompt;
  if (!prompt) {
    throw new HttpsError("invalid-argument", "Prompt is required");
  }
  const result = await callClaude(prompt);
  return { result: result.text, model: result.modelName };
});

exports.askChatGPT = onCall({
  region: DEPLOY_REGION,
  secrets: [openaiApiKey]
}, async (request) => {
  console.log("üîç askChatGPT called directly (deprecated, use askAI instead)");
  const prompt = request.data.prompt;
  if (!prompt) {
    throw new HttpsError("invalid-argument", "Prompt is required");
  }
  const result = await callChatGPT(prompt);
  return { result: result.text, model: result.modelName };
});

/**
 * Scheduled function to clean up old classrooms.
 * Runs every day at 2:00 AM Israel time.
 */
exports.cleanupOldClassrooms = onSchedule({
  schedule: "0 2 * * *",
  timeZone: "Asia/Jerusalem",
  region: DEPLOY_REGION
}, async (event) => {
  console.log("üßπ Starting cleanup of old classrooms...");
  
  const db = admin.firestore();

  const oneWeekAgo = new Date();
  oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

  console.log("üîç Looking for rooms older than:", oneWeekAgo);

  const query = db.collection("rooms")
      .where("last_activity", "<", oneWeekAgo);

  const oldRoomsSnapshot = await query.get();
  let deletedCount = 0;

  if (oldRoomsSnapshot.empty) {
    console.log("‚úÖ No old rooms to delete.");
    return {deletedCount: 0};
  }

  const deletePromises = [];
  oldRoomsSnapshot.forEach((doc) => {
    console.log(`üóëÔ∏è Scheduling deletion for room: ${doc.id}`);
    deletePromises.push(doc.ref.delete());
    deletedCount++;
  });

  await Promise.all(deletePromises);
  console.log(`‚úÖ Cleanup completed. Deleted ${deletedCount} old rooms.`);
  return {deletedCount};
});

================================================================================
File 21/34: C:\Users\Meir Livneh\Documents\fireClass\functions\package-lock.json
================================================================================

{
  "name": "functions",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "functions",
      "dependencies": {
        "firebase-admin": "^12.0.0",
        "firebase-functions": "^5.0.0"
      },
      "devDependencies": {
        "eslint": "^8.15.0",
        "eslint-config-google": "^0.14.0",
        "firebase-functions-test": "^3.1.0"
      },
      "engines": {
        "node": "22"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "peer": true,
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.27.7",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.27.7.tgz",
      "integrity": "sha512-xgu/ySj2mTiUFmdE9yCMfBxLp4DHd5DwmbbD05YAuICfodYT3VvRxbrh81LGQ/8UpSdtMdfKMn3KouYDX59DGQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.27.7",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.27.7.tgz",
      "integrity": "sha512-BU2f9tlKQ5CAthiMIgpzAh4eDTLWo1mqi9jqE2OxMG0E/OM199VJt2q8BztTxpnSW0i1ymdwLXRJnYzvDM5r2w==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.27.5",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.27.3",
        "@babel/helpers": "^7.27.6",
        "@babel/parser": "^7.27.7",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.27.7",
        "@babel/types": "^7.27.7",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.27.5",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.27.5.tgz",
      "integrity": "sha512-ZGhA37l0e/g2s1Cnzdix0O3aLYm66eF8aufiVteOgnwxgnRP8GoyMj7VWsgWnQbVKXyge7hqrFh2K2TQM6t1Hw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/parser": "^7.27.5",
        "@babel/types": "^7.27.3",
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.27.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.6.tgz",
      "integrity": "sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.27.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.27.7",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.27.7.tgz",
      "integrity": "sha512-qnzXzDXdr/po3bOTbTIQZ7+TxNKxpkN5IifVLXS+r7qwynkZfPyjZfE7hCXbo7IoO9TNcSyibgONsf2HauUd3Q==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.27.7"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.12.13"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-static-block": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-static-block/-/plugin-syntax-class-static-block-7.14.5.tgz",
      "integrity": "sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-attributes": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.27.1.tgz",
      "integrity": "sha512-oFT0FrKHgF53f4vOsZGi2Hh3I35PfSmVs4IBFLFj4dnafP+hIWDLg3VyKmUHfLoLHlyxY4C7DGtmHuJgn+IGww==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.27.1.tgz",
      "integrity": "sha512-y8YTNIeKoyhGd9O0Jiyzyyqk8gdjnumGTQPsz0xOZOQ2RmkVJeZ1vmmfIvFEKqucBG6axJGBZDE/7iI5suUI/w==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-private-property-in-object": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-private-property-in-object/-/plugin-syntax-private-property-in-object-7.14.5.tgz",
      "integrity": "sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.27.1.tgz",
      "integrity": "sha512-xfYCBMxveHrRMnAWl1ZlPXOZjzkN82THFvLhQhFXFt81Z5HnN+EtUkZhv/zcKpmT3fzmWZB0ywiBrbC3vogbwQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.27.7",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.27.7.tgz",
      "integrity": "sha512-X6ZlfR/O/s5EQ/SnUSLzr+6kGnkg8HXGMzpgsMsrJVcfDtH1vIp6ctCN4eZ1LS5c0+te5Cb6Y514fASjMRJ1nw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.27.5",
        "@babel/parser": "^7.27.7",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.27.7",
        "debug": "^4.3.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.27.7",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.27.7.tgz",
      "integrity": "sha512-8OLQgDScAOHXnAz2cV+RfzzNMipuLVBz2biuAJFMV9bfkNf393je3VM8CLkjQodW5+iWsSJdSgSWT6rsZoXHPw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/@emnapi/core": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/@emnapi/core/-/core-1.4.3.tgz",
      "integrity": "sha512-4m62DuCE07lw01soJwPiBGC0nAww0Q+RY70VZ+n49yDIO13yyinhbWCeNnaob0lakDtWQzSdtNWzJeOJt2ma+g==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "peer": true,
      "dependencies": {
        "@emnapi/wasi-threads": "1.0.2",
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@emnapi/runtime": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.3.tgz",
      "integrity": "sha512-pBPWdu6MLKROBX05wSNKcNb++m5Er+KQ9QkB+WVM+pW2Kx9hoSrVTnu3BdkI5eBLZoKu/J6mW/B6i6bJB2ytXQ==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "peer": true,
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@emnapi/wasi-threads": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@emnapi/wasi-threads/-/wasi-threads-1.0.2.tgz",
      "integrity": "sha512-5n3nTJblwRi8LlXkJ9eBzu+kZR8Yxcc7ubakyQTFzPMtIhFpUBRbsnc2Dv88IZDIbCDlBiWrknhB4Lsz7mg6BA==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "peer": true,
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^9.6.0",
        "globals": "^13.19.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/js": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.1.tgz",
      "integrity": "sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/@fastify/busboy": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@fastify/busboy/-/busboy-1.2.1.tgz",
      "integrity": "sha512-7PQA7EH43S0CxcOa9OeAnaeA0oQ+e/DHNPZwSQM9CQHW76jle5+OvLdibRp/Aafs9KXbLhxyjOTkRjWUbQEd3Q==",
      "license": "MIT",
      "dependencies": {
        "text-decoding": "^1.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@firebase/app-check-interop-types": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/@firebase/app-check-interop-types/-/app-check-interop-types-0.3.2.tgz",
      "integrity": "sha512-LMs47Vinv2HBMZi49C09dJxp0QT5LwDzFaVGf/+ITHe3BlIhUiLNttkATSXplc89A2lAaeTqjgqVkiRfUGyQiQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/app-types": {
      "version": "0.9.2",
      "resolved": "https://registry.npmjs.org/@firebase/app-types/-/app-types-0.9.2.tgz",
      "integrity": "sha512-oMEZ1TDlBz479lmABwWsWjzHwheQKiAgnuKxE0pz0IXCVx7/rtlkx1fQ6GfgK24WCrxDKMplZrT50Kh04iMbXQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/auth-interop-types": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@firebase/auth-interop-types/-/auth-interop-types-0.2.3.tgz",
      "integrity": "sha512-Fc9wuJGgxoxQeavybiuwgyi+0rssr76b+nHpj+eGhXFYAdudMWyfBHvFL/I5fEHniUM/UQdFzi9VXJK2iZF7FQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/component": {
      "version": "0.6.9",
      "resolved": "https://registry.npmjs.org/@firebase/component/-/component-0.6.9.tgz",
      "integrity": "sha512-gm8EUEJE/fEac86AvHn8Z/QW8BvR56TBw3hMW0O838J/1mThYQXAIQBgUv75EqlCZfdawpWLrKt1uXvp9ciK3Q==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/database": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@firebase/database/-/database-1.0.8.tgz",
      "integrity": "sha512-dzXALZeBI1U5TXt6619cv0+tgEhJiwlUtQ55WNZY7vGAjv7Q1QioV969iYwt1AQQ0ovHnEW0YW9TiBfefLvErg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-check-interop-types": "0.3.2",
        "@firebase/auth-interop-types": "0.2.3",
        "@firebase/component": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "faye-websocket": "0.11.4",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/database-compat": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@firebase/database-compat/-/database-compat-1.0.8.tgz",
      "integrity": "sha512-OpeWZoPE3sGIRPBKYnW9wLad25RaWbGyk7fFQe4xnJQKRzlynWeFBSRRAoLE2Old01WXwskUiucNqUUVlFsceg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/database": "1.0.8",
        "@firebase/database-types": "1.0.5",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/database-types": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-1.0.5.tgz",
      "integrity": "sha512-fTlqCNwFYyq/C6W7AJ5OCuq5CeZuBEsEwptnVxlNPkWCo5cTTyukzAHRSO/jaQcItz33FfYrrFk1SJofcu2AaQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-types": "0.9.2",
        "@firebase/util": "1.10.0"
      }
    },
    "node_modules/@firebase/logger": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/@firebase/logger/-/logger-0.4.2.tgz",
      "integrity": "sha512-Q1VuA5M1Gjqrwom6I6NUU4lQXdo9IAQieXlujeHZWvRt1b7qQ0KwBaNAjgxG27jgF9/mUwsNmO8ptBCGVYhB0A==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/util": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/@firebase/util/-/util-1.10.0.tgz",
      "integrity": "sha512-xKtx4A668icQqoANRxyDLBLz51TAbDP9KRfpbKGxiCAW346d0BeJe5vN6/hKxxmWwnZ0mautyv39JxviwwQMOQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@google-cloud/firestore": {
      "version": "7.11.2",
      "resolved": "https://registry.npmjs.org/@google-cloud/firestore/-/firestore-7.11.2.tgz",
      "integrity": "sha512-BQCSbjWJndCZ6bj8BSGhi4EM1TDFs9HgZXXsJ7d2kEPo+x64fB3OnQE8ffmn3vWADqeAmYBPaMPF/k6PHETXKA==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@opentelemetry/api": "^1.3.0",
        "fast-deep-equal": "^3.1.1",
        "functional-red-black-tree": "^1.0.1",
        "google-gax": "^4.3.3",
        "protobufjs": "^7.2.6"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@google-cloud/paginator": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/@google-cloud/paginator/-/paginator-5.0.2.tgz",
      "integrity": "sha512-DJS3s0OVH4zFDB1PzjxAsHqJT6sKVbRwwML0ZBP9PbU7Yebtu/7SWMRzvO2J3nUi9pRNITCfu4LJeooM2w4pjg==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "arrify": "^2.0.0",
        "extend": "^3.0.2"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@google-cloud/projectify": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/projectify/-/projectify-4.0.0.tgz",
      "integrity": "sha512-MmaX6HeSvyPbWGwFq7mXdo0uQZLGBYCwziiLIGq5JVX+/bdI3SAq6bP98trV5eTWfLuvsMcIC1YJOF2vfteLFA==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@google-cloud/promisify": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/promisify/-/promisify-4.0.0.tgz",
      "integrity": "sha512-Orxzlfb9c67A15cq2JQEyVc7wEsmFBmHjZWZYQMUyJ1qivXyMwdyNOs9odi79hze+2zqdTtu1E19IM/FtqZ10g==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@google-cloud/storage": {
      "version": "7.16.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/storage/-/storage-7.16.0.tgz",
      "integrity": "sha512-7/5LRgykyOfQENcm6hDKP8SX/u9XxE5YOiWOkgkwcoO+cG8xT/cyOvp9wwN3IxfdYgpHs8CE7Nq2PKX2lNaEXw==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@google-cloud/paginator": "^5.0.0",
        "@google-cloud/projectify": "^4.0.0",
        "@google-cloud/promisify": "<4.1.0",
        "abort-controller": "^3.0.0",
        "async-retry": "^1.3.3",
        "duplexify": "^4.1.3",
        "fast-xml-parser": "^4.4.1",
        "gaxios": "^6.0.2",
        "google-auth-library": "^9.6.3",
        "html-entities": "^2.5.2",
        "mime": "^3.0.0",
        "p-limit": "^3.0.1",
        "retry-request": "^7.0.0",
        "teeny-request": "^9.0.0",
        "uuid": "^8.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@google-cloud/storage/node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/@grpc/grpc-js": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.13.4.tgz",
      "integrity": "sha512-GsFaMXCkMqkKIvwCQjCrwH+GHbPKBjhwo/8ZuUkWHqbI73Kky9I+pQltrlT0+MWpedCoosda53lgjYfyEPgxBg==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@grpc/proto-loader": "^0.7.13",
        "@js-sdsl/ordered-map": "^4.4.2"
      },
      "engines": {
        "node": ">=12.10.0"
      }
    },
    "node_modules/@grpc/proto-loader": {
      "version": "0.7.15",
      "resolved": "https://registry.npmjs.org/@grpc/proto-loader/-/proto-loader-0.7.15.tgz",
      "integrity": "sha512-tMXdRCfYVixjuFK+Hk0Q1s38gV9zDiDJfWL3h1rv4Qc39oILCu1TRTDt7+fGUI8K4G1Fj125Hx/ru3azECWTyQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "lodash.camelcase": "^4.3.0",
        "long": "^5.0.0",
        "protobufjs": "^7.2.5",
        "yargs": "^17.7.2"
      },
      "bin": {
        "proto-loader-gen-types": "build/bin/proto-loader-gen-types.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@humanwhocodes/config-array": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.13.0.tgz",
      "integrity": "sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==",
      "deprecated": "Use @eslint/config-array instead",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanwhocodes/object-schema": "^2.0.3",
        "debug": "^4.3.1",
        "minimatch": "^3.0.5"
      },
      "engines": {
        "node": ">=10.10.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/object-schema": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
      "deprecated": "Use @eslint/object-schema instead",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/@isaacs/cliui": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "dependencies": {
        "string-width": "^5.1.2",
        "string-width-cjs": "npm:string-width@^4.2.0",
        "strip-ansi": "^7.0.1",
        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
        "wrap-ansi": "^8.1.0",
        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/ansi-regex": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "dependencies": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-30.0.2.tgz",
      "integrity": "sha512-krGElPU0FipAqpVZ/BRZOy0MZh/ARdJ0Nj+PiH1ykFY1+VpBlYNLjdjVA5CFKxnKR6PFqFutO4Z7cdK9BlGiDA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/types": "30.0.1",
        "@types/node": "*",
        "chalk": "^4.1.2",
        "jest-message-util": "30.0.2",
        "jest-util": "30.0.2",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/core": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-30.0.3.tgz",
      "integrity": "sha512-Mgs1N+NSHD3Fusl7bOq1jyxv1JDAUwjy+0DhVR93Q6xcBP9/bAQ+oZhXb5TTnP5sQzAHgb7ROCKQ2SnovtxYtg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/console": "30.0.2",
        "@jest/pattern": "30.0.1",
        "@jest/reporters": "30.0.2",
        "@jest/test-result": "30.0.2",
        "@jest/transform": "30.0.2",
        "@jest/types": "30.0.1",
        "@types/node": "*",
        "ansi-escapes": "^4.3.2",
        "chalk": "^4.1.2",
        "ci-info": "^4.2.0",
        "exit-x": "^0.2.2",
        "graceful-fs": "^4.2.11",
        "jest-changed-files": "30.0.2",
        "jest-config": "30.0.3",
        "jest-haste-map": "30.0.2",
        "jest-message-util": "30.0.2",
        "jest-regex-util": "30.0.1",
        "jest-resolve": "30.0.2",
        "jest-resolve-dependencies": "30.0.3",
        "jest-runner": "30.0.3",
        "jest-runtime": "30.0.3",
        "jest-snapshot": "30.0.3",
        "jest-util": "30.0.2",
        "jest-validate": "30.0.2",
        "jest-watcher": "30.0.2",
        "micromatch": "^4.0.8",
        "pretty-format": "30.0.2",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/diff-sequences": {
      "version": "30.0.1",
      "resolved": "https://registry.npmjs.org/@jest/diff-sequences/-/diff-sequences-30.0.1.tgz",
      "integrity": "sha512-n5H8QLDJ47QqbCNn5SuFjCRDrOLEZ0h8vAHCK5RL9Ls7Xa8AQLa/YxAc9UjFqoEDM48muwtBGjtMY5cr0PLDCw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/environment": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-30.0.2.tgz",
      "integrity": "sha512-hRLhZRJNxBiOhxIKSq2UkrlhMt3/zVFQOAi5lvS8T9I03+kxsbflwHJEF+eXEYXCrRGRhHwECT7CDk6DyngsRA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/fake-timers": "30.0.2",
        "@jest/types": "30.0.1",
        "@types/node": "*",
        "jest-mock": "30.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/expect": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-30.0.3.tgz",
      "integrity": "sha512-73BVLqfCeWjYWPEQoYjiRZ4xuQRhQZU0WdgvbyXGRHItKQqg5e6mt2y1kVhzLSuZpmUnccZHbGynoaL7IcLU3A==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "expect": "30.0.3",
        "jest-snapshot": "30.0.3"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/expect-utils": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-30.0.3.tgz",
      "integrity": "sha512-SMtBvf2sfX2agcT0dA9pXwcUrKvOSDqBY4e4iRfT+Hya33XzV35YVg+98YQFErVGA/VR1Gto5Y2+A6G9LSQ3Yg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/get-type": "30.0.1"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/fake-timers": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-30.0.2.tgz",
      "integrity": "sha512-jfx0Xg7l0gmphTY9UKm5RtH12BlLYj/2Plj6wXjVW5Era4FZKfXeIvwC67WX+4q8UCFxYS20IgnMcFBcEU0DtA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/types": "30.0.1",
        "@sinonjs/fake-timers": "^13.0.0",
        "@types/node": "*",
        "jest-message-util": "30.0.2",
        "jest-mock": "30.0.2",
        "jest-util": "30.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/get-type": {
      "version": "30.0.1",
      "resolved": "https://registry.npmjs.org/@jest/get-type/-/get-type-30.0.1.tgz",
      "integrity": "sha512-AyYdemXCptSRFirI5EPazNxyPwAL0jXt3zceFjaj8NFiKP9pOi0bfXonf6qkf82z2t3QWPeLCWWw4stPBzctLw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/globals": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-30.0.3.tgz",
      "integrity": "sha512-fIduqNyYpMeeSr5iEAiMn15KxCzvrmxl7X7VwLDRGj7t5CoHtbF+7K3EvKk32mOUIJ4kIvFRlaixClMH2h/Vaw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/environment": "30.0.2",
        "@jest/expect": "30.0.3",
        "@jest/types": "30.0.1",
        "jest-mock": "30.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/pattern": {
      "version": "30.0.1",
      "resolved": "https://registry.npmjs.org/@jest/pattern/-/pattern-30.0.1.tgz",
      "integrity": "sha512-gWp7NfQW27LaBQz3TITS8L7ZCQ0TLvtmI//4OwlQRx4rnWxcPNIYjxZpDcN4+UlGxgm3jS5QPz8IPTCkb59wZA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@types/node": "*",
        "jest-regex-util": "30.0.1"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/reporters": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-30.0.2.tgz",
      "integrity": "sha512-l4QzS/oKf57F8WtPZK+vvF4Io6ukplc6XgNFu4Hd/QxaLEO9f+8dSFzUua62Oe0HKlCUjKHpltKErAgDiMJKsA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "30.0.2",
        "@jest/test-result": "30.0.2",
        "@jest/transform": "30.0.2",
        "@jest/types": "30.0.1",
        "@jridgewell/trace-mapping": "^0.3.25",
        "@types/node": "*",
        "chalk": "^4.1.2",
        "collect-v8-coverage": "^1.0.2",
        "exit-x": "^0.2.2",
        "glob": "^10.3.10",
        "graceful-fs": "^4.2.11",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^6.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^5.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-message-util": "30.0.2",
        "jest-util": "30.0.2",
        "jest-worker": "30.0.2",
        "slash": "^3.0.0",
        "string-length": "^4.0.2",
        "v8-to-istanbul": "^9.0.1"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/schemas": {
      "version": "30.0.1",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-30.0.1.tgz",
      "integrity": "sha512-+g/1TKjFuGrf1Hh0QPCv0gISwBxJ+MQSNXmG9zjHy7BmFhtoJ9fdNhWJp3qUKRi93AOZHXtdxZgJ1vAtz6z65w==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@sinclair/typebox": "^0.34.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/snapshot-utils": {
      "version": "30.0.1",
      "resolved": "https://registry.npmjs.org/@jest/snapshot-utils/-/snapshot-utils-30.0.1.tgz",
      "integrity": "sha512-6Dpv7vdtoRiISEFwYF8/c7LIvqXD7xDXtLPNzC2xqAfBznKip0MQM+rkseKwUPUpv2PJ7KW/YsnwWXrIL2xF+A==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/types": "30.0.1",
        "chalk": "^4.1.2",
        "graceful-fs": "^4.2.11",
        "natural-compare": "^1.4.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/source-map": {
      "version": "30.0.1",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-30.0.1.tgz",
      "integrity": "sha512-MIRWMUUR3sdbP36oyNyhbThLHyJ2eEDClPCiHVbrYAe5g3CHRArIVpBw7cdSB5fr+ofSfIb2Tnsw8iEHL0PYQg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.25",
        "callsites": "^3.1.0",
        "graceful-fs": "^4.2.11"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/test-result": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-30.0.2.tgz",
      "integrity": "sha512-KKMuBKkkZYP/GfHMhI+cH2/P3+taMZS3qnqqiPC1UXZTJskkCS+YU/ILCtw5anw1+YsTulDHFpDo70mmCedW8w==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/console": "30.0.2",
        "@jest/types": "30.0.1",
        "@types/istanbul-lib-coverage": "^2.0.6",
        "collect-v8-coverage": "^1.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/test-sequencer": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-30.0.2.tgz",
      "integrity": "sha512-fbyU5HPka0rkalZ3MXVvq0hwZY8dx3Y6SCqR64zRmh+xXlDeFl0IdL4l9e7vp4gxEXTYHbwLFA1D+WW5CucaSw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/test-result": "30.0.2",
        "graceful-fs": "^4.2.11",
        "jest-haste-map": "30.0.2",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/transform": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-30.0.2.tgz",
      "integrity": "sha512-kJIuhLMTxRF7sc0gPzPtCDib/V9KwW3I2U25b+lYCYMVqHHSrcZopS8J8H+znx9yixuFv+Iozl8raLt/4MoxrA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.27.4",
        "@jest/types": "30.0.1",
        "@jridgewell/trace-mapping": "^0.3.25",
        "babel-plugin-istanbul": "^7.0.0",
        "chalk": "^4.1.2",
        "convert-source-map": "^2.0.0",
        "fast-json-stable-stringify": "^2.1.0",
        "graceful-fs": "^4.2.11",
        "jest-haste-map": "30.0.2",
        "jest-regex-util": "30.0.1",
        "jest-util": "30.0.2",
        "micromatch": "^4.0.8",
        "pirates": "^4.0.7",
        "slash": "^3.0.0",
        "write-file-atomic": "^5.0.1"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/types": {
      "version": "30.0.1",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-30.0.1.tgz",
      "integrity": "sha512-HGwoYRVF0QSKJu1ZQX0o5ZrUrrhj0aOOFA8hXrumD7SIzjouevhawbTjmXdwOmURdGluU9DM/XvGm3NyFoiQjw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/pattern": "30.0.1",
        "@jest/schemas": "30.0.1",
        "@types/istanbul-lib-coverage": "^2.0.6",
        "@types/istanbul-reports": "^3.0.4",
        "@types/node": "*",
        "@types/yargs": "^17.0.33",
        "chalk": "^4.1.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@js-sdsl/ordered-map": {
      "version": "4.4.2",
      "resolved": "https://registry.npmjs.org/@js-sdsl/ordered-map/-/ordered-map-4.4.2.tgz",
      "integrity": "sha512-iUKgm52T8HOE/makSxjqoWhe95ZJA1/G1sYsGev2JDKUSS14KAgg1LHb+Ba+IPow0xflbnSkOsZcO08C7w1gYw==",
      "license": "MIT",
      "optional": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/js-sdsl"
      }
    },
    "node_modules/@napi-rs/wasm-runtime": {
      "version": "0.2.11",
      "resolved": "https://registry.npmjs.org/@napi-rs/wasm-runtime/-/wasm-runtime-0.2.11.tgz",
      "integrity": "sha512-9DPkXtvHydrcOsopiYpUgPHpmj0HWZKMUnL2dZqpvC42lsratuBG06V5ipyno0fUek5VlFsNQ+AcFATSrJXgMA==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "peer": true,
      "dependencies": {
        "@emnapi/core": "^1.4.3",
        "@emnapi/runtime": "^1.4.3",
        "@tybys/wasm-util": "^0.9.0"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@opentelemetry/api": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/@opentelemetry/api/-/api-1.9.0.tgz",
      "integrity": "sha512-3giAOQvZiH5F9bMlMiv8+GSPMeqg0dbaeo58/0SlA9sxSqZhnUtxzX9/2FzyhS9sWQf5S0GJE0AKBrFqjpeYcg==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/@pkgjs/parseargs": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "peer": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@pkgr/core": {
      "version": "0.2.7",
      "resolved": "https://registry.npmjs.org/@pkgr/core/-/core-0.2.7.tgz",
      "integrity": "sha512-YLT9Zo3oNPJoBjBc4q8G2mjU4tqIbf5CEOORbUUr48dCD9q3umJ3IPlVqOqDakPfd2HuwccBaqlGhN4Gmr5OWg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": "^12.20.0 || ^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/pkgr"
      }
    },
    "node_modules/@protobufjs/aspromise": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
      "integrity": "sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/base64": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
      "integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/codegen": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
      "integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/eventemitter": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
      "integrity": "sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/fetch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
      "integrity": "sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.1",
        "@protobufjs/inquire": "^1.1.0"
      }
    },
    "node_modules/@protobufjs/float": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
      "integrity": "sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/inquire": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
      "integrity": "sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/path": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
      "integrity": "sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/pool": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
      "integrity": "sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/utf8": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
      "integrity": "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.34.37",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.34.37.tgz",
      "integrity": "sha512-2TRuQVgQYfy+EzHRTIvkhv2ADEouJ2xNS/Vq+W5EuuewBdOrvATvljZTxHWZSTYr2sTjTHpGvucaGAt67S2akw==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/@sinonjs/commons": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.1.tgz",
      "integrity": "sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==",
      "dev": true,
      "license": "BSD-3-Clause",
      "peer": true,
      "dependencies": {
        "type-detect": "4.0.8"
      }
    },
    "node_modules/@sinonjs/fake-timers": {
      "version": "13.0.5",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-13.0.5.tgz",
      "integrity": "sha512-36/hTbH2uaWuGVERyC6da9YwGWnzUZXuPro/F2LfsdOsLnCojz/iSH8MxUt/FD2S5XBSVPhmArFUXcpCQ2Hkiw==",
      "dev": true,
      "license": "BSD-3-Clause",
      "peer": true,
      "dependencies": {
        "@sinonjs/commons": "^3.0.1"
      }
    },
    "node_modules/@tootallnate/once": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-2.0.0.tgz",
      "integrity": "sha512-XCuKFP5PS55gnMVu3dty8KPatLqUoy/ZYzDzAGCQ8JNFCkLXzmI7vNHCR+XpbZaMWQK/vQubr7PkYq8g470J/A==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tybys/wasm-util": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/@tybys/wasm-util/-/wasm-util-0.9.0.tgz",
      "integrity": "sha512-6+7nlbMVX/PVDCwaIQ8nTOPveOcFLSt8GcXdx8hD0bt39uWxYT88uXzqTd4fTvqta7oeUJqudepapKNt2DYJFw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "peer": true,
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.6",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.6.tgz",
      "integrity": "sha512-HLFeCYgz89uk22N5Qg3dvGvsv46B8GLvKKo1zKG4NybA8U2DiEO3w9lqGg29t/tfLRJpJ6iQxnVw4OnB7MoM9g==",
      "license": "MIT",
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/caseless": {
      "version": "0.12.5",
      "resolved": "https://registry.npmjs.org/@types/caseless/-/caseless-0.12.5.tgz",
      "integrity": "sha512-hWtVTC2q7hc7xZ/RLbxapMvDMgUnDvKvMOpKal4DrMyfGBUfB1oKaZlIRr6mJL+If3bAP6sV/QneGzF6tJjZDg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/connect": {
      "version": "3.4.38",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/cors": {
      "version": "2.8.19",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.19.tgz",
      "integrity": "sha512-mFNylyeyqN93lfe/9CSxOGREz8cpzAhH+E93xJ4xWQf62V8sQ/24reV2nyzUWM6H6Xji+GGHpkbLe7pVoUEskg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/express": {
      "version": "4.17.23",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.23.tgz",
      "integrity": "sha512-Crp6WY9aTYP3qPi2wGDo9iUe/rceX01UMhnF1jmwDcKCFM6cx7YhGP/Mpr3y9AASpfHixIG0E6azCcL5OcDHsQ==",
      "license": "MIT",
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "4.19.6",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.19.6.tgz",
      "integrity": "sha512-N4LZ2xG7DatVqhCZzOGb1Yi5lMbXSZcmdLDe9EzSndPV2HpWYWzRbaerl2n27irrm94EPpprqa8KpskPT085+A==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/http-errors": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.5.tgz",
      "integrity": "sha512-r8Tayk8HJnX0FztbZN7oVqGccWgw98T/0neJphO91KkmOzug1KkofZURD4UaD5uH8AqcFLfdPErnBod0u71/qg==",
      "license": "MIT"
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
      "integrity": "sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.3.tgz",
      "integrity": "sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.4.tgz",
      "integrity": "sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/jsonwebtoken": {
      "version": "9.0.10",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.10.tgz",
      "integrity": "sha512-asx5hIG9Qmf/1oStypjanR7iKTv0gXQ1Ov/jfrX6kS/EO0OFni8orbmGCn0672NHR3kXHwpAwR+B368ZGN/2rA==",
      "license": "MIT",
      "dependencies": {
        "@types/ms": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/lodash": {
      "version": "4.17.19",
      "resolved": "https://registry.npmjs.org/@types/lodash/-/lodash-4.17.19.tgz",
      "integrity": "sha512-NYqRyg/hIQrYPT9lbOeYc3kIRabJDn/k4qQHIXUpx88CBDww2fD15Sg5kbXlW86zm2XEW4g0QxkTI3/Kfkc7xQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/long": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/@types/long/-/long-4.0.2.tgz",
      "integrity": "sha512-MqTGEo5bj5t157U6fA/BiDynNkn0YknVdh48CMPkTSpFTVmvao5UQmm7uEF6xBEo7qIMAlY/JSleYaE6VOdpaA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/mime": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
      "license": "MIT"
    },
    "node_modules/@types/ms": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
      "integrity": "sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==",
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "22.15.33",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.15.33.tgz",
      "integrity": "sha512-wzoocdnnpSxZ+6CjW4ADCK1jVmd1S/J3ArNWfn8FDDQtRm8dkDg7TA+mvek2wNrfCgwuZxqEOiB9B1XCJ6+dbw==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/@types/qs": {
      "version": "6.14.0",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.14.0.tgz",
      "integrity": "sha512-eOunJqu0K1923aExK6y8p6fsihYEn/BYuQ4g0CxAAgFc4b/ZLN4CrsRZ55srTdqoiLzU2B2evC+apEIxprEzkQ==",
      "license": "MIT"
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
      "license": "MIT"
    },
    "node_modules/@types/request": {
      "version": "2.48.12",
      "resolved": "https://registry.npmjs.org/@types/request/-/request-2.48.12.tgz",
      "integrity": "sha512-G3sY+NpsA9jnwm0ixhAFQSJ3Q9JkpLZpJbI3GMv0mIAT0y3mRabYeINzal5WOChIiaTEGQYlHOKgkaM9EisWHw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/caseless": "*",
        "@types/node": "*",
        "@types/tough-cookie": "*",
        "form-data": "^2.5.0"
      }
    },
    "node_modules/@types/send": {
      "version": "0.17.5",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.5.tgz",
      "integrity": "sha512-z6F2D3cOStZvuk2SaP6YrwkNO65iTZcwA2ZkSABegdkAh/lf+Aa/YQndZVfmEXT5vgAp6zv06VQ3ejSVjAny4w==",
      "license": "MIT",
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.8",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.8.tgz",
      "integrity": "sha512-roei0UY3LhpOJvjbIP6ZZFngyLKl5dskOtDhxY5THRSpO+ZI+nzJ+m5yUMzGrp89YRa7lvknKkMYjqQFGwA7Sg==",
      "license": "MIT",
      "dependencies": {
        "@types/http-errors": "*",
        "@types/node": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/stack-utils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz",
      "integrity": "sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/@types/tough-cookie": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/@types/tough-cookie/-/tough-cookie-4.0.5.tgz",
      "integrity": "sha512-/Ad8+nIOV7Rl++6f1BdKxFSMgmoqEoYbHRpPcx3JEfv8VRsQe9Z4mCXeJBzxs7mbHY/XOZZuXlRNfhpVPbs6ZA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/yargs": {
      "version": "17.0.33",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.33.tgz",
      "integrity": "sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "21.0.3",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz",
      "integrity": "sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/@ungap/structured-clone": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz",
      "integrity": "sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/@unrs/resolver-binding-android-arm-eabi": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-android-arm-eabi/-/resolver-binding-android-arm-eabi-1.9.2.tgz",
      "integrity": "sha512-tS+lqTU3N0kkthU+rYp0spAYq15DU8ld9kXkaKg9sbQqJNF+WPMuNHZQGCgdxrUOEO0j22RKMwRVhF1HTl+X8A==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-android-arm64": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-android-arm64/-/resolver-binding-android-arm64-1.9.2.tgz",
      "integrity": "sha512-MffGiZULa/KmkNjHeuuflLVqfhqLv1vZLm8lWIyeADvlElJ/GLSOkoUX+5jf4/EGtfwrNFcEaB8BRas03KT0/Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-darwin-arm64": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-darwin-arm64/-/resolver-binding-darwin-arm64-1.9.2.tgz",
      "integrity": "sha512-dzJYK5rohS1sYl1DHdJ3mwfwClJj5BClQnQSyAgEfggbUwA9RlROQSSbKBLqrGfsiC/VyrDPtbO8hh56fnkbsQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-darwin-x64": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-darwin-x64/-/resolver-binding-darwin-x64-1.9.2.tgz",
      "integrity": "sha512-gaIMWK+CWtXcg9gUyznkdV54LzQ90S3X3dn8zlh+QR5Xy7Y+Efqw4Rs4im61K1juy4YNb67vmJsCDAGOnIeffQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-freebsd-x64": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-freebsd-x64/-/resolver-binding-freebsd-x64-1.9.2.tgz",
      "integrity": "sha512-S7QpkMbVoVJb0xwHFwujnwCAEDe/596xqY603rpi/ioTn9VDgBHnCCxh+UFrr5yxuMH+dliHfjwCZJXOPJGPnw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-linux-arm-gnueabihf": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm-gnueabihf/-/resolver-binding-linux-arm-gnueabihf-1.9.2.tgz",
      "integrity": "sha512-+XPUMCuCCI80I46nCDFbGum0ZODP5NWGiwS3Pj8fOgsG5/ctz+/zzuBlq/WmGa+EjWZdue6CF0aWWNv84sE1uw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-linux-arm-musleabihf": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm-musleabihf/-/resolver-binding-linux-arm-musleabihf-1.9.2.tgz",
      "integrity": "sha512-sqvUyAd1JUpwbz33Ce2tuTLJKM+ucSsYpPGl2vuFwZnEIg0CmdxiZ01MHQ3j6ExuRqEDUCy8yvkDKvjYFPb8Zg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-linux-arm64-gnu": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm64-gnu/-/resolver-binding-linux-arm64-gnu-1.9.2.tgz",
      "integrity": "sha512-UYA0MA8ajkEDCFRQdng/FVx3F6szBvk3EPnkTTQuuO9lV1kPGuTB+V9TmbDxy5ikaEgyWKxa4CI3ySjklZ9lFA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-linux-arm64-musl": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm64-musl/-/resolver-binding-linux-arm64-musl-1.9.2.tgz",
      "integrity": "sha512-P/CO3ODU9YJIHFqAkHbquKtFst0COxdphc8TKGL5yCX75GOiVpGqd1d15ahpqu8xXVsqP4MGFP2C3LRZnnL5MA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-linux-ppc64-gnu": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-ppc64-gnu/-/resolver-binding-linux-ppc64-gnu-1.9.2.tgz",
      "integrity": "sha512-uKStFlOELBxBum2s1hODPtgJhY4NxYJE9pAeyBgNEzHgTqTiVBPjfTlPFJkfxyTjQEuxZbbJlJnMCrRgD7ubzw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-linux-riscv64-gnu": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-riscv64-gnu/-/resolver-binding-linux-riscv64-gnu-1.9.2.tgz",
      "integrity": "sha512-LkbNnZlhINfY9gK30AHs26IIVEZ9PEl9qOScYdmY2o81imJYI4IMnJiW0vJVtXaDHvBvxeAgEy5CflwJFIl3tQ==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-linux-riscv64-musl": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-riscv64-musl/-/resolver-binding-linux-riscv64-musl-1.9.2.tgz",
      "integrity": "sha512-vI+e6FzLyZHSLFNomPi+nT+qUWN4YSj8pFtQZSFTtmgFoxqB6NyjxSjAxEC1m93qn6hUXhIsh8WMp+fGgxCoRg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-linux-s390x-gnu": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-s390x-gnu/-/resolver-binding-linux-s390x-gnu-1.9.2.tgz",
      "integrity": "sha512-sSO4AlAYhSM2RAzBsRpahcJB1msc6uYLAtP6pesPbZtptF8OU/CbCPhSRW6cnYOGuVmEmWVW5xVboAqCnWTeHQ==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-linux-x64-gnu": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-x64-gnu/-/resolver-binding-linux-x64-gnu-1.9.2.tgz",
      "integrity": "sha512-jkSkwch0uPFva20Mdu8orbQjv2A3G88NExTN2oPTI1AJ+7mZfYW3cDCTyoH6OnctBKbBVeJCEqh0U02lTkqD5w==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-linux-x64-musl": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-x64-musl/-/resolver-binding-linux-x64-musl-1.9.2.tgz",
      "integrity": "sha512-Uk64NoiTpQbkpl+bXsbeyOPRpUoMdcUqa+hDC1KhMW7aN1lfW8PBlBH4mJ3n3Y47dYE8qi0XTxy1mBACruYBaw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-wasm32-wasi": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-wasm32-wasi/-/resolver-binding-wasm32-wasi-1.9.2.tgz",
      "integrity": "sha512-EpBGwkcjDicjR/ybC0g8wO5adPNdVuMrNalVgYcWi+gYtC1XYNuxe3rufcO7dA76OHGeVabcO6cSkPJKVcbCXQ==",
      "cpu": [
        "wasm32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "peer": true,
      "dependencies": {
        "@napi-rs/wasm-runtime": "^0.2.11"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@unrs/resolver-binding-win32-arm64-msvc": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-win32-arm64-msvc/-/resolver-binding-win32-arm64-msvc-1.9.2.tgz",
      "integrity": "sha512-EdFbGn7o1SxGmN6aZw9wAkehZJetFPao0VGZ9OMBwKx6TkvDuj6cNeLimF/Psi6ts9lMOe+Dt6z19fZQ9Ye2fw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-win32-ia32-msvc": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-win32-ia32-msvc/-/resolver-binding-win32-ia32-msvc-1.9.2.tgz",
      "integrity": "sha512-JY9hi1p7AG+5c/dMU8o2kWemM8I6VZxfGwn1GCtf3c5i+IKcMo2NQ8OjZ4Z3/itvY/Si3K10jOBQn7qsD/whUA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "peer": true
    },
    "node_modules/@unrs/resolver-binding-win32-x64-msvc": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-win32-x64-msvc/-/resolver-binding-win32-x64-msvc-1.9.2.tgz",
      "integrity": "sha512-ryoo+EB19lMxAd80ln9BVf8pdOAxLb97amrQ3SFN9OCRn/5M5wvwDgAe4i8ZjhpbiHoDeP8yavcTEnpKBo7lZg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "peer": true
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/agent-base": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.3.tgz",
      "integrity": "sha512-jRR5wdylq8CkOe6hei19GGZnxM6rBGwFl3Bg0YItGDimvjGtAvdZk4Pu6Cl4u4Igsws4a1fd1Vq3ezrhn4KmFw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "type-fest": "^0.21.3"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-escapes/node_modules/type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/arrify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
      "integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/async-retry": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/async-retry/-/async-retry-1.3.3.tgz",
      "integrity": "sha512-wfr/jstw9xNi/0teMHrRW7dsz3Lt5ARhYNZ2ewpadnhaIp5mbALhOAP+EAdsC7t4Z6wqsDVv9+W6gm1Dk9mEyw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "retry": "0.13.1"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/babel-jest": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-30.0.2.tgz",
      "integrity": "sha512-A5kqR1/EUTidM2YC2YMEUDP2+19ppgOwK0IAd9Swc3q2KqFb5f9PtRUXVeZcngu0z5mDMyZ9zH2huJZSOMLiTQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/transform": "30.0.2",
        "@types/babel__core": "^7.20.5",
        "babel-plugin-istanbul": "^7.0.0",
        "babel-preset-jest": "30.0.1",
        "chalk": "^4.1.2",
        "graceful-fs": "^4.2.11",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.11.0"
      }
    },
    "node_modules/babel-plugin-istanbul": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-7.0.0.tgz",
      "integrity": "sha512-C5OzENSx/A+gt7t4VH1I2XsflxyPUmXRFPKBxt33xncdOmq7oROVM3bZv9Ysjjkv8OJYDMa+tKuKMvqU/H3xdw==",
      "dev": true,
      "license": "BSD-3-Clause",
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.3",
        "istanbul-lib-instrument": "^6.0.2",
        "test-exclude": "^6.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/babel-plugin-jest-hoist": {
      "version": "30.0.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-30.0.1.tgz",
      "integrity": "sha512-zTPME3pI50NsFW8ZBaVIOeAxzEY7XHlmWeXXu9srI+9kNfzCUTy8MFan46xOGZY8NZThMqq+e3qZUKsvXbasnQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.27.3",
        "@types/babel__core": "^7.20.5"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/babel-preset-current-node-syntax": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.1.0.tgz",
      "integrity": "sha512-ldYss8SbBlWva1bs28q78Ju5Zq1F+8BrqBZZ0VFhLBvhh6lCpC2o3gDJi/5DRLs9FgYZCnmPYIVFU4lRXCkyUw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.12.13",
        "@babel/plugin-syntax-class-static-block": "^7.14.5",
        "@babel/plugin-syntax-import-attributes": "^7.24.7",
        "@babel/plugin-syntax-import-meta": "^7.10.4",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5",
        "@babel/plugin-syntax-top-level-await": "^7.14.5"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/babel-preset-jest": {
      "version": "30.0.1",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-30.0.1.tgz",
      "integrity": "sha512-+YHejD5iTWI46cZmcc/YtX4gaKBtdqCHCVfuVinizVpbmyjO3zYmeuyFdfA8duRqQZfgCAMlsfmkVbJ+e2MAJw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "babel-plugin-jest-hoist": "30.0.1",
        "babel-preset-current-node-syntax": "^1.1.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.11.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "optional": true
    },
    "node_modules/bignumber.js": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.3.0.tgz",
      "integrity": "sha512-EM7aMFTXbptt/wZdMlBv2t8IViwQL+h6SLHosp8Yf0dqJMTnY6iL32opnAB6kAdL0SZPuvcAzFr31o0c/R3/RA==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": "*"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/body-parser/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/body-parser/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.1",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "caniuse-lite": "^1.0.30001726",
        "electron-to-chromium": "^1.5.173",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "dev": true,
      "license": "Apache-2.0",
      "peer": true,
      "dependencies": {
        "node-int64": "^0.4.0"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001726",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001726.tgz",
      "integrity": "sha512-VQAUIUzBiZ/UnlM28fSp2CRF3ivUn1BWEvxMcVTNwpw91Py1pGbPIyIKtd+tzct9C3ouceCVdGAXxZOpZAsgdw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0",
      "peer": true
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ci-info": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-4.2.0.tgz",
      "integrity": "sha512-cYY9mypksY8NRqgDB1XD1RiJL338v/551niynFTGkZOO2LHuB2OmOYxDIe/ttN9AHwrqdum1360G3ald0W9kCg==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cjs-module-lexer": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-2.1.0.tgz",
      "integrity": "sha512-UX0OwmYRYQQetfrLEZeewIFFI+wSTofC+pMBLNuH3RUuu/xzG1oz84UCEDOSoQlN3fZ4+AzmV50ZYvGqkMh9yA==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "devOptional": true,
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/cliui/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/cliui/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cliui/node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      }
    },
    "node_modules/collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/dedent": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.6.0.tgz",
      "integrity": "sha512-F1Z+5UCFpmQUzJa11agbyPVMbpgT/qA3/SKyJ1jyBgm7dUcUEa8v9JwDkerSQXfakBwFljIxhOJqGkjUwZ9FSA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "peerDependencies": {
        "babel-plugin-macros": "^3.1.0"
      },
      "peerDependenciesMeta": {
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/duplexify": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/duplexify/-/duplexify-4.1.3.tgz",
      "integrity": "sha512-M3BmBhwJRZsSx38lZyhE53Csddgzl5R7xGJNk7CVddZD6CcmwMCH8J+7AprIrQKH7TonKxaCjcv27Qmf+sQ+oA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "end-of-stream": "^1.4.1",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1",
        "stream-shift": "^1.0.2"
      }
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.177",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.177.tgz",
      "integrity": "sha512-7EH2G59nLsEMj97fpDuvVcYi6lwTcM1xuWw3PssD8xzboAW7zj7iB3COEEEATUfjLHrs5uKBLQT03V/8URx06g==",
      "dev": true,
      "license": "ISC",
      "peer": true
    },
    "node_modules/emittery": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/end-of-stream": {
      "version": "1.4.5",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.5.tgz",
      "integrity": "sha512-ooEGc6HP26xXq/N+GCGOT0JKCLDGrq2bQUZrQ7gyrJiZANJ/8YDTxTpQBXGMn+WbIQXNVpyWymm7KYVICQnyOg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.1.tgz",
      "integrity": "sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==",
      "deprecated": "This version is no longer supported. Please see https://eslint.org/version-support for other options.",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.6.1",
        "@eslint/eslintrc": "^2.1.4",
        "@eslint/js": "8.57.1",
        "@humanwhocodes/config-array": "^0.13.0",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@nodelib/fs.walk": "^1.2.8",
        "@ungap/structured-clone": "^1.2.0",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "doctrine": "^3.0.0",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^7.2.2",
        "eslint-visitor-keys": "^3.4.3",
        "espree": "^9.6.1",
        "esquery": "^1.4.2",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^6.0.1",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "globals": "^13.19.0",
        "graphemer": "^1.4.0",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "is-path-inside": "^3.0.3",
        "js-yaml": "^4.1.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.4.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3",
        "strip-ansi": "^6.0.1",
        "text-table": "^0.2.0"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-config-google": {
      "version": "0.14.0",
      "resolved": "https://registry.npmjs.org/eslint-config-google/-/eslint-config-google-0.14.0.tgz",
      "integrity": "sha512-WsbX4WbjuMvTdeVL6+J3rK1RGhCTqjsFjX7UMSMgZiyxxaNLkoJENbrGExzERFeoTpGw3F3FypTiWAP9ZXzkEw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.10.0"
      },
      "peerDependencies": {
        "eslint": ">=5.16.0"
      }
    },
    "node_modules/eslint-scope": {
      "version": "7.2.2",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "9.6.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.9.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^3.4.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "dev": true,
      "license": "BSD-2-Clause",
      "peer": true,
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/execa/node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "dev": true,
      "license": "ISC",
      "peer": true
    },
    "node_modules/exit-x": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/exit-x/-/exit-x-0.2.2.tgz",
      "integrity": "sha512-+I6B/IkJc1o/2tiURyz/ivu/O0nKNEArIUB5O7zBrlDVJr22SCLH3xTeEry428LvFhRzIA1g8izguxJ/gbNcVQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/expect": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/expect/-/expect-30.0.3.tgz",
      "integrity": "sha512-HXg6NvK35/cSYZCUKAtmlgCFyqKM4frEPbzrav5hRqb0GMz0E0lS5hfzYjSaiaE5ysnp/qI2aeZkeyeIAOeXzQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/expect-utils": "30.0.3",
        "@jest/get-type": "30.0.1",
        "jest-matcher-utils": "30.0.3",
        "jest-message-util": "30.0.2",
        "jest-mock": "30.0.2",
        "jest-util": "30.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-xml-parser": {
      "version": "4.5.3",
      "resolved": "https://registry.npmjs.org/fast-xml-parser/-/fast-xml-parser-4.5.3.tgz",
      "integrity": "sha512-RKihhV+SHsIUGXObeVy9AXiBbFwkVk7Syp8XgwN5U3JV416+Gwp/GO9i0JYKmikykgz/UHRrrV4ROuZEo/T0ig==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/NaturalIntelligence"
        }
      ],
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "strnum": "^1.1.1"
      },
      "bin": {
        "fxparser": "src/cli/cli.js"
      }
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/faye-websocket": {
      "version": "0.11.4",
      "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.4.tgz",
      "integrity": "sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==",
      "license": "Apache-2.0",
      "dependencies": {
        "websocket-driver": ">=0.5.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "dev": true,
      "license": "Apache-2.0",
      "peer": true,
      "dependencies": {
        "bser": "2.1.1"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^3.0.4"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/finalhandler/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/finalhandler/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/firebase-admin": {
      "version": "12.0.0",
      "resolved": "https://registry.npmjs.org/firebase-admin/-/firebase-admin-12.0.0.tgz",
      "integrity": "sha512-wBrrSSsKV++/+O8E7O/C7/wL0nbG/x4Xv4yatz/+sohaZ+LsnWtYUcrd3gZutO86hLpDex7xgyrkKbgulmtVyQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@fastify/busboy": "^1.2.1",
        "@firebase/database-compat": "^1.0.2",
        "@firebase/database-types": "^1.0.0",
        "@types/node": "^20.10.3",
        "jsonwebtoken": "^9.0.0",
        "jwks-rsa": "^3.0.1",
        "node-forge": "^1.3.1",
        "uuid": "^9.0.0"
      },
      "engines": {
        "node": ">=14"
      },
      "optionalDependencies": {
        "@google-cloud/firestore": "^7.1.0",
        "@google-cloud/storage": "^7.7.0"
      }
    },
    "node_modules/firebase-admin/node_modules/@types/node": {
      "version": "20.19.1",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.1.tgz",
      "integrity": "sha512-jJD50LtlD2dodAEO653i3YF04NWak6jN3ky+Ri3Em3mGR39/glWiboM/IePaRbgwSfqM1TpGXfAg8ohn/4dTgA==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/firebase-functions": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/firebase-functions/-/firebase-functions-5.0.0.tgz",
      "integrity": "sha512-iGG41MavOS+RtEsbcq2j/ltQ8L2Oji71dRpwVur+meIQWkvXCYb2QJtnyp0ryQVnV3NyjV+3Vdx7OnmD+Hanuw==",
      "license": "MIT",
      "dependencies": {
        "@types/cors": "^2.8.5",
        "@types/express": "4.17.3",
        "cors": "^2.8.5",
        "express": "^4.17.1",
        "protobufjs": "^7.2.2"
      },
      "bin": {
        "firebase-functions": "lib/bin/firebase-functions.js"
      },
      "engines": {
        "node": ">=14.10.0"
      },
      "peerDependencies": {
        "firebase-admin": "^11.10.0 || ^12.0.0"
      }
    },
    "node_modules/firebase-functions-test": {
      "version": "3.4.1",
      "resolved": "https://registry.npmjs.org/firebase-functions-test/-/firebase-functions-test-3.4.1.tgz",
      "integrity": "sha512-qAq0oszrBGdf4bnCF6t4FoSgMsepeIXh0Pi/FhikSE6e+TvKKGpfrfUP/5pFjJZxFcLsweoau88KydCql4xSeg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/lodash": "^4.14.104",
        "lodash": "^4.17.5",
        "ts-deepmerge": "^2.0.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "firebase-admin": "^8.0.0 || ^9.0.0 || ^10.0.0 || ^11.0.0 || ^12.0.0 || ^13.0.0",
        "firebase-functions": ">=4.9.0",
        "jest": ">=28.0.0"
      }
    },
    "node_modules/firebase-functions/node_modules/@types/express": {
      "version": "4.17.3",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.3.tgz",
      "integrity": "sha512-I8cGRJj3pyOLs/HndoP+25vOqhqWkAZsWMEmq1qXy/b/M3ppufecUwaK2/TVDVxcV61/iSdhykUjQQ2DLSrTdg==",
      "license": "MIT",
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/flat-cache": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
      "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.3",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/foreground-child": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
      "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "dependencies": {
        "cross-spawn": "^7.0.6",
        "signal-exit": "^4.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/form-data": {
      "version": "2.5.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.5.3.tgz",
      "integrity": "sha512-XHIrMD0NpDrNM/Ckf7XJiBbLl57KEhT3+i3yY+eWm+cqYZJQTZrKo8Y8AWKnuV5GT4scfuUGt9LzNoIx3dU1nQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "mime-types": "^2.1.35",
        "safe-buffer": "^5.2.1"
      },
      "engines": {
        "node": ">= 0.12"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "peer": true,
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functional-red-black-tree": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
      "integrity": "sha512-dsKNQNdj6xA3T+QlADDA7mOSlX0qiMINjn0cgr+eGHGsbSHzTabcIogz2+p/iqP1Xs6EP/sS2SbqH+brGTbq0g==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/gaxios": {
      "version": "6.7.1",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-6.7.1.tgz",
      "integrity": "sha512-LDODD4TMYx7XXdpwxAVRAIAuB0bzv0s+ywFonY46k126qzQHT9ygyoa9tncmOiQmmDrik65UYsEkv3lbfqQ3yQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "extend": "^3.0.2",
        "https-proxy-agent": "^7.0.1",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.9",
        "uuid": "^9.0.1"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gcp-metadata": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-6.1.1.tgz",
      "integrity": "sha512-a4tiq7E0/5fTjxPAaH4jpjkSv/uCaU2p5KC6HVGrvl0cDjA8iBZv4vv1gyzlmK0ZUKqwpOyQMKzZQe3lTit77A==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "gaxios": "^6.1.1",
        "google-logging-utils": "^0.0.2",
        "json-bigint": "^1.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "devOptional": true,
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/glob": {
      "version": "10.4.5",
      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "dependencies": {
        "foreground-child": "^3.1.0",
        "jackspeak": "^3.1.2",
        "minimatch": "^9.0.4",
        "minipass": "^7.1.2",
        "package-json-from-dist": "^1.0.0",
        "path-scurry": "^1.11.1"
      },
      "bin": {
        "glob": "dist/esm/bin.mjs"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/glob/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/glob/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/globals": {
      "version": "13.24.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/google-auth-library": {
      "version": "9.15.1",
      "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-9.15.1.tgz",
      "integrity": "sha512-Jb6Z0+nvECVz+2lzSMt9u98UsoakXxA2HGHMCxh+so3n90XgYWkq5dur19JAJV7ONiJY22yBTyJB1TSkvPq9Ng==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        "gaxios": "^6.1.1",
        "gcp-metadata": "^6.1.0",
        "gtoken": "^7.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/google-gax": {
      "version": "4.6.1",
      "resolved": "https://registry.npmjs.org/google-gax/-/google-gax-4.6.1.tgz",
      "integrity": "sha512-V6eky/xz2mcKfAd1Ioxyd6nmA61gao3n01C+YeuIwu3vzM9EDR6wcVzMSIbLMDXWeoi9SHYctXuKYC5uJUT3eQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@grpc/grpc-js": "^1.10.9",
        "@grpc/proto-loader": "^0.7.13",
        "@types/long": "^4.0.0",
        "abort-controller": "^3.0.0",
        "duplexify": "^4.0.0",
        "google-auth-library": "^9.3.0",
        "node-fetch": "^2.7.0",
        "object-hash": "^3.0.0",
        "proto3-json-serializer": "^2.0.2",
        "protobufjs": "^7.3.2",
        "retry-request": "^7.0.0",
        "uuid": "^9.0.1"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/google-logging-utils": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/google-logging-utils/-/google-logging-utils-0.0.2.tgz",
      "integrity": "sha512-NEgUnEcBiP5HrPzufUkBzJOD/Sxsco3rLNo1F1TNf7ieU8ryUzBhqba8r756CjLX7rn3fHl6iLEwPYuqpoKgQQ==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "dev": true,
      "license": "ISC",
      "peer": true
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/gtoken": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-7.1.0.tgz",
      "integrity": "sha512-pCcEwRi+TKpMlxAQObHDQ56KawURgyAf6jtIY046fJ5tIv3zDe/LEIubckAO8fj6JnAxLdmWkUfNyulQ2iKdEw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "gaxios": "^6.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/html-entities": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/html-entities/-/html-entities-2.6.0.tgz",
      "integrity": "sha512-kig+rMn/QOVRvr7c86gQ8lWXq+Hkv6CbAH1hLu+RG338StTpE8Z0b44SDVaqVu7HGKf27frdmUYEs9hTUX/cLQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/mdevils"
        },
        {
          "type": "patreon",
          "url": "https://patreon.com/mdevils"
        }
      ],
      "license": "MIT",
      "optional": true
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-parser-js": {
      "version": "0.5.10",
      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.10.tgz",
      "integrity": "sha512-Pysuw9XpUq5dVc/2SMHpuTY01RFl8fttgcyunjL7eEMhGM3cI4eOmiCycJDVCo/7O7ClfQD3SaI6ftDzqOXYMA==",
      "license": "MIT"
    },
    "node_modules/http-proxy-agent": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-5.0.0.tgz",
      "integrity": "sha512-n2hY8YdoRE1i7r6M0w9DIw5GgZN0G25P8zLCRQ8rjXtTU3vsNFBI/vWK/UIeE6g5MUUz6avwAPXmL6Fy9D/90w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@tootallnate/once": "2",
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/http-proxy-agent/node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "agent-base": "^7.1.2",
        "debug": "4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "dev": true,
      "license": "Apache-2.0",
      "peer": true,
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/import-local": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-6.0.3.tgz",
      "integrity": "sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==",
      "dev": true,
      "license": "BSD-3-Clause",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.23.9",
        "@babel/parser": "^7.23.9",
        "@istanbuljs/schema": "^0.1.3",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-instrument/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "dev": true,
      "license": "BSD-3-Clause",
      "peer": true,
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "5.0.6",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-5.0.6.tgz",
      "integrity": "sha512-yg2d+Em4KizZC5niWhQaIomgf5WlL4vOOjZ5xGCmF8SnPE/mDWWXgvRExdcpCgh9lLRRa1/fSYp2ymmbJ1pI+A==",
      "dev": true,
      "license": "BSD-3-Clause",
      "peer": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.23",
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-reports": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.7.tgz",
      "integrity": "sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==",
      "dev": true,
      "license": "BSD-3-Clause",
      "peer": true,
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jackspeak": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "peer": true,
      "dependencies": {
        "@isaacs/cliui": "^8.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      },
      "optionalDependencies": {
        "@pkgjs/parseargs": "^0.11.0"
      }
    },
    "node_modules/jest": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/jest/-/jest-30.0.3.tgz",
      "integrity": "sha512-Uy8xfeE/WpT2ZLGDXQmaYNzw2v8NUKuYeKGtkS6sDxwsdQihdgYCXaKIYnph1h95DN5H35ubFDm0dfmsQnjn4Q==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/core": "30.0.3",
        "@jest/types": "30.0.1",
        "import-local": "^3.2.0",
        "jest-cli": "30.0.3"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-changed-files": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-30.0.2.tgz",
      "integrity": "sha512-Ius/iRST9FKfJI+I+kpiDh8JuUlAISnRszF9ixZDIqJF17FckH5sOzKC8a0wd0+D+8em5ADRHA5V5MnfeDk2WA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "execa": "^5.1.1",
        "jest-util": "30.0.2",
        "p-limit": "^3.1.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-circus": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-30.0.3.tgz",
      "integrity": "sha512-rD9qq2V28OASJHJWDRVdhoBdRs6k3u3EmBzDYcyuMby8XCO3Ll1uq9kyqM41ZcC4fMiPulMVh3qMw0cBvDbnyg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/environment": "30.0.2",
        "@jest/expect": "30.0.3",
        "@jest/test-result": "30.0.2",
        "@jest/types": "30.0.1",
        "@types/node": "*",
        "chalk": "^4.1.2",
        "co": "^4.6.0",
        "dedent": "^1.6.0",
        "is-generator-fn": "^2.1.0",
        "jest-each": "30.0.2",
        "jest-matcher-utils": "30.0.3",
        "jest-message-util": "30.0.2",
        "jest-runtime": "30.0.3",
        "jest-snapshot": "30.0.3",
        "jest-util": "30.0.2",
        "p-limit": "^3.1.0",
        "pretty-format": "30.0.2",
        "pure-rand": "^7.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.6"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-cli": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-30.0.3.tgz",
      "integrity": "sha512-UWDSj0ayhumEAxpYRlqQLrssEi29kdQ+kddP94AuHhZknrE+mT0cR0J+zMHKFe9XPfX3dKQOc2TfWki3WhFTsA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/core": "30.0.3",
        "@jest/test-result": "30.0.2",
        "@jest/types": "30.0.1",
        "chalk": "^4.1.2",
        "exit-x": "^0.2.2",
        "import-local": "^3.2.0",
        "jest-config": "30.0.3",
        "jest-util": "30.0.2",
        "jest-validate": "30.0.2",
        "yargs": "^17.7.2"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-30.0.3.tgz",
      "integrity": "sha512-j0L4oRCtJwNyZktXIqwzEiDVQXBbQ4dqXuLD/TZdn++hXIcIfZmjHgrViEy5s/+j4HvITmAXbexVZpQ/jnr0bg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.27.4",
        "@jest/get-type": "30.0.1",
        "@jest/pattern": "30.0.1",
        "@jest/test-sequencer": "30.0.2",
        "@jest/types": "30.0.1",
        "babel-jest": "30.0.2",
        "chalk": "^4.1.2",
        "ci-info": "^4.2.0",
        "deepmerge": "^4.3.1",
        "glob": "^10.3.10",
        "graceful-fs": "^4.2.11",
        "jest-circus": "30.0.3",
        "jest-docblock": "30.0.1",
        "jest-environment-node": "30.0.2",
        "jest-regex-util": "30.0.1",
        "jest-resolve": "30.0.2",
        "jest-runner": "30.0.3",
        "jest-util": "30.0.2",
        "jest-validate": "30.0.2",
        "micromatch": "^4.0.8",
        "parse-json": "^5.2.0",
        "pretty-format": "30.0.2",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      },
      "peerDependencies": {
        "@types/node": "*",
        "esbuild-register": ">=3.4.0",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "esbuild-register": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/jest-diff": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-30.0.3.tgz",
      "integrity": "sha512-Q1TAV0cUcBTic57SVnk/mug0/ASyAqtSIOkr7RAlxx97llRYsM74+E8N5WdGJUlwCKwgxPAkVjKh653h1+HA9A==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/diff-sequences": "30.0.1",
        "@jest/get-type": "30.0.1",
        "chalk": "^4.1.2",
        "pretty-format": "30.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-docblock": {
      "version": "30.0.1",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-30.0.1.tgz",
      "integrity": "sha512-/vF78qn3DYphAaIc3jy4gA7XSAz167n9Bm/wn/1XhTLW7tTBIzXtCJpb/vcmc73NIIeeohCbdL94JasyXUZsGA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "detect-newline": "^3.1.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-each": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-30.0.2.tgz",
      "integrity": "sha512-ZFRsTpe5FUWFQ9cWTMguCaiA6kkW5whccPy9JjD1ezxh+mJeqmz8naL8Fl/oSbNJv3rgB0x87WBIkA5CObIUZQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/get-type": "30.0.1",
        "@jest/types": "30.0.1",
        "chalk": "^4.1.2",
        "jest-util": "30.0.2",
        "pretty-format": "30.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-environment-node": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-30.0.2.tgz",
      "integrity": "sha512-XsGtZ0H+a70RsxAQkKuIh0D3ZlASXdZdhpOSBq9WRPq6lhe0IoQHGW0w9ZUaPiZQ/CpkIdprvlfV1QcXcvIQLQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/environment": "30.0.2",
        "@jest/fake-timers": "30.0.2",
        "@jest/types": "30.0.1",
        "@types/node": "*",
        "jest-mock": "30.0.2",
        "jest-util": "30.0.2",
        "jest-validate": "30.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-haste-map": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-30.0.2.tgz",
      "integrity": "sha512-telJBKpNLeCb4MaX+I5k496556Y2FiKR/QLZc0+MGBYl4k3OO0472drlV2LUe7c1Glng5HuAu+5GLYp//GpdOQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/types": "30.0.1",
        "@types/node": "*",
        "anymatch": "^3.1.3",
        "fb-watchman": "^2.0.2",
        "graceful-fs": "^4.2.11",
        "jest-regex-util": "30.0.1",
        "jest-util": "30.0.2",
        "jest-worker": "30.0.2",
        "micromatch": "^4.0.8",
        "walker": "^1.0.8"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.3"
      }
    },
    "node_modules/jest-leak-detector": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-30.0.2.tgz",
      "integrity": "sha512-U66sRrAYdALq+2qtKffBLDWsQ/XoNNs2Lcr83sc9lvE/hEpNafJlq2lXCPUBMNqamMECNxSIekLfe69qg4KMIQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/get-type": "30.0.1",
        "pretty-format": "30.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-matcher-utils": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-30.0.3.tgz",
      "integrity": "sha512-hMpVFGFOhYmIIRGJ0HgM9htC5qUiJ00famcc9sRFchJJiLZbbVKrAztcgE6VnXLRxA3XZ0bvNA7hQWh3oHXo/A==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/get-type": "30.0.1",
        "chalk": "^4.1.2",
        "jest-diff": "30.0.3",
        "pretty-format": "30.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-message-util": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-30.0.2.tgz",
      "integrity": "sha512-vXywcxmr0SsKXF/bAD7t7nMamRvPuJkras00gqYeB1V0WllxZrbZ0paRr3XqpFU2sYYjD0qAaG2fRyn/CGZ0aw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@jest/types": "30.0.1",
        "@types/stack-utils": "^2.0.3",
        "chalk": "^4.1.2",
        "graceful-fs": "^4.2.11",
        "micromatch": "^4.0.8",
        "pretty-format": "30.0.2",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.6"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-mock": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-30.0.2.tgz",
      "integrity": "sha512-PnZOHmqup/9cT/y+pXIVbbi8ID6U1XHRmbvR7MvUy4SLqhCbwpkmXhLbsWbGewHrV5x/1bF7YDjs+x24/QSvFA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/types": "30.0.1",
        "@types/node": "*",
        "jest-util": "30.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6"
      },
      "peerDependencies": {
        "jest-resolve": "*"
      },
      "peerDependenciesMeta": {
        "jest-resolve": {
          "optional": true
        }
      }
    },
    "node_modules/jest-regex-util": {
      "version": "30.0.1",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-30.0.1.tgz",
      "integrity": "sha512-jHEQgBXAgc+Gh4g0p3bCevgRCVRkB4VB70zhoAE48gxeSr1hfUOsM/C2WoJgVL7Eyg//hudYENbm3Ne+/dRVVA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-resolve": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-30.0.2.tgz",
      "integrity": "sha512-q/XT0XQvRemykZsvRopbG6FQUT6/ra+XV6rPijyjT6D0msOyCvR2A5PlWZLd+fH0U8XWKZfDiAgrUNDNX2BkCw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "chalk": "^4.1.2",
        "graceful-fs": "^4.2.11",
        "jest-haste-map": "30.0.2",
        "jest-pnp-resolver": "^1.2.3",
        "jest-util": "30.0.2",
        "jest-validate": "30.0.2",
        "slash": "^3.0.0",
        "unrs-resolver": "^1.7.11"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-resolve-dependencies": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-30.0.3.tgz",
      "integrity": "sha512-FlL6u7LiHbF0Oe27k7DHYMq2T2aNpPhxnNo75F7lEtu4A6sSw+TKkNNUGNcVckdFoL0RCWREJsC1HsKDwKRZzQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "jest-regex-util": "30.0.1",
        "jest-snapshot": "30.0.3"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-runner": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-30.0.3.tgz",
      "integrity": "sha512-CxYBzu9WStOBBXAKkLXGoUtNOWsiS1RRmUQb6SsdUdTcqVncOau7m8AJ4cW3Mz+YL1O9pOGPSYLyvl8HBdFmkQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/console": "30.0.2",
        "@jest/environment": "30.0.2",
        "@jest/test-result": "30.0.2",
        "@jest/transform": "30.0.2",
        "@jest/types": "30.0.1",
        "@types/node": "*",
        "chalk": "^4.1.2",
        "emittery": "^0.13.1",
        "exit-x": "^0.2.2",
        "graceful-fs": "^4.2.11",
        "jest-docblock": "30.0.1",
        "jest-environment-node": "30.0.2",
        "jest-haste-map": "30.0.2",
        "jest-leak-detector": "30.0.2",
        "jest-message-util": "30.0.2",
        "jest-resolve": "30.0.2",
        "jest-runtime": "30.0.3",
        "jest-util": "30.0.2",
        "jest-watcher": "30.0.2",
        "jest-worker": "30.0.2",
        "p-limit": "^3.1.0",
        "source-map-support": "0.5.13"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-runtime": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-30.0.3.tgz",
      "integrity": "sha512-Xjosq0C48G9XEQOtmgrjXJwPaUPaq3sPJwHDRaiC+5wi4ZWxO6Lx6jNkizK/0JmTulVNuxP8iYwt77LGnfg3/w==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/environment": "30.0.2",
        "@jest/fake-timers": "30.0.2",
        "@jest/globals": "30.0.3",
        "@jest/source-map": "30.0.1",
        "@jest/test-result": "30.0.2",
        "@jest/transform": "30.0.2",
        "@jest/types": "30.0.1",
        "@types/node": "*",
        "chalk": "^4.1.2",
        "cjs-module-lexer": "^2.1.0",
        "collect-v8-coverage": "^1.0.2",
        "glob": "^10.3.10",
        "graceful-fs": "^4.2.11",
        "jest-haste-map": "30.0.2",
        "jest-message-util": "30.0.2",
        "jest-mock": "30.0.2",
        "jest-regex-util": "30.0.1",
        "jest-resolve": "30.0.2",
        "jest-snapshot": "30.0.3",
        "jest-util": "30.0.2",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-snapshot": {
      "version": "30.0.3",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-30.0.3.tgz",
      "integrity": "sha512-F05JCohd3OA1N9+5aEPXA6I0qOfZDGIx0zTq5Z4yMBg2i1p5ELfBusjYAWwTkC12c7dHcbyth4QAfQbS7cRjow==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/core": "^7.27.4",
        "@babel/generator": "^7.27.5",
        "@babel/plugin-syntax-jsx": "^7.27.1",
        "@babel/plugin-syntax-typescript": "^7.27.1",
        "@babel/types": "^7.27.3",
        "@jest/expect-utils": "30.0.3",
        "@jest/get-type": "30.0.1",
        "@jest/snapshot-utils": "30.0.1",
        "@jest/transform": "30.0.2",
        "@jest/types": "30.0.1",
        "babel-preset-current-node-syntax": "^1.1.0",
        "chalk": "^4.1.2",
        "expect": "30.0.3",
        "graceful-fs": "^4.2.11",
        "jest-diff": "30.0.3",
        "jest-matcher-utils": "30.0.3",
        "jest-message-util": "30.0.2",
        "jest-util": "30.0.2",
        "pretty-format": "30.0.2",
        "semver": "^7.7.2",
        "synckit": "^0.11.8"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-snapshot/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jest-util": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-30.0.2.tgz",
      "integrity": "sha512-8IyqfKS4MqprBuUpZNlFB5l+WFehc8bfCe1HSZFHzft2mOuND8Cvi9r1musli+u6F3TqanCZ/Ik4H4pXUolZIg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/types": "30.0.1",
        "@types/node": "*",
        "chalk": "^4.1.2",
        "ci-info": "^4.2.0",
        "graceful-fs": "^4.2.11",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-util/node_modules/picomatch": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/jest-validate": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-30.0.2.tgz",
      "integrity": "sha512-noOvul+SFER4RIvNAwGn6nmV2fXqBq67j+hKGHKGFCmK4ks/Iy1FSrqQNBLGKlu4ZZIRL6Kg1U72N1nxuRCrGQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/get-type": "30.0.1",
        "@jest/types": "30.0.1",
        "camelcase": "^6.3.0",
        "chalk": "^4.1.2",
        "leven": "^3.1.0",
        "pretty-format": "30.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-validate/node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-watcher": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-30.0.2.tgz",
      "integrity": "sha512-vYO5+E7jJuF+XmONr6CrbXdlYrgvZqtkn6pdkgjt/dU64UAdc0v1cAVaAeWtAfUUMScxNmnUjKPUMdCpNVASwg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/test-result": "30.0.2",
        "@jest/types": "30.0.1",
        "@types/node": "*",
        "ansi-escapes": "^4.3.2",
        "chalk": "^4.1.2",
        "emittery": "^0.13.1",
        "jest-util": "30.0.2",
        "string-length": "^4.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-worker": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-30.0.2.tgz",
      "integrity": "sha512-RN1eQmx7qSLFA+o9pfJKlqViwL5wt+OL3Vff/A+/cPsmuw7NPwfgl33AP+/agRmHzPOFgXviRycR9kYwlcRQXg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@types/node": "*",
        "@ungap/structured-clone": "^1.3.0",
        "jest-util": "30.0.2",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.1.1"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/jose": {
      "version": "4.15.9",
      "resolved": "https://registry.npmjs.org/jose/-/jose-4.15.9.tgz",
      "integrity": "sha512-1vUQX+IdDMVPj4k8kOxgUqlcK518yluMuGZwqlr44FS1ppZB/5GWh4rZG89erpOBOJjU/OBsnCVFfapsRz6nEA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/panva"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-bigint": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "bignumber.js": "^9.0.0"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "license": "MIT",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/jwa": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jsonwebtoken/node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jsonwebtoken/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jwa": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.1.tgz",
      "integrity": "sha512-hRF04fqJIP8Abbkq5NKGN0Bbr3JxlQ+qhZufXVr0DvujKy93ZCbXZMHDL4EOtodSbCWxOqR8MS1tXA5hwqCXDg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jwks-rsa": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/jwks-rsa/-/jwks-rsa-3.2.0.tgz",
      "integrity": "sha512-PwchfHcQK/5PSydeKCs1ylNym0w/SSv8a62DgHJ//7x2ZclCoinlsjAfDxAAbpoTPybOum/Jgy+vkvMmKz89Ww==",
      "license": "MIT",
      "dependencies": {
        "@types/express": "^4.17.20",
        "@types/jsonwebtoken": "^9.0.4",
        "debug": "^4.3.4",
        "jose": "^4.15.4",
        "limiter": "^1.1.5",
        "lru-memoizer": "^2.2.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/jws": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
      "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "jwa": "^2.0.0",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/limiter": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/limiter/-/limiter-1.1.5.tgz",
      "integrity": "sha512-FWWMIEOxz3GwUI4Ts/IvgVy6LPvoMPgjMdQ185nN6psJyBJ4yOpzqm695/h5umdLJg2vW3GR5iG11MAkR2AzJA=="
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.camelcase": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz",
      "integrity": "sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/lodash.clonedeep": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
      "integrity": "sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==",
      "license": "MIT"
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
      "license": "MIT"
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT"
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
      "license": "MIT"
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
      "license": "MIT"
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT"
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
      "license": "MIT"
    },
    "node_modules/long": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/long/-/long-5.3.2.tgz",
      "integrity": "sha512-mNAgZ1GmyNhD7AuqnTG3/VQ26o760+ZYBPKjPvugO8+nLbYfX6TVpJPseBvopbdY+qpZ/lKUnmEc1LeZYS3QAA==",
      "license": "Apache-2.0"
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/lru-memoizer": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/lru-memoizer/-/lru-memoizer-2.3.0.tgz",
      "integrity": "sha512-GXn7gyHAMhO13WSKrIiNfztwxodVsP8IoZ3XfrJV4yH2x0/OeTO/FIaAHTY5YekdGgW94njfuKmyyt1E0mR6Ug==",
      "license": "MIT",
      "dependencies": {
        "lodash.clonedeep": "^4.5.0",
        "lru-cache": "6.0.0"
      }
    },
    "node_modules/lru-memoizer/node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lru-memoizer/node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    },
    "node_modules/make-dir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "peer": true,
      "dependencies": {
        "tmpl": "1.0.5"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
      "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/napi-postinstall": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/napi-postinstall/-/napi-postinstall-0.2.4.tgz",
      "integrity": "sha512-ZEzHJwBhZ8qQSbknHqYcdtQVr8zUgGyM/q6h6qAyhtyVMNrSgDhrC4disf03dYW0e+czXyLnZINnCTEkWy0eJg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "bin": {
        "napi-postinstall": "lib/cli.js"
      },
      "engines": {
        "node": "^12.20.0 || ^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/napi-postinstall"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-forge": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.3.1.tgz",
      "integrity": "sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==",
      "license": "(BSD-3-Clause OR GPL-2.0)",
      "engines": {
        "node": ">= 6.13.0"
      }
    },
    "node_modules/node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "devOptional": true,
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/package-json-from-dist": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "peer": true
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-scurry": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "peer": true,
      "dependencies": {
        "lru-cache": "^10.2.0",
        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
      },
      "engines": {
        "node": ">=16 || 14 >=14.18"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/path-scurry/node_modules/lru-cache": {
      "version": "10.4.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
      "dev": true,
      "license": "ISC",
      "peer": true
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC",
      "peer": true
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
      "integrity": "sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pkg-dir/node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/pretty-format": {
      "version": "30.0.2",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-30.0.2.tgz",
      "integrity": "sha512-yC5/EBSOrTtqhCKfLHqoUIAXVRZnukHPwWBJWR7h84Q3Be1DRQZLncwcfLoPA5RPQ65qfiCMqgYwdUuQ//eVpg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jest/schemas": "30.0.1",
        "ansi-styles": "^5.2.0",
        "react-is": "^18.3.1"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/proto3-json-serializer": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/proto3-json-serializer/-/proto3-json-serializer-2.0.2.tgz",
      "integrity": "sha512-SAzp/O4Yh02jGdRc+uIrGoe87dkN/XtwxfZ4ZyafJHymd79ozp5VG5nyZ7ygqPM5+cpLDjjGnYFUkngonyDPOQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "protobufjs": "^7.2.5"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/protobufjs": {
      "version": "7.5.3",
      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.5.3.tgz",
      "integrity": "sha512-sildjKwVqOI2kmFDiXQ6aEB0fjYTafpEvIBs8tOR8qI4spuL9OPROLVu2qZqi/xgCfsHIwVqlaF8JBjWFHnKbw==",
      "hasInstallScript": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.2",
        "@protobufjs/base64": "^1.1.2",
        "@protobufjs/codegen": "^2.0.4",
        "@protobufjs/eventemitter": "^1.1.0",
        "@protobufjs/fetch": "^1.1.0",
        "@protobufjs/float": "^1.0.2",
        "@protobufjs/inquire": "^1.1.0",
        "@protobufjs/path": "^1.1.2",
        "@protobufjs/pool": "^1.1.0",
        "@protobufjs/utf8": "^1.1.0",
        "@types/node": ">=13.7.0",
        "long": "^5.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pure-rand": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-7.0.1.tgz",
      "integrity": "sha512-oTUZM/NAZS8p7ANR3SHh30kXB+zK2r2BPcEn/awJIbOvq82WoMN4p62AWWp3Hhw50G0xMsw1mhIBLqHw64EcNQ==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/dubzzz"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fast-check"
        }
      ],
      "license": "MIT",
      "peer": true
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-cwd/node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/retry": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/retry-request": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/retry-request/-/retry-request-7.0.2.tgz",
      "integrity": "sha512-dUOvLMJ0/JJYEn8NrpOaGNE7X3vpI5XlZS/u0ANjqtcZVKnIxP7IgCFwrKTxENw29emmwug53awKtaMm4i9g5w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/request": "^2.48.8",
        "extend": "^3.0.2",
        "teeny-request": "^9.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rimraf/node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/send/node_modules/debug/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/send/node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "dev": true,
      "license": "BSD-3-Clause",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.13",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "dev": true,
      "license": "BSD-3-Clause",
      "peer": true
    },
    "node_modules/stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/stack-utils/node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/stream-events": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/stream-events/-/stream-events-1.0.5.tgz",
      "integrity": "sha512-E1GUzBSgvct8Jsb3v2X15pjzN1tYebtbLaMg+eBOUOAxgbLoSbT2NS91ckc5lJD1KfLjId+jXJRgo0qnV5Nerg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "stubs": "^3.0.0"
      }
    },
    "node_modules/stream-shift": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/stream-shift/-/stream-shift-1.0.3.tgz",
      "integrity": "sha512-76ORR0DO1o1hlKwTbi/DM3EXWGf3ZJYO8cXX5RJwnul2DEg2oyoZyjLNoQM8WsvZiFKCRfC1O0J7iCvie3RZmQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/string-width-cjs": {
      "name": "string-width",
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/string-width/node_modules/ansi-regex": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/string-width/node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi-cjs": {
      "name": "strip-ansi",
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/strnum": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/strnum/-/strnum-1.1.2.tgz",
      "integrity": "sha512-vrN+B7DBIoTTZjnPNewwhx6cBA/H+IS7rfW68n7XxC1y7uoiGQBxaKzqucGUgavX15dJgiGztLJ8vxuEzwqBdA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/NaturalIntelligence"
        }
      ],
      "license": "MIT",
      "optional": true
    },
    "node_modules/stubs": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/stubs/-/stubs-3.0.0.tgz",
      "integrity": "sha512-PdHt7hHUJKxvTCgbKX9C1V/ftOcjJQgz8BZwNfV5c4B6dcGqlpelTbJ999jBGZ2jYiPAwcX5dP6oBwVlBlUbxw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/synckit": {
      "version": "0.11.8",
      "resolved": "https://registry.npmjs.org/synckit/-/synckit-0.11.8.tgz",
      "integrity": "sha512-+XZ+r1XGIJGeQk3VvXhT6xx/VpbHsRzsTkGgF6E5RX9TTXD0118l87puaEBZ566FhqblC6U0d4XnubznJDm30A==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@pkgr/core": "^0.2.4"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/synckit"
      }
    },
    "node_modules/teeny-request": {
      "version": "9.0.0",
      "resolved": "https://registry.npmjs.org/teeny-request/-/teeny-request-9.0.0.tgz",
      "integrity": "sha512-resvxdc6Mgb7YEThw6G6bExlXKkv6+YbuzGg9xuXxSgxJF7Ozs+o8Y9+2R3sArdWdW8nOokoQb1yrpFB0pQK2g==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "http-proxy-agent": "^5.0.0",
        "https-proxy-agent": "^5.0.0",
        "node-fetch": "^2.6.9",
        "stream-events": "^1.0.5",
        "uuid": "^9.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/teeny-request/node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/teeny-request/node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/test-exclude/node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/text-decoding": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/text-decoding/-/text-decoding-1.0.0.tgz",
      "integrity": "sha512-/0TJD42KDnVwKmDK6jj3xP7E2MG7SHAOG4tyTgyUCRPdHwvkquYNLEQltmdMa3owq3TkddCVcTsoctJI8VQNKA==",
      "license": "MIT"
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "dev": true,
      "license": "BSD-3-Clause",
      "peer": true
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/ts-deepmerge": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/ts-deepmerge/-/ts-deepmerge-2.0.7.tgz",
      "integrity": "sha512-3phiGcxPSSR47RBubQxPoZ+pqXsEsozLo4G4AlSrsMKTFg9TA3l+3he5BqpUi9wiuDbaHWXH/amlzQ49uEdXtg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "license": "MIT"
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/unrs-resolver": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/unrs-resolver/-/unrs-resolver-1.9.2.tgz",
      "integrity": "sha512-VUyWiTNQD7itdiMuJy+EuLEErLj3uwX/EpHQF8EOf33Dq3Ju6VW1GXm+swk6+1h7a49uv9fKZ+dft9jU7esdLA==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "napi-postinstall": "^0.2.4"
      },
      "funding": {
        "url": "https://opencollective.com/unrs-resolver"
      },
      "optionalDependencies": {
        "@unrs/resolver-binding-android-arm-eabi": "1.9.2",
        "@unrs/resolver-binding-android-arm64": "1.9.2",
        "@unrs/resolver-binding-darwin-arm64": "1.9.2",
        "@unrs/resolver-binding-darwin-x64": "1.9.2",
        "@unrs/resolver-binding-freebsd-x64": "1.9.2",
        "@unrs/resolver-binding-linux-arm-gnueabihf": "1.9.2",
        "@unrs/resolver-binding-linux-arm-musleabihf": "1.9.2",
        "@unrs/resolver-binding-linux-arm64-gnu": "1.9.2",
        "@unrs/resolver-binding-linux-arm64-musl": "1.9.2",
        "@unrs/resolver-binding-linux-ppc64-gnu": "1.9.2",
        "@unrs/resolver-binding-linux-riscv64-gnu": "1.9.2",
        "@unrs/resolver-binding-linux-riscv64-musl": "1.9.2",
        "@unrs/resolver-binding-linux-s390x-gnu": "1.9.2",
        "@unrs/resolver-binding-linux-x64-gnu": "1.9.2",
        "@unrs/resolver-binding-linux-x64-musl": "1.9.2",
        "@unrs/resolver-binding-wasm32-wasi": "1.9.2",
        "@unrs/resolver-binding-win32-arm64-msvc": "1.9.2",
        "@unrs/resolver-binding-win32-ia32-msvc": "1.9.2",
        "@unrs/resolver-binding-win32-x64-msvc": "1.9.2"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/v8-to-istanbul": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.3.0.tgz",
      "integrity": "sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.12",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^2.0.0"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "dev": true,
      "license": "Apache-2.0",
      "peer": true,
      "dependencies": {
        "makeerror": "1.0.12"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause",
      "optional": true
    },
    "node_modules/websocket-driver": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.4.tgz",
      "integrity": "sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==",
      "license": "Apache-2.0",
      "dependencies": {
        "http-parser-js": ">=0.5.1",
        "safe-buffer": ">=5.1.0",
        "websocket-extensions": ">=0.1.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/websocket-extensions": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.4.tgz",
      "integrity": "sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs": {
      "name": "wrap-ansi",
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/wrap-ansi-cjs/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi/node_modules/ansi-regex": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/wrap-ansi/node_modules/ansi-styles": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrap-ansi/node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "devOptional": true,
      "license": "ISC"
    },
    "node_modules/write-file-atomic": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-5.0.1.tgz",
      "integrity": "sha512-+QU2zd6OTD8XWIJCbffaiQeH9U73qIqafo1x6V1snCWYGJf6cVE0cDR4D8xRzcEnfI21IFrUPzPGtcPf8AC+Rw==",
      "dev": true,
      "license": "ISC",
      "peer": true,
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^4.0.1"
      },
      "engines": {
        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "devOptional": true,
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC",
      "peer": true
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "devOptional": true,
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/yargs/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}


================================================================================
File 22/34: C:\Users\Meir Livneh\Documents\fireClass\functions\package.json
================================================================================

{
  "name": "functions",
  "description": "Cloud Functions for Firebase",
  "scripts": {
    "lint": "eslint .",
    "serve": "firebase emulators:start --only functions",
    "shell": "firebase functions:shell",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log"
  },
  "engines": {
    "node": "22"
  },
  "main": "index.js",
  "dependencies": {
    "firebase-admin": "^12.0.0",
    "firebase-functions": "^5.0.0"
  },
  "devDependencies": {
    "eslint": "^8.15.0",
    "eslint-config-google": "^0.14.0",
    "firebase-functions-test": "^3.1.0"
  },
  "private": true
}


================================================================================
File 23/34: C:\Users\Meir Livneh\Documents\fireClass\installation_guide.md
================================================================================

# Complete Installation and Deployment Guide: Interactive Classroom System

This guide combines the initial installation process with deployment instructions, designed for setting up a new and clean environment on Firebase from scratch. The guide describes the manual process, and at the end presents scripts for automating the process.

---

## Step 0: Prerequisites

Ensure the following tools are installed on your computer:
* **Node.js**: Including the `npm` package manager.
* **Firebase CLI**: If not installed, run in terminal:
    ```bash
    npm install -g firebase-tools
    ```
* **Accounts**: Google account and accounts for external API services (e.g., OpenAI, Anthropic, Gemini).

---

## Step 1: Creating a Project and Environment in Firebase

This step is performed in the Firebase console.

### 1. Creating a New Project
* Go to the [Firebase Console](https://console.firebase.google.com/) and create a new project with a unique name (e.g., `interactive-class-prod`).
* During setup, you'll be asked to choose a default location for resources (**Default GCP resource location**). **This step is critical**. Choose a location that will be identical for all services, for example **`europe-west1 (Belgium)`**.
* Ensure the **"Enable Google Analytics for this project"** option is checked.

### 2. Upgrading to Blaze Payment Plan
* After creating the project, go to billing settings (gear icon > `Usage and billing`).
* Upgrade the project to the **Blaze (Pay as you go)** plan. This is a mandatory step to use the Cloud Functions required by the system.

---

## Step 2: Enabling Services and Setting Rules

Within the project you created:

### 1. Authentication
* In the side menu, go to `Authentication`.
* Go to the `Sign-in method` tab and enable the **Anonymous** authentication method.

### 2. Firestore Database
* Go to `Firestore Database` and click `Create database`.
* Choose to start in **Production mode**.
* Ensure the location selection is **identical** to what you chose in step 1 (e.g., `europe-west1`).
* After creating the database, go to the **Rules** tab, delete the existing content and paste the security rules from your project.

### 3. Secret Manager API
* Ensure this API is enabled for your project in Google Cloud Console. It's usually enabled automatically with Cloud Functions.

---

## Step 3: Setting Up External API Keys

1. Create API keys for the services you'll use (Gemini, Claude, ChatGPT, etc.) through their official platforms.
2. Save the keys in a secure and accessible place for the next step.

---

## Step 4: Setting Up the Local Project

### 1. Initialize Directory
* Create a new directory for the project, copy the source files to it, and open a terminal in it.

### 2. Link to Firebase Project
* Run the command:
    ```bash
    firebase init
    ```
* Choose **Use an existing project** and link it to the new project you created in Firebase.
* Select the following services: **Firestore**, **Functions**, and **Hosting**.
* Answer the initialization questions, but **avoid overwriting existing files** if asked (like `index.html` or `firestore.rules`).

### 3. Install Dependencies
* Navigate to the functions directory using `cd functions` and run `npm install` to install all required server-side dependencies.

---

## Step 5: Local File Configuration

### 1. Setting Deployment Location (Functions)
* Open the `functions/index.js` file.
* Ensure the variable at the top of the file matches the location you chose. For example: `const DEPLOY_REGION = "europe-west1";`.

### 2. Creating Firebase Configuration File for Application (Frontend)
* **Recommended:** Run the following command in terminal (in the root directory) to automatically create the configuration file:
    ```bash
    firebase apps:sdkconfig WEB --out public/firebase-config.js
    ```
    This command generates the exact `firebase-config.js` file for your project.

### 3. Application Configuration (`config.json`)
* Ensure there's a file named `config.json` in the `public` directory.
* Ensure its structure is valid and the `studentAppUrl` field contains the complete address to the student application **in your project**.

---

## Step 6: Setting Up Secrets (API Keys)

This is the secure way to manage your API keys. Run the following commands in terminal (from the root directory), and enter each key when prompted:

```bash
firebase functions:secrets:set GEMINI_API_KEY
firebase functions:secrets:set CLAUDE_API_KEY
firebase functions:secrets:set OPENAI_API_KEY
```

**Note:** You can add more API keys as needed for your project.

---

## Step 7: Deployment (Deploy)

### 1. (Optional) Build Step
If your project includes a build step (e.g., a script like `build.py` or `npm run build` that minifies files), run it now.

### 2. Final Deployment
To deploy the entire system (Hosting, Functions, Rules), run the command:

```bash
firebase deploy
```

At the end of the process, you'll receive a new **Hosting URL**. This is the address of your new, live, and independent system.

---

## Using Scripts for Automation

In addition to the manual process, the project includes scripts that allow you to perform some or all of the operations automatically.

### Build Script (build.py)

This script is designed to prepare the Frontend files for deployment in a Production environment.

**What does it do?**
- Deletes the old BUILD directory if it exists and creates it anew.
- Goes through all files in the public directory.
- Minifies `.js` files (using Terser), `.css` and `.html` files (using minify).
- Copies other files (like `config.json` and `firebase-config.js`) as-is to the BUILD directory.

**When to use?**
Run the script before deploying the project to upload a minified and efficient version to the server.

**How to use?**
1. Ensure you've installed the required dependencies shown at the top of the script (Terser, Minify).
2. Run the command:
   ```bash
   python build.py
   ```

**Important:** After running, update the `firebase.json` file so the Hosting directory is BUILD instead of public:

```json
"hosting": {
  "public": "BUILD",
  "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
  "rewrites": [{"source": "**", "destination": "/index.html"}]
}
```

3. Run `firebase deploy`.

### Automatic Installation and Deployment Script (deploy.py or install.py)

This script is a powerful tool that enables full automation of almost the entire manual process described in this guide. It's interactive and guides the user step by step.

**What does it do?**
- Checks system dependencies (node, npm, firebase).
- Guides the user in creating a new Firebase project through the terminal.
- Automatically enables required cloud services (`gcloud services enable`).
- Sets up local configuration files (`firebase.json`, `.firebaserc`, `config.json`).
- Runs dependency installation for functions (`npm install`).
- Securely guides API key entry and saves them as Secrets.
- Requests final approval before performing a general `firebase deploy`.

**Simulation Mode:**
By default, the script runs in simulation mode. It only prints the commands it would run without actually executing them. This allows you to see what's about to happen before making real changes.

**How to use?**

For running in simulation mode (recommended for first time):
```bash
python deploy.py
```

For running in "live" mode that performs all operations:
```bash
python deploy.py --live
```

**Note:** The automatic installation script is an advanced tool. Use it carefully, especially in live mode, as it makes changes to your cloud project.

---

## Troubleshooting

### Common Issues

1. **Region Mismatch**: Ensure all Firebase services use the same region.
2. **Billing Issues**: Make sure your project is on the Blaze plan.
3. **API Key Problems**: Verify all API keys are correctly set using Firebase secrets.
4. **Build Errors**: Check that all dependencies are installed in the functions directory.

### Support

For additional support, refer to the [Firebase Documentation](https://firebase.google.com/docs) or check the project's issue tracker.

---

## Security Considerations

- Always use Firebase secrets for API keys, never hardcode them.
- Regularly review and update your Firestore security rules.
- Monitor your Firebase usage to avoid unexpected charges.
- Keep your Firebase CLI and project dependencies updated.

---

## Next Steps

After successful deployment:
1. Test all system functionality
2. Set up monitoring and logging
3. Configure backup procedures
4. Plan for scaling and maintenance

This completes the installation and deployment process for your Interactive Classroom System.

================================================================================
File 24/34: C:\Users\Meir Livneh\Documents\fireClass\package-lock.json
================================================================================

{
  "name": "fireclass",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "fireclass",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "i18next": "^25.3.2"
      },
      "devDependencies": {
        "@playwright/test": "^1.53.2",
        "minify": "^11.0.1",
        "playwright": "^1.53.2",
        "terser": "^5.31.1"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.27.6",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.27.6.tgz",
      "integrity": "sha512-vbavdySgbTTrmFE+EsiqUTzlOr5bzlnJtUv9PynGCAKvfQqjIXbvFdumPM/GxMDfyuGMJaJAU6TO4zc1Jf1i8Q==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.23.1.tgz",
      "integrity": "sha512-6VhYk1diRqrhBAqpJEdjASR/+WVRtfjpqKuNw11cLiaWpAT/Uu+nokB+UJnevzy/P9C/ty6AOe0dwueMrGh/iQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.23.1.tgz",
      "integrity": "sha512-uz6/tEy2IFm9RYOyvKl88zdzZfwEfKZmnX9Cj1BHjeSGNuGLuMD1kR8y5bteYmwqKm1tj8m4cb/aKEorr6fHWQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.23.1.tgz",
      "integrity": "sha512-xw50ipykXcLstLeWH7WRdQuysJqejuAGPd30vd1i5zSyKK3WE+ijzHmLKxdiCMtH1pHz78rOg0BKSYOSB/2Khw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.23.1.tgz",
      "integrity": "sha512-nlN9B69St9BwUoB+jkyU090bru8L0NA3yFvAd7k8dNsVH8bi9a8cUAUSEcEEgTp2z3dbEDGJGfP6VUnkQnlReg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.23.1.tgz",
      "integrity": "sha512-YsS2e3Wtgnw7Wq53XXBLcV6JhRsEq8hkfg91ESVadIrzr9wO6jJDMZnCQbHm1Guc5t/CdDiFSSfWP58FNuvT3Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.23.1.tgz",
      "integrity": "sha512-aClqdgTDVPSEGgoCS8QDG37Gu8yc9lTHNAQlsztQ6ENetKEO//b8y31MMu2ZaPbn4kVsIABzVLXYLhCGekGDqw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.23.1.tgz",
      "integrity": "sha512-h1k6yS8/pN/NHlMl5+v4XPfikhJulk4G+tKGFIOwURBSFzE8bixw1ebjluLOjfwtLqY0kewfjLSrO6tN2MgIhA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.23.1.tgz",
      "integrity": "sha512-lK1eJeyk1ZX8UklqFd/3A60UuZ/6UVfGT2LuGo3Wp4/z7eRTRYY+0xOu2kpClP+vMTi9wKOfXi2vjUpO1Ro76g==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.23.1.tgz",
      "integrity": "sha512-CXXkzgn+dXAPs3WBwE+Kvnrf4WECwBdfjfeYHpMeVxWE0EceB6vhWGShs6wi0IYEqMSIzdOF1XjQ/Mkm5d7ZdQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.23.1.tgz",
      "integrity": "sha512-/93bf2yxencYDnItMYV/v116zff6UyTjo4EtEQjUBeGiVpMmffDNUyD9UN2zV+V3LRV3/on4xdZ26NKzn6754g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.23.1.tgz",
      "integrity": "sha512-VTN4EuOHwXEkXzX5nTvVY4s7E/Krz7COC8xkftbbKRYAl96vPiUssGkeMELQMOnLOJ8k3BY1+ZY52tttZnHcXQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.23.1.tgz",
      "integrity": "sha512-Vx09LzEoBa5zDnieH8LSMRToj7ir/Jeq0Gu6qJ/1GcBq9GkfoEAoXvLiW1U9J1qE/Y/Oyaq33w5p2ZWrNNHNEw==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.23.1.tgz",
      "integrity": "sha512-nrFzzMQ7W4WRLNUOU5dlWAqa6yVeI0P78WKGUo7lg2HShq/yx+UYkeNSE0SSfSure0SqgnsxPvmAUu/vu0E+3Q==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.23.1.tgz",
      "integrity": "sha512-dKN8fgVqd0vUIjxuJI6P/9SSSe/mB9rvA98CSH2sJnlZ/OCZWO1DJvxj8jvKTfYUdGfcq2dDxoKaC6bHuTlgcw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.23.1.tgz",
      "integrity": "sha512-5AV4Pzp80fhHL83JM6LoA6pTQVWgB1HovMBsLQ9OZWLDqVY8MVobBXNSmAJi//Csh6tcY7e7Lny2Hg1tElMjIA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.23.1.tgz",
      "integrity": "sha512-9ygs73tuFCe6f6m/Tb+9LtYxWR4c9yg7zjt2cYkjDbDpV/xVn+68cQxMXCjUpYwEkze2RcU/rMnfIXNRFmSoDw==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.23.1.tgz",
      "integrity": "sha512-EV6+ovTsEXCPAp58g2dD68LxoP/wK5pRvgy0J/HxPGB009omFPv3Yet0HiaqvrIrgPTBuC6wCH1LTOY91EO5hQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.23.1.tgz",
      "integrity": "sha512-aevEkCNu7KlPRpYLjwmdcuNz6bDFiE7Z8XC4CPqExjTvrHugh28QzUXVOZtiYghciKUacNktqxdpymplil1beA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.23.1.tgz",
      "integrity": "sha512-3x37szhLexNA4bXhLrCC/LImN/YtWis6WXr1VESlfVtVeoFJBRINPJ3f0a/6LV8zpikqoUg4hyXw0sFBt5Cr+Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.23.1.tgz",
      "integrity": "sha512-aY2gMmKmPhxfU+0EdnN+XNtGbjfQgwZj43k8G3fyrDM/UdZww6xrWxmDkuz2eCZchqVeABjV5BpildOrUbBTqA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.23.1.tgz",
      "integrity": "sha512-RBRT2gqEl0IKQABT4XTj78tpk9v7ehp+mazn2HbUeZl1YMdaGAQqhapjGTCe7uw7y0frDi4gS0uHzhvpFuI1sA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.23.1.tgz",
      "integrity": "sha512-4O+gPR5rEBe2FpKOVyiJ7wNDPA8nGzDuJ6gN4okSA1gEOYZ67N8JPk58tkWtdtPeLz7lBnY6I5L3jdsr3S+A6A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.23.1.tgz",
      "integrity": "sha512-BcaL0Vn6QwCwre3Y717nVHZbAa4UBEigzFm6VdsVdT/MbZ38xoj1X9HPkZhbmaBGUD1W8vxAfffbDe8bA6AKnQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.23.1.tgz",
      "integrity": "sha512-BHpFFeslkWrXWyUPnbKm+xYYVYruCinGcftSBaa8zoF9hZO4BcSCFUvHVTtzpIY6YzUnYtuEhZ+C9iEXjxnasg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.12",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/source-map": {
      "version": "0.3.10",
      "resolved": "https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.10.tgz",
      "integrity": "sha512-0pPkgz9dY+bijgistcTTJ5mR+ocqRXLuhXHYdzoMmmoJ2C9S46RCm2GMUbatPEUK9Yjy26IrAy8D/M00lLkv+Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.29",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@playwright/test": {
      "version": "1.53.2",
      "resolved": "https://registry.npmjs.org/@playwright/test/-/test-1.53.2.tgz",
      "integrity": "sha512-tEB2U5z74ebBeyfGNZ3Jfg29AnW+5HlWhvHtb/Mqco9pFdZU1ZLNdVb2UtB5CvmiilNr2ZfVH/qMmAROG/XTzw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "playwright": "1.53.2"
      },
      "bin": {
        "playwright": "cli.js"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@putout/minify": {
      "version": "4.12.3",
      "resolved": "https://registry.npmjs.org/@putout/minify/-/minify-4.12.3.tgz",
      "integrity": "sha512-PLGgelp3fDAaAxKatkkBmtmBWUkE2JpArrhtJhIvoycSQV5bjoyznbKLhZEtbql+Ns3JDYdsJ/kN2js6+pMuLQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@swc/core": {
      "version": "1.12.9",
      "resolved": "https://registry.npmjs.org/@swc/core/-/core-1.12.9.tgz",
      "integrity": "sha512-O+LfT2JlVMsIMWG9x+rdxg8GzpzeGtCZQfXV7cKc1PjIKUkLFf1QJ7okuseA4f/9vncu37dQ2ZcRrPKy0Ndd5g==",
      "dev": true,
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@swc/counter": "^0.1.3",
        "@swc/types": "^0.1.23"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/swc"
      },
      "optionalDependencies": {
        "@swc/core-darwin-arm64": "1.12.9",
        "@swc/core-darwin-x64": "1.12.9",
        "@swc/core-linux-arm-gnueabihf": "1.12.9",
        "@swc/core-linux-arm64-gnu": "1.12.9",
        "@swc/core-linux-arm64-musl": "1.12.9",
        "@swc/core-linux-x64-gnu": "1.12.9",
        "@swc/core-linux-x64-musl": "1.12.9",
        "@swc/core-win32-arm64-msvc": "1.12.9",
        "@swc/core-win32-ia32-msvc": "1.12.9",
        "@swc/core-win32-x64-msvc": "1.12.9"
      },
      "peerDependencies": {
        "@swc/helpers": ">=0.5.17"
      },
      "peerDependenciesMeta": {
        "@swc/helpers": {
          "optional": true
        }
      }
    },
    "node_modules/@swc/core-darwin-arm64": {
      "version": "1.12.9",
      "resolved": "https://registry.npmjs.org/@swc/core-darwin-arm64/-/core-darwin-arm64-1.12.9.tgz",
      "integrity": "sha512-GACFEp4nD6V+TZNR2JwbMZRHB+Yyvp14FrcmB6UCUYmhuNWjkxi+CLnEvdbuiKyQYv0zA+TRpCHZ+whEs6gwfA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "Apache-2.0 AND MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@swc/core-darwin-x64": {
      "version": "1.12.9",
      "resolved": "https://registry.npmjs.org/@swc/core-darwin-x64/-/core-darwin-x64-1.12.9.tgz",
      "integrity": "sha512-hv2kls7Ilkm2EpeJz+I9MCil7pGS3z55ZAgZfxklEuYsxpICycxeH+RNRv4EraggN44ms+FWCjtZFu0LGg2V3g==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "Apache-2.0 AND MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@swc/core-linux-arm-gnueabihf": {
      "version": "1.12.9",
      "resolved": "https://registry.npmjs.org/@swc/core-linux-arm-gnueabihf/-/core-linux-arm-gnueabihf-1.12.9.tgz",
      "integrity": "sha512-od9tDPiG+wMU9wKtd6y3nYJdNqgDOyLdgRRcrj1/hrbHoUPOM8wZQZdwQYGarw63iLXGgsw7t5HAF9Yc51ilFA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@swc/core-linux-arm64-gnu": {
      "version": "1.12.9",
      "resolved": "https://registry.npmjs.org/@swc/core-linux-arm64-gnu/-/core-linux-arm64-gnu-1.12.9.tgz",
      "integrity": "sha512-6qx1ka9LHcLzxIgn2Mros+CZLkHK2TawlXzi/h7DJeNnzi8F1Hw0Yzjp8WimxNCg6s2n+o3jnmin1oXB7gg8rw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "Apache-2.0 AND MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@swc/core-linux-arm64-musl": {
      "version": "1.12.9",
      "resolved": "https://registry.npmjs.org/@swc/core-linux-arm64-musl/-/core-linux-arm64-musl-1.12.9.tgz",
      "integrity": "sha512-yghFZWKPVVGbUdqiD7ft23G0JX6YFGDJPz9YbLLAwGuKZ9th3/jlWoQDAw1Naci31LQhVC+oIji6ozihSuwB2A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "Apache-2.0 AND MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@swc/core-linux-x64-gnu": {
      "version": "1.12.9",
      "resolved": "https://registry.npmjs.org/@swc/core-linux-x64-gnu/-/core-linux-x64-gnu-1.12.9.tgz",
      "integrity": "sha512-SFUxyhWLZRNL8QmgGNqdi2Q43PNyFVkRZ2zIif30SOGFSxnxcf2JNeSeBgKIGVgaLSuk6xFVVCtJ3KIeaStgRg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "Apache-2.0 AND MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@swc/core-linux-x64-musl": {
      "version": "1.12.9",
      "resolved": "https://registry.npmjs.org/@swc/core-linux-x64-musl/-/core-linux-x64-musl-1.12.9.tgz",
      "integrity": "sha512-9FB0wM+6idCGTI20YsBNBg9xSWtkDBymnpaTCsZM3qDc0l4uOpJMqbfWhQvp17x7r/ulZfb2QY8RDvQmCL6AcQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "Apache-2.0 AND MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@swc/core-win32-arm64-msvc": {
      "version": "1.12.9",
      "resolved": "https://registry.npmjs.org/@swc/core-win32-arm64-msvc/-/core-win32-arm64-msvc-1.12.9.tgz",
      "integrity": "sha512-zHOusMVbOH9ik5RtRrMiGzLpKwxrPXgXkBm3SbUCa65HAdjV33NZ0/R9Rv1uPESALtEl2tzMYLUxYA5ECFDFhA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "Apache-2.0 AND MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@swc/core-win32-ia32-msvc": {
      "version": "1.12.9",
      "resolved": "https://registry.npmjs.org/@swc/core-win32-ia32-msvc/-/core-win32-ia32-msvc-1.12.9.tgz",
      "integrity": "sha512-aWZf0PqE0ot7tCuhAjRkDFf41AzzSQO0x2xRfTbnhpROp57BRJ/N5eee1VULO/UA2PIJRG7GKQky5bSGBYlFug==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "Apache-2.0 AND MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@swc/core-win32-x64-msvc": {
      "version": "1.12.9",
      "resolved": "https://registry.npmjs.org/@swc/core-win32-x64-msvc/-/core-win32-x64-msvc-1.12.9.tgz",
      "integrity": "sha512-C25fYftXOras3P3anSUeXXIpxmEkdAcsIL9yrr0j1xepTZ/yKwpnQ6g3coj8UXdeJy4GTVlR6+Ow/QiBgZQNOg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "Apache-2.0 AND MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@swc/counter": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@swc/counter/-/counter-0.1.3.tgz",
      "integrity": "sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==",
      "dev": true,
      "license": "Apache-2.0"
    },
    "node_modules/@swc/types": {
      "version": "0.1.23",
      "resolved": "https://registry.npmjs.org/@swc/types/-/types-0.1.23.tgz",
      "integrity": "sha512-u1iIVZV9Q0jxY+yM2vw/hZGDNudsN85bBpTqzAQ9rzkxW9D+e3aEM4Han+ow518gSewkXgjmEK0BD79ZcNVgPw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@swc/counter": "^0.1.3"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/camel-case": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/camel-case/-/camel-case-4.1.2.tgz",
      "integrity": "sha512-gxGWBrTT1JuMx6R+o5PTXMmUnhnVzLQ9SNutD4YqKtI6ap897t3tKECYla6gCWEkplXnlNybEkZg9GEGxKFCgw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "pascal-case": "^3.1.2",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/clean-css": {
      "version": "5.3.3",
      "resolved": "https://registry.npmjs.org/clean-css/-/clean-css-5.3.3.tgz",
      "integrity": "sha512-D5J+kHaVb/wKSFcyyV75uCn8fiY4sV38XJoe4CUyGQ+mOU/fMVYUdH1hJC+CJQ5uY3EnW27SbJYS4X8BiLrAFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "source-map": "~0.6.0"
      },
      "engines": {
        "node": ">= 10.0"
      }
    },
    "node_modules/commander": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-10.0.1.tgz",
      "integrity": "sha512-y4Mg2tXshplEbSGzx7amzPwKKOCGuoSRP/CjEdwwk0FOGlUbq6lKuoyDZTNZkmxHdJtp54hdfY/JUrdL7Xfdug==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/css-b64-images": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/css-b64-images/-/css-b64-images-0.2.5.tgz",
      "integrity": "sha512-TgQBEdP07adhrDfXvI5o6bHGukKBNMzp2Ngckc/6d09zpjD2gc1Hl3Ca1CKgb8FXjHi88+Phv2Uegs2kTL4zjg==",
      "dev": true,
      "bin": {
        "css-b64-images": "bin/css-b64-images"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/dot-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/entities": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-4.5.0.tgz",
      "integrity": "sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.12"
      },
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/esbuild": {
      "version": "0.23.1",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.23.1.tgz",
      "integrity": "sha512-VVNz/9Sa0bs5SELtn3f7qhJCDPCF5oMEl5cO9/SSinpE9hbPVvxbd572HH5AKiP7WD8INO53GgfDDhRjkylHEg==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.23.1",
        "@esbuild/android-arm": "0.23.1",
        "@esbuild/android-arm64": "0.23.1",
        "@esbuild/android-x64": "0.23.1",
        "@esbuild/darwin-arm64": "0.23.1",
        "@esbuild/darwin-x64": "0.23.1",
        "@esbuild/freebsd-arm64": "0.23.1",
        "@esbuild/freebsd-x64": "0.23.1",
        "@esbuild/linux-arm": "0.23.1",
        "@esbuild/linux-arm64": "0.23.1",
        "@esbuild/linux-ia32": "0.23.1",
        "@esbuild/linux-loong64": "0.23.1",
        "@esbuild/linux-mips64el": "0.23.1",
        "@esbuild/linux-ppc64": "0.23.1",
        "@esbuild/linux-riscv64": "0.23.1",
        "@esbuild/linux-s390x": "0.23.1",
        "@esbuild/linux-x64": "0.23.1",
        "@esbuild/netbsd-x64": "0.23.1",
        "@esbuild/openbsd-arm64": "0.23.1",
        "@esbuild/openbsd-x64": "0.23.1",
        "@esbuild/sunos-x64": "0.23.1",
        "@esbuild/win32-arm64": "0.23.1",
        "@esbuild/win32-ia32": "0.23.1",
        "@esbuild/win32-x64": "0.23.1"
      }
    },
    "node_modules/find-up": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-7.0.0.tgz",
      "integrity": "sha512-YyZM99iHrqLKjmt4LJDj58KI+fYyufRLBSYcqycxf//KpBk9FoewoGX0450m9nB44qrZnovzC2oeP5hUibxc/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^7.2.0",
        "path-exists": "^5.0.0",
        "unicorn-magic": "^0.1.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/html-minifier-terser": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/html-minifier-terser/-/html-minifier-terser-7.2.0.tgz",
      "integrity": "sha512-tXgn3QfqPIpGl9o+K5tpcj3/MN4SfLtsx2GWwBC3SSd0tXQGyF3gsSqad8loJgKZGM3ZxbYDd5yhiBIdWpmvLA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "camel-case": "^4.1.2",
        "clean-css": "~5.3.2",
        "commander": "^10.0.0",
        "entities": "^4.4.0",
        "param-case": "^3.0.4",
        "relateurl": "^0.2.7",
        "terser": "^5.15.1"
      },
      "bin": {
        "html-minifier-terser": "cli.js"
      },
      "engines": {
        "node": "^14.13.1 || >=16.0.0"
      }
    },
    "node_modules/i18next": {
      "version": "25.3.2",
      "resolved": "https://registry.npmjs.org/i18next/-/i18next-25.3.2.tgz",
      "integrity": "sha512-JSnbZDxRVbphc5jiptxr3o2zocy5dEqpVm9qCGdJwRNO+9saUJS0/u4LnM/13C23fUEWxAylPqKU/NpMV/IjqA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://locize.com"
        },
        {
          "type": "individual",
          "url": "https://locize.com/i18next.html"
        },
        {
          "type": "individual",
          "url": "https://www.i18next.com/how-to/faq#i18next-is-awesome.-how-can-i-support-the-project"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.27.6"
      },
      "peerDependencies": {
        "typescript": "^5"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/jju": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/jju/-/jju-1.4.0.tgz",
      "integrity": "sha512-8wb9Yw966OSxApiCt0K3yNJL8pnNeIv+OEq2YMidz4FKP6nonSRoOXc80iXY4JaN2FC11B9qsNmDsm+ZOfMROA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/locate-path": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-7.2.0.tgz",
      "integrity": "sha512-gvVijfZvn7R+2qyPX8mAuKcFGDf6Nc61GdvGafQsHL0sBIxfKzA+usWn4GFC/bk+QdwPUD4kWFJLhElipq+0VA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^6.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lower-case": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.0.3"
      }
    },
    "node_modules/minify": {
      "version": "11.4.1",
      "resolved": "https://registry.npmjs.org/minify/-/minify-11.4.1.tgz",
      "integrity": "sha512-G1a1cSxR+5J4ixbfNSXU1OeXB8J6dFSlYpnS3GiPxYBSLoe51RE8UWj3sHXzZNxqWFvZkpcU/VSSCJtHyRZmdQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@putout/minify": "^4.0.0",
        "@swc/core": "^1.6.7",
        "clean-css": "^5.0.1",
        "css-b64-images": "~0.2.5",
        "debug": "^4.1.0",
        "esbuild": "^0.23.0",
        "find-up": "^7.0.0",
        "html-minifier-terser": "^7.1.0",
        "readjson": "^2.2.2",
        "simport": "^1.2.0",
        "terser": "^5.28.1",
        "try-catch": "^3.0.0",
        "try-to-catch": "^3.0.0"
      },
      "bin": {
        "minify": "bin/minify.js"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/no-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "lower-case": "^2.0.2",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/p-limit": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-4.0.0.tgz",
      "integrity": "sha512-5b0R4txpzjPWVw/cXXUResoD4hb6U/x9BH08L7nw+GN1sezDzPdxeRvpc9c433fZhBan/wusjbCsqwqm4EIBIQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^1.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-6.0.0.tgz",
      "integrity": "sha512-wPrq66Llhl7/4AGC6I+cqxT07LhXvWL08LNXz1fENOw0Ap4sRZZ/gZpTTJ5jpurzzzfS2W/Ge9BY3LgLjCShcw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^4.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/param-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/param-case/-/param-case-3.0.4.tgz",
      "integrity": "sha512-RXlj7zCYokReqWpOPH9oYivUzLYZ5vAPIfEmCTNViosC78F8F0H9y7T7gG2M39ymgutxF5gcFEsyZQSph9Bp3A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dot-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/pascal-case": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/pascal-case/-/pascal-case-3.1.2.tgz",
      "integrity": "sha512-uWlGT3YSnK9x3BQJaOdcZwrnV6hPpd8jFH1/ucpiLRPh/2zCVJKS19E4GvYHvaCcACn3foXZ0cLB9Wrx1KGe5g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/path-exists": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-5.0.0.tgz",
      "integrity": "sha512-RjhtfwJOxzcFmNOi6ltcbcu4Iu+FL3zEj83dk4kAS+fVpTxXLO1b38RvJgT/0QwvV/L3aY9TAnyv0EOqW4GoMQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      }
    },
    "node_modules/playwright": {
      "version": "1.53.2",
      "resolved": "https://registry.npmjs.org/playwright/-/playwright-1.53.2.tgz",
      "integrity": "sha512-6K/qQxVFuVQhRQhFsVZ9fGeatxirtrpPgxzBYWyZLEXJzqYwuL4fuNmfOfD5et1tJE4GScKyPNeLhZeRwuTU3A==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "playwright-core": "1.53.2"
      },
      "bin": {
        "playwright": "cli.js"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "fsevents": "2.3.2"
      }
    },
    "node_modules/playwright-core": {
      "version": "1.53.2",
      "resolved": "https://registry.npmjs.org/playwright-core/-/playwright-core-1.53.2.tgz",
      "integrity": "sha512-ox/OytMy+2w1jcYEYlOo1Hhp8hZkLCximMTUTMBXjGUA1KoFfiSZ+DU+3a739jsPY0yoKH2TFy9S2fsJas8yAw==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "playwright-core": "cli.js"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/readjson": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/readjson/-/readjson-2.2.2.tgz",
      "integrity": "sha512-PdeC9tsmLWBiL8vMhJvocq+OezQ3HhsH2HrN7YkhfYcTjQSa/iraB15A7Qvt7Xpr0Yd2rDNt6GbFwVQDg3HcAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "jju": "^1.4.0",
        "try-catch": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/relateurl": {
      "version": "0.2.7",
      "resolved": "https://registry.npmjs.org/relateurl/-/relateurl-0.2.7.tgz",
      "integrity": "sha512-G08Dxvm4iDN3MLM0EsP62EDV9IuhXPR6blNz6Utcp7zyV3tr4HVNINt6MpaRWbxoOHT3Q7YN2P+jaHX8vUbgog==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/simport": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/simport/-/simport-1.2.0.tgz",
      "integrity": "sha512-85Bm7pKsqiiQ8rmYCaPDdlXZjJvuW6/k/FY8MTtLFMgU7f8S00CgTHfRtWB6KwSb6ek4p9YyG2enG1+yJbl+CA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "readjson": "^2.2.0",
        "try-to-catch": "^3.0.0"
      },
      "engines": {
        "node": ">=12.2"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/terser": {
      "version": "5.43.1",
      "resolved": "https://registry.npmjs.org/terser/-/terser-5.43.1.tgz",
      "integrity": "sha512-+6erLbBm0+LROX2sPXlUYx/ux5PyE9K/a92Wrt6oA+WDAoFTdpHE5tCYCI5PNzq2y8df4rA+QgHLJuR4jNymsg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "@jridgewell/source-map": "^0.3.3",
        "acorn": "^8.14.0",
        "commander": "^2.20.0",
        "source-map-support": "~0.5.20"
      },
      "bin": {
        "terser": "bin/terser"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/terser/node_modules/commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/try-catch": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/try-catch/-/try-catch-3.0.1.tgz",
      "integrity": "sha512-91yfXw1rr/P6oLpHSyHDOHm0vloVvUoo9FVdw8YwY05QjJQG9OT0LUxe2VRAzmHG+0CUOmI3nhxDUMLxDN/NEQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/try-to-catch": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/try-to-catch/-/try-to-catch-3.0.1.tgz",
      "integrity": "sha512-hOY83V84Hx/1sCzDSaJA+Xz2IIQOHRvjxzt+F0OjbQGPZ6yLPLArMA0gw/484MlfUkQbCpKYMLX3VDCAjWKfzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "dev": true,
      "license": "0BSD"
    },
    "node_modules/unicorn-magic": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/unicorn-magic/-/unicorn-magic-0.1.0.tgz",
      "integrity": "sha512-lRfVq8fE8gz6QMBuDM6a+LO3IAzTi05H6gCVaUpir2E1Rwpo4ZUog45KpNXKC/Mn3Yb9UDuHumeFTo9iV/D9FQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/yocto-queue": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-1.2.1.tgz",
      "integrity": "sha512-AyeEbWOu/TAXdxlV9wmGcR0+yh2j3vYPGOECcIj2S7MkrLyC7ne+oye2BKTItt0ii2PHk4cDy+95+LshzbXnGg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.20"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}


================================================================================
File 25/34: C:\Users\Meir Livneh\Documents\fireClass\package.json
================================================================================

{
  "name": "fireclass",
  "version": "1.0.0",
  "description": "Build scripts for the fireClass project.",
  "scripts": {
    "build": "python .\\build.py",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@playwright/test": "^1.53.2",
    "minify": "^11.0.1",
    "playwright": "^1.53.2",
    "terser": "^5.31.1"
  },
  "dependencies": {
    "i18next": "^25.3.2"
  }
}


================================================================================
File 26/34: C:\Users\Meir Livneh\Documents\fireClass\public\config.json
================================================================================

{
  "studentAppUrl": "https://class-board-ad64e.web.app/student-app.html",
  "games": [
    {
      "name": "AI Model Training",
      "description": "Visual Recognition training",
      "icon": "üìö",
      "url": "https://meir.world/face-recognition/"
    },
    {
      "name": "TM",
      "description": "Goggle Teachable Machines",
      "icon": "üéØ",
      "url": "https://teachablemachine.withgoogle.com/train"
    },
    {
      "name": "PhET",
      "description": "Projectile Data Lab",
      "icon": "üéØ",
      "url": "https://phet.colorado.edu/sims/html/projectile-data-lab/latest/projectile-data-lab_all.html"
    },
    {
      "name": "Kahoot",
      "description": "Interactive quiz game",
      "icon": "üéØ",
      "url": "https://kahoot.it"
    },
    {
      "name": "Wordwall",
      "description": "Word games and creation",
      "icon": "üé≤",
      "url": "https://wordwall.net"
    },
    {
      "name": "Scratch",
      "description": "Programming and creation",
      "icon": "üê±",
      "url": "https://scratch.mit.edu"
    }
  ]
}


================================================================================
File 27/34: C:\Users\Meir Livneh\Documents\fireClass\public\css\student-app.css
================================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */

/* student-app.css - English LTR Version */

body, html {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    background-color: #f0f2f5;
    overflow: hidden;
    direction: ltr; /* Explicit LTR direction */
}

.container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
}

.login-box {
    background: white;
    padding: 40px;
    border-radius: 12px;
    box-shadow: 0 8px 30px rgba(0,0,0,0.12);
    text-align: center;
    width: 90%;
    max-width: 400px;
}

.login-box h1 {
    color: #333;
    margin-bottom: 10px;
}

.login-box p {
    color: #666;
    margin-bottom: 25px;
}

#player-name {
    width: 100%;
    padding: 12px;
    margin-bottom: 20px;
    border: 1px solid #ccc;
    border-radius: 8px;
    font-size: 16px;
    box-sizing: border-box;
    text-align: left; /* Explicit LTR alignment */
    direction: ltr;
}

.input-group {
    margin-bottom: 20px;
    text-align: left; /* Align labels to the left for LTR */
}

.input-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: #555;
}

#teacher-uid {
    width: 100%;
    padding: 12px;
    border: 1px solid #ccc;
    border-radius: 8px;
    font-size: 16px;
    box-sizing: border-box;
    text-align: left; /* Explicit LTR alignment */
    direction: ltr;
}

.login-box button {
    width: 100%;
    padding: 12px;
    border: none;
    background-color: #007bff;
    color: white;
    border-radius: 8px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s;
}

.login-box button:hover {
    background-color: #0056b3;
}

#main-container {
    width: 100%;
    height: 100%;
}

#content-frame {
    width: 100%;
    height: 100%;
    border: none;
}

/* Message and Poll Animations */
.new-message-indicator {
    animation: pulse 1.5s infinite;
}

@keyframes pulse {
    0% {
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.7);
    }
    70% {
        transform: scale(1.1);
        box-shadow: 0 0 10px 20px rgba(0, 123, 255, 0);
    }
    100% {
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0);
    }
}

/* Shake animation for notifications */
@keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-2px); }
    75% { transform: translateX(2px); }
}

.new-message-shake {
    animation: shake 0.5s ease-in-out 3;
}

/* Bounce animation for message badges */
@keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-10px); }
    60% { transform: translateY(-5px); }
}

.message-badge {
    position: absolute !important;
    top: -5px !important;
    right: -5px !important;
    background: #dc3545 !important;
    color: white !important;
    border-radius: 50% !important;
    width: 20px !important;
    height: 20px !important;
    font-size: 12px !important;
    font-weight: bold !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    animation: bounce 0.5s ease !important;
    z-index: 1001 !important;
}

/* Poll Interface Styles */
#poll-interface {
    display: flex;
    gap: 15px;
    align-items: center;
    justify-content: center;
    text-align: center;
    direction: ltr;
}

#poll-interface button {
    transition: all 0.3s ease;
    font-family: inherit;
}

#poll-interface button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

#poll-interface button:active {
    transform: translateY(0);
}

#poll-interface button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
}

#poll-interface textarea {
    text-align: left; /* LTR text input */
    direction: ltr;
}

/* Blinking animation for chat notifications */
.blinking {
    animation: blink-animation 0.5s infinite alternate;
}

@keyframes blink-animation {
    from {
        transform: scale(1);
        box-shadow: 0 0 10px #fff;
    }
    to {
        transform: scale(1.1);
        box-shadow: 0 0 20px #ffeb3b, 0 0 30px #ffeb3b;
    }
}

/* High Z-index for floating elements */
#classroom-ai-container {
    z-index: 10002 !important;
}

#classroom-chat-btn {
    z-index: 10000 !important;
}

#classroom-chat-container {
    z-index: 10001 !important;
}

/* Auto Chat Opening Animation - updated for LTR */
@keyframes chatSlideIn {
    from {
        transform: translateX(100%); /* Slide in from right for LTR */
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

/* Special visual effect for auto-opened chat */
.chat-auto-opened {
    border: 2px solid #007bff !important;
    box-shadow: 0 0 20px rgba(0, 123, 255, 0.5) !important;
}

/* Button pulse animation */
@keyframes chatButtonPulse {
    0% {
        transform: scale(1);
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }
    50% {
        transform: scale(1.1);
        box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
    }
    100% {
        transform: scale(1);
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }
}

.chat-button-pulse {
    animation: chatButtonPulse 0.6s ease-in-out;
}

/* Responsive adjustments for mobile */
@media (max-width: 768px) {
    .login-box {
        padding: 30px;
        margin: 20px;
    }
    
    #poll-interface {
        flex-direction: column;
        gap: 10px;
        padding: 15px;
    }
    
    #poll-interface button {
        width: 100%;
        max-width: 200px;
    }
}

/* Success notification styles */
.success-notification {
    background: #28a745;
    color: white;
    padding: 10px 15px;
    border-radius: 6px;
    margin: 10px 0;
    text-align: center;
    animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}

================================================================================
File 28/34: C:\Users\Meir Livneh\Documents\fireClass\public\css\teacher-dashboard.css
================================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */

/* teacher-dashboard.css - English LTR Version */

/* Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    color: #333;
}

/* Header & Navigation */
.header {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    box-shadow: 0 2px 20px rgba(0,0,0,0.1);
    position: sticky;
    top: 0;
    z-index: 1000;
}

.nav-container {
    max-width: 1400px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 20px;
    height: 70px;
}

.logo {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 24px;
    font-weight: bold;
    color: #2c3e50;
}

.nav-menu {
    display: flex;
    list-style: none;
    gap: 0;
}

.nav-item {
    position: relative;
}

.nav-link {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 15px 20px;
    text-decoration: none;
    color: #555;
    font-weight: 500;
    transition: all 0.3s ease;
    border-radius: 8px;
    margin: 0 2px;
}

.nav-link:hover {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    transform: translateY(-2px);
}

.nav-icon {
    font-size: 18px;
}

/* Dropdown Menu */
.dropdown {
    position: absolute;
    top: 100%;
    left: 0; /* Changed from right: 0 for LTR */
    background: white;
    min-width: 280px;
    border-radius: 12px;
    box-shadow: 0 10px 40px rgba(0,0,0,0.15);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    border: 1px solid #e1e5e9;
    overflow: hidden;
}

.nav-item:hover .dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
}

.dropdown-header {
    padding: 15px 20px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-bottom: 1px solid #dee2e6;
    font-weight: bold;
    color: #495057;
    font-size: 14px;
}

.dropdown-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 20px;
    text-decoration: none;
    color: #555;
    transition: all 0.2s ease;
    border-bottom: 1px solid #f8f9fa;
}

.dropdown-item:hover {
    background: #f8f9fa;
    color: #007bff;
    padding-left: 25px; /* Changed from padding-right for LTR */
}

.dropdown-item:last-child {
    border-bottom: none;
}

.dropdown-icon {
    font-size: 16px;
    width: 20px;
    text-align: center;
}

.dropdown-content {
    flex: 1;
}

.dropdown-title {
    font-weight: 600;
    margin-bottom: 2px;
}

.dropdown-desc {
    font-size: 12px;
    color: #6c757d;
}

/* Status Indicator */
.status-indicator {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    background: #28a745;
    color: white;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
}

.status-dot {
    width: 8px;
    height: 8px;
    background: white;
    border-radius: 50%;
    animation: pulse 2s infinite;
}

.connected {
    background: #27ae60;
    color: white;
}

.disconnected {
    background: #e74c3c;
    color: white;
}

/* Main Content */
.main-content {
    max-width: 1400px;
    margin: 30px auto;
    padding: 0 20px;
    display: grid;
    grid-template-columns: 1fr 1fr 400px;
    gap: 30px;
}

.section {
    background: white;
    border-radius: 15px;
    padding: 25px;
    box-shadow: 0 5px 25px rgba(0,0,0,0.1);
    backdrop-filter: blur(10px);
}

.section h2 {
    margin-bottom: 20px;
    color: #2c3e50;
    font-size: 20px;
    display: flex;
    align-items: center;
    gap: 10px;
    border-bottom: 2px solid #3498db;
    padding-bottom: 10px;
}

/* Students List */
.students-list {
    max-height: 300px;
    overflow-y: auto;
}

.student-item {
    background: white;
    margin: 10px 0;
    padding: 15px;
    border-radius: 8px;
    border-left: 4px solid #27ae60; /* Changed from border-right for LTR */
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.student-name {
    font-weight: bold;
    font-size: 1.2em;
    color: #2c3e50;
}

.student-status {
    font-size: 0.9em;
    color: #27ae60;
    margin-top: 5px;
}

.no-students {
    text-align: center;
    color: #666;
    font-style: italic;
    padding: 20px;
}

/* Messages Area */
.chat-messages, .messages-area {
    max-height: 400px;
    overflow-y: auto;
    border: 1px solid #ddd;
    border-radius: 8px;
    background: white;
    padding: 15px;
    margin-bottom: 15px;
}

.message-item {
    padding: 15px;
    border-bottom: 1px solid #eee;
    animation: slideInMessage 0.3s ease-out;
    text-align: left; /* Explicit LTR alignment */
    direction: ltr;
}

.message-item:last-child {
    border-bottom: none;
}

.message-sender {
    font-weight: bold;
    color: #3498db;
    margin-bottom: 5px;
}

.message-content {
    color: #555;
    margin-bottom: 5px;
}

.message-time {
    font-size: 0.8em;
    color: #999;
}

.no-messages {
    text-align: center;
    color: #666;
    font-style: italic;
    padding: 20px;
}

/* Chat Input */
.chat-input, .send-message-area {
    background: white;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    margin-top: 15px;
}

.chat-input textarea, .message-input {
    width: 100%;
    padding: 12px;
    border: 2px solid #ddd;
    border-radius: 20px;
    resize: none;
    font-family: inherit;
    font-size: 14px;
    line-height: 1.4;
    transition: all 0.3s ease;
    direction: ltr; /* Changed from rtl */
    text-align: left; /* Changed from right */
    min-height: 60px;
}

.chat-input textarea:focus, .message-input:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 10px rgba(52, 152, 219, 0.2);
}

.chat-input button, .send-button {
    width: 100%;
    margin-top: 10px;
    padding: 12px;
    background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
    color: white;
    border: none;
    border-radius: 20px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 16px;
}

.chat-input button:hover, .send-button:hover {
    background: linear-gradient(135deg, #2980b9 0%, #1f5f8b 100%);
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
}

.chat-input button:active, .send-button:active {
    transform: translateY(0);
}

/* Activity Log */
.activity-log {
    max-height: 300px;
    overflow-y: auto;
    padding: 10px;
}

.activity-item {
    background: white;
    margin: 8px 0;
    padding: 12px;
    border-radius: 6px;
    border-left: 3px solid #e74c3c; /* Changed from border-right for LTR */
    font-size: 0.9em;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    text-align: left; /* Explicit LTR alignment */
    direction: ltr;
}

.activity-time {
    font-size: 0.8em;
    color: #666;
    margin-bottom: 5px;
}

.activity-content {
    color: #333;
}

.no-activity {
    text-align: center;
    color: #666;
    font-style: italic;
    padding: 20px;
}

/* Stats */
.stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 15px;
    margin-bottom: 20px;
}

.stat-card {
    background: white;
    padding: 20px;
    border-radius: 10px;
    text-align: center;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.stat-number {
    font-size: 2em;
    font-weight: bold;
    color: #3498db;
}

.stat-label {
    color: #666;
    margin-top: 5px;
}

/* Special Buttons */
.danger-item:hover {
    background: #fff5f5 !important;
    color: #dc3545 !important;
}

.success-item:hover {
    background: #f0fff4 !important;
    color: #28a745 !important;
}

.warning-item:hover {
    background: #fffbf0 !important;
    color: #ffc107 !important;
}

.tool-button.danger {
    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
    color: white;
    border: 2px solid #c0392b;
}

.tool-button.danger:hover {
    background: linear-gradient(135deg, #c0392b 0%, #a93226 100%);
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
}

.tool-button.danger:active {
    transform: translateY(-1px);
}

.tool-button.danger .tool-icon {
    font-size: 24px;
}

.tool-button.danger .tool-label {
    font-weight: bold;
}

/* Quick Actions */
.quick-actions {
    margin-top: 20px;
}

.action-button {
    display: block;
    width: 100%;
    padding: 10px;
    margin: 8px 0;
    background: #27ae60;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    transition: background 0.3s;
}

.action-button:hover {
    background: #229954;
}

.action-button.secondary {
    background: #95a5a6;
}

.action-button.secondary:hover {
    background: #7f8c8d;
}

/* Debug Console */
.enhanced-debug-console {
    position: fixed;
    bottom: 10px;
    left: 10px;
    width: 500px;
    height: 200px;
    background: #1a1a1a;
    color: #00ff00;
    font-family: 'Courier New', monospace;
    font-size: 11px;
    padding: 10px;
    border-radius: 8px;
    overflow-y: auto;
    z-index: 9999;
    border: 2px solid #333;
    box-shadow: 0 4px 20px rgba(0,0,0,0.5);
    display: none;
    direction: ltr; /* Force LTR for debug console */
    text-align: left;
}

/* Animations */
@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}

@keyframes slideInMessage {
    from {
        transform: translateX(-100%); /* Changed direction for LTR */
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.pulse {
    animation: pulse 2s infinite;
}

/* Scrollbars */
.students-list::-webkit-scrollbar,
.chat-messages::-webkit-scrollbar,
.messages-area::-webkit-scrollbar,
.activity-log::-webkit-scrollbar {
    width: 6px;
}

.students-list::-webkit-scrollbar-track,
.chat-messages::-webkit-scrollbar-track,
.messages-area::-webkit-scrollbar-track,
.activity-log::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
}

.students-list::-webkit-scrollbar-thumb,
.chat-messages::-webkit-scrollbar-thumb,
.messages-area::-webkit-scrollbar-thumb,
.activity-log::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 3px;
}

.students-list::-webkit-scrollbar-thumb:hover,
.chat-messages::-webkit-scrollbar-thumb:hover,
.messages-area::-webkit-scrollbar-thumb:hover,
.activity-log::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

/* Responsive Design */
@media (max-width: 768px) {
    .nav-menu {
        display: none;
    }
    
    .main-content {
        grid-template-columns: 1fr;
        gap: 20px;
        margin: 20px auto;
    }
    
    .dropdown {
        position: fixed;
        top: 70px;
        left: 20px;
        right: 20px;
        min-width: auto;
    }
    
    .section {
        padding: 15px;
    }
    
    .nav-container {
        padding: 0 15px;
    }
}

/* Modal Styles */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9998 !important;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.modal-overlay.visible {
    opacity: 1;
    visibility: visible;
}

.modal-content {
    background: white;
    border-radius: 15px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow: hidden;
    transform: scale(0.9);
    transition: transform 0.3s ease;
}

.modal-overlay.visible .modal-content {
    transform: scale(1);
}

.modal-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-header h3 {
    margin: 0;
    font-size: 18px;
}

.modal-close {
    background: none;
    border: none;
    color: white;
    font-size: 24px;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background 0.2s ease;
}

.modal-close:hover {
    background: rgba(255, 255, 255, 0.2);
}

.modal-body {
    padding: 20px;
    text-align: left; /* Explicit LTR */
    direction: ltr;
}

.modal-body p {
    margin-bottom: 15px;
    color: #666;
    font-size: 14px;
}

.modal-body textarea {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 8px;
    resize: vertical;
    font-family: inherit;
    font-size: 14px;
    outline: none;
    transition: border-color 0.2s ease;
    direction: ltr; /* Explicit LTR */
    text-align: left;
}

.modal-body textarea:focus {
    border-color: #667eea;
}

.modal-footer {
    padding: 20px;
    display: flex;
    gap: 10px;
    justify-content: flex-end;
    border-top: 1px solid #eee;
}

.modal-footer button {
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.2s ease;
}

.modal-footer button:not(.primary) {
    background: #f8f9fa;
    color: #666;
}

.modal-footer button:not(.primary):hover {
    background: #e9ecef;
}

.modal-footer button.primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.modal-footer button.primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
}

/* Private Message Button */
.private-message-btn {
    background: linear-gradient(135deg, #43a047 0%, #388e3c 100%);
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.private-message-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(67, 160, 71, 0.4);
}

/* Student Item Styles */
.student-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    border: 1px solid #eee;
    border-radius: 8px;
    margin-bottom: 8px;
    background: #f8f9fa;
    transition: all 0.2s ease;
}

.student-item:hover {
    background: #e9ecef;
    border-color: #667eea;
}

.student-info {
    display: flex;
    align-items: center;
    gap: 10px;
    flex: 1;
}

.student-name {
    font-weight: 600;
    color: #333;
}

.student-actions {
    display: flex;
    gap: 8px;
}

/* Message Item Styles */
.message-item {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 12px;
    margin-bottom: 8px;
    border-left: 4px solid #667eea; /* Changed from border-right for LTR */
}

.message-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
}

.message-sender {
    font-weight: 600;
    color: #333;
}

.message-time {
    font-size: 12px;
    color: #666;
}

.message-content {
    color: #555;
    line-height: 1.4;
}

/* Room Code Section */
.room-code-section {
    grid-column: 1 / -1;
    margin-bottom: 20px;
}

/* AI Model Button Styles */
.ai-model-btn.active {
    background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%) !important;
    color: white !important;
}

.ai-model-btn.active .dropdown-title,
.ai-model-btn.active .dropdown-desc {
    color: white !important;
}

.current-ai-model {
    font-weight: bold;
    color: #4CAF50;
}

/* Header Room Display */
.header-room-display {
    display: flex;
    align-items: center;
    gap: 12px;
    background-color: rgba(255, 255, 255, 0.1);
    padding: 5px 15px;
    border-radius: 20px;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.room-code-label {
    font-size: 14px;
    font-weight: 500;
    color: #444;
}

.room-code-value {
    font-size: 20px;
    font-weight: bold;
    color: #3f51b5;
    letter-spacing: 2px;
}

.qr-code {
    width: 40px;
    height: 40px;
    border-radius: 4px;
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.qr-code:hover {
    transform: scale(3.5);
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    border: 2px solid white;
}

/* Loading Overlay */
#loading-overlay {
    position: fixed;
    inset: 0;
    background-color: rgba(94, 91, 204, 0.95);
    z-index: 10001;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: opacity 0.5s ease;
}

#loading-overlay.hidden {
    opacity: 0;
    pointer-events: none;
}

.spinner {
    width: 60px;
    height: 60px;
    border: 5px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: #ffffff;
    animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Poll Styles */
.poll-type-btn {
    padding: 15px 20px;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    background: white;
    color: #333;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: center;
}

.poll-type-btn:hover {
    border-color: #42a5f5;
    background: #f0f8ff;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(66, 165, 245, 0.2);
}

.poll-type-btn:active {
    transform: translateY(0);
}

#poll-results-container {
    margin-top: 20px;
}

#poll-results-container > div {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 10px;
    border-left: 4px solid #42a5f5; /* Changed from border-right for LTR */
}

#stop-poll-btn {
    background: #e74c3c;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    margin-top: 20px;
    font-weight: 500;
    transition: all 0.3s ease;
}

#stop-poll-btn:hover {
    background: #c0392b;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(231, 76, 60, 0.3);
}

/* Logo Styles */
.logo-icon {
  font-size: 1.3em;
  margin-right: 8px;
  vertical-align: middle;
}

.logo-text {
  vertical-align: middle;
}

/* High Z-index Elements */
#classroom-ai-btn {
    z-index: 10001 !important;
    position: fixed !important;
}

#classroom-ai-container {
    z-index: 10002 !important;
    position: fixed !important;
}

#poll-creation-modal,
#open-question-modal {
    z-index: 9998 !important;
}

#classroom-chat-btn {
    z-index: 10000 !important;
}

#classroom-chat-container {
    z-index: 10001 !important;
}

================================================================================
File 29/34: C:\Users\Meir Livneh\Documents\fireClass\public\firebase-config.js
================================================================================

var firebaseConfig = {
  apiKey: "AIzaSyAyi3h3OZasXI123uA7X6YAbwPFgopgl_w",
  authDomain: "fireclass-us.firebaseapp.com",
  projectId: "fireclass-us",
  storageBucket: "fireclass-us.appspot.com",
  messagingSenderId: "600159423729",
  appId: "1:600159423729:web:0d65fb1b01a67a127fed50",
  measurementId: "G-Y7GYKR7LQD"
};

================================================================================
File 30/34: C:\Users\Meir Livneh\Documents\fireClass\public\index.html
================================================================================

<!DOCTYPE html>
<!--
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
-->
<html lang="en" dir="ltr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher Dashboard - ClassroomSDK</title>
    <!-- CSS Link -->
    <link rel="stylesheet" href="css/teacher-dashboard.css">
</head>
<body>
    <div id="loading-overlay">
        <div class="spinner"></div>
    </div>
    <!-- Header with Professional Navigation -->
    <header class="header">
        <div class="nav-container">
            <div class="logo">
                <span class="logo-icon">‚öôÔ∏è</span>
                <span class="logo-text">fireClass Control</span>
            </div>
            
            <div id="header-room-display" class="header-room-display">
                <span class="room-code-label">Room Code:</span>
                <span id="header-room-code" class="room-code-value">...</span>
                <img id="qr-code-image" class="qr-code" alt="QR Code for Classroom" title="Click to copy student link"/>
            </div>
            
            <nav>
                <ul class="nav-menu">
                    <!-- Quick Actions -->
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <span class="nav-icon">‚ö°</span>
                            <span>Quick Actions</span>
                        </a>
                        <div class="dropdown">
                            <div class="dropdown-header">Quick actions for lesson management</div>
                            <a href="#" class="dropdown-item success-item" onclick="sendQuickMessage('Let\'s start the lesson!')">
                                <span class="dropdown-icon">üéì</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Start Lesson</div>
                                    <div class="dropdown-desc">Send message to all students</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item warning-item" onclick="sendQuickMessage('Time for a break! Come back in 5 minutes.')">
                                <span class="dropdown-icon">‚òï</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Break Time</div>
                                    <div class="dropdown-desc">Announce break time</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item" onclick="sendQuickMessage('The lesson has ended. Well done everyone!')">
                                <span class="dropdown-icon">‚úÖ</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">End Lesson</div>
                                    <div class="dropdown-desc">Finish the lesson</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item danger-item" onclick="resetClassroomData()">
                                <span class="dropdown-icon">üîÑ</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">New Lesson</div>
                                    <div class="dropdown-desc">Clear all lesson data</div>
                                </div>
                            </a>
                        </div>
                    </li>

                    <!-- Games and Content -->
                    <li class="nav-item">
                        <a href="#" class="nav-link" onclick="window.teacherDashboard.openContentModal()">
                            <span class="nav-icon">üéÆ</span>
                            <span>Games & Content</span>
                        </a>
                    </li>

                    <!-- AI Management -->
                    <li class="nav-item">
                        <a href="#" class="nav-link" id="aiMenuLink">
                            <span class="nav-icon">ü§ñ</span>
                            <span>AI Management</span>
                        </a>
                        <div class="dropdown">
                            <div class="dropdown-header">AI Assistant settings for students</div>
                            
                            <a href="#" class="dropdown-item" id="toggleAI" onclick="console.log('üü¢ TRACE: AI button clicked'); window.teacherDashboard.toggleAIForClass()">
                                <span class="dropdown-icon" id="aiStatusIcon">üî¥</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title" id="aiStatusText">AI disabled for students</div>
                                    <div class="dropdown-desc">Click to enable</div>
                                </div>
                            </a>
                            
                            <div style="padding: 10px 20px; border-top: 1px solid #f0f2f5; background: #f8f9fa;">
                                <strong style="font-size: 14px; color: #555;">üéØ Select model for class:</strong>
                                <div style="font-size: 12px; color: #777; margin-top: 2px;">Current model: <span class="current-ai-model">ChatGPT</span></div>
                            </div>
                            
                            <a href="#" class="dropdown-item ai-model-btn" data-model="chatgpt" onclick="window.teacherDashboard.switchAIModel('chatgpt')">
                                <span class="dropdown-icon">ü§ñ</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">ChatGPT</div>
                                    <div class="dropdown-desc">Advanced model from OpenAI</div>
                                </div>
                            </a>
                            
                            <a href="#" class="dropdown-item ai-model-btn" data-model="claude" onclick="window.teacherDashboard.switchAIModel('claude')">
                                <span class="dropdown-icon">üß†</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Claude</div>
                                    <div class="dropdown-desc">Smart model from Anthropic</div>
                                </div>
                            </a>
                            
                            <a href="#" class="dropdown-item ai-model-btn" data-model="gemini" onclick="window.teacherDashboard.switchAIModel('gemini')">
                                <span class="dropdown-icon">‚ú®</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Gemini</div>
                                    <div class="dropdown-desc">Google's model</div>
                                </div>
                            </a>
                        </div>
                    </li>

                    <!-- Tools -->
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <span class="nav-icon">üîß</span>
                            <span>Tools</span>
                        </a>
                        <div class="dropdown">
                            <div class="dropdown-header">Utilities and debugging tools</div>
                            <a href="#" class="dropdown-item" onclick="toggleDebug()">
                                <span class="dropdown-icon">üêõ</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Debug Console</div>
                                    <div class="dropdown-desc">Show technical information</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item" onclick="exportData()">
                                <span class="dropdown-icon">üìä</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Export Data</div>
                                    <div class="dropdown-desc">Save student list and messages</div>
                                </div>
                            </a>
                        </div>
                    </li>

                    <!-- Polls -->
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <span class="nav-icon">üìä</span>
                            <span>Polls</span>
                        </a>
                        <div class="dropdown">
                            <a href="#" class="dropdown-item" onclick="window.teacherDashboard.openPollCreationModal()">
                                <span class="dropdown-icon">‚ûï</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Start New Poll</div>
                                    <div class="dropdown-desc">Send quick question to class</div>
                                </div>
                            </a>
                        </div>
                    </li>

                    <!-- Reports -->
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <span class="nav-icon">üìä</span>
                            <span>Reports</span>
                        </a>
                        <div class="dropdown">
                            <div class="dropdown-header">Reports and analytics (FFU)</div>
                            <a href="#" class="dropdown-item" onclick="generateLessonSummary()">
                                <span class="dropdown-icon">üìã</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Lesson Summary</div>  
                                    <div class="dropdown-desc">Comprehensive AI report of entire lesson</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item" onclick="exportLessonData()">
                                <span class="dropdown-icon">üíæ</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Export Lesson Data</div>
                                    <div class="dropdown-desc">Save all data to file</div>
                                </div>
                            </a>
                        </div>
                    </li>
                </ul>
            </nav>

            <!-- Add this button right after the <nav> element -->
            <button id="resetScreensBtn" title="Stop current activity and clear all student screens" style="background: #e74c3c; color: white; border: none; padding: 8px 16px; border-radius: 20px; font-weight: 500; cursor: pointer; display: flex; align-items: center; gap: 8px;">
                <span style="font-size: 18px;">‚èπÔ∏è</span>
                <span>Clear Screens</span>
            </button>

            <div class="status-indicator" id="connectionStatus">
                <div class="status-dot"></div>
                <span>Connecting...</span>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Students Section -->
        <div class="section">
            <h2>üë• Connected Students (<span id="studentsCount">0</span>)</h2>
            <div id="studentsList" class="students-list">
                <div class="no-students">No students connected yet</div>
            </div>
        </div>

        <!-- Chat Section -->
        <div class="section">
            <h2>üí¨ Communication with Students</h2>
            <div id="messagesArea" class="chat-messages">
                <div class="no-messages">No messages yet</div>
            </div>
            <form id="chat-form" style="display: flex; gap: 10px;">
                <input type="text" id="chat-input" placeholder="Type a message to all students..." required style="flex-grow: 1;">
                <button type="submit">Send</button>
            </form>
        </div>

        <!-- Poll Section -->
        <div class="section" id="poll-section" style="display:none;">
            <h2>üìä Real-time Poll Results</h2>
            <div id="poll-results-container"></div>
            <button id="stop-poll-btn" style="background: #e74c3c; color: white; padding: 10px 20px; border: none; border-radius: 6px; cursor: pointer; margin-top: 20px;">End poll and hide results</button>
        </div>

        <!-- Activity Section -->
        <div class="section">
            <h2>üìä Recent Activity</h2>
            <div id="activitiesArea" class="activity-log">
                <div class="no-activity">No activity yet</div>
            </div>
        </div>
    </div>

    <!-- Templates -->
    <template id="studentTemplate">
        <div class="student-item">
            <div class="student-info">
                <span class="student-name"></span>
                <div class="student-actions"></div>
            </div>
        </div>
    </template>

    <!-- Private Message Modal -->
    <div id="privateMessageModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>‚úâÔ∏è Private Message</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body">
                <p>Sending private message to: <span id="privateMessageRecipient"></span></p>
                <textarea id="privateMessageText" placeholder="Write your private message..." rows="4"></textarea>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Cancel</button>
                <button onclick="sendPrivateMessage()" class="primary">Send Message</button>
            </div>
        </div>
    </div>

    <!-- Message Modal -->
    <div id="messageModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>üí¨ Send Message to Class</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body">
                <form id="messageForm">
                    <textarea id="messageText" placeholder="Write a message to all students..." rows="4" required></textarea>
                </form>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Cancel</button>
                <button type="submit" form="messageForm" class="primary">Send Message</button>
            </div>
        </div>
    </div>

    <!-- Custom Content Modal -->
    <div id="customContentModal" class="modal-overlay">
        <div class="modal-content" style="max-width: 600px;">
            <div class="modal-header">
                <h3>üì§ Send Game or Content to Students</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body" style="padding: 0;">
                <div id="game-list-container" style="padding: 20px; max-height: 300px; overflow-y: auto; border-bottom: 1px solid #eee;">
                </div>
                <div id="custom-url-section" style="padding: 20px; background: #f9f9f9;">
                    <p style="margin: 0 0 10px 0; font-weight: 500;">Or send custom link:</p>
                    <form id="customUrlForm" style="display: flex; gap: 10px;">
                        <input type="url" id="customUrlInput" placeholder="Enter full URL..." required style="flex-grow: 1; padding: 10px; border: 1px solid #ccc; border-radius: 6px;">
                        <button type="submit" class="primary" style="white-space: nowrap;">Send Link</button>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                 <a href="#" class="danger-item" onclick="window.teacherDashboard.sendCommand('LOAD_CONTENT', { url: 'about:blank' })" style="margin-right: auto; text-decoration:none; padding: 8px 12px; border-radius: 6px;">
                    ‚èπÔ∏è Stop content and clear screens
                </a>
                <button class="modal-close">Close</button>
            </div>
        </div>
    </div>

    <!-- Poll Creation Modal -->
    <div id="poll-creation-modal" class="modal-overlay">
        <div class="modal-content" style="max-width: 400px;">
            <div class="modal-header">
                <h3>Select Poll Type</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body" style="display: flex; flex-direction: column; gap: 15px;">
                <button class="poll-type-btn" data-type="yes_no">Yes / No Poll</button>
                <button class="poll-type-btn" data-type="multiple_choice">Multiple Choice Poll (1-4)</button>
                <button class="poll-type-btn" data-type="open_text">Open Question (Free text)</button>
            </div>
        </div>
    </div>

    <!-- Open Question Modal -->
    <div id="open-question-modal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Open Question Responses</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div id="open-question-results" class="modal-body" style="max-height: 400px; overflow-y: auto;"></div>
            <div class="modal-footer" style="display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; gap: 10px;">
                    <button id="ai-summarize-btn">Summarize with AI</button>
                    <button id="ai-keywords-btn">Extract Keywords</button>
                </div>
                <button id="close-open-question-btn" class="danger-item" style="padding: 8px 16px; border-radius: 6px; border: none; cursor: pointer;">
                    ‚èπÔ∏è End Poll
                </button>
            </div>
        </div>
    </div>

    <!-- End Lesson Modal -->
    <div id="end-lesson-modal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>üéì End of Lesson</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body">
                <p>The lesson has ended! Choose which report you'd like to generate:</p>
                <div style="display: flex; flex-direction: column; gap: 10px; margin-top: 15px;">
                    <button class="poll-type-btn" onclick="generateLessonSummary()">
                        üìã Comprehensive Summary Report
                    </button>
                    <button class="poll-type-btn" onclick="exportLessonData()">
                        üíæ Export Lesson Data
                    </button>
                    <button class="poll-type-btn" onclick="generateStudentProgress()">
                        üë• Student Progress Report
                    </button>
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Close</button>
            </div>
        </div>
    </div>

<!-- Scripts -->
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-functions-compat.js"></script>
    <script src="firebase-config.js"></script>

    <!-- ◊ò◊¢◊ü ◊ê◊™ ClassroomSDK ◊ú◊§◊†◊ô teacher-dashboard -->
    <script src="js/ClassroomSDK.js"></script>
    <script src="js/teacher-dashboard.js"></script>

    <script>
        console.log('üü¢ TRACE: index.html loaded');
        
        // ◊ï◊ï◊ì◊ê ◊©Firebase ◊û◊ê◊ï◊™◊ó◊ú
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();
        const auth = firebase.auth();
        const functions = firebase.functions();
        
        console.log('üîç Firebase initialized');
        console.log('üîç ClassroomSDK available:', typeof ClassroomSDK);
        
        window.addEventListener('load', () => {
            console.log('üü¢ TRACE: Window loaded, initializing teacher dashboard');
            window.teacherDashboard = new TeacherDashboard();
            window.teacherDashboard.init().then(() => {
                console.log('‚úÖ Teacher dashboard fully initialized');
            }).catch(error => {
                console.error('‚ùå Teacher dashboard initialization failed:', error);
            });
        });
        
        // ◊§◊ï◊†◊ß◊¶◊ô◊ï◊™ ◊í◊ú◊ï◊ë◊ú◊ô◊ï◊™
        function sendQuickMessage(message) {
            console.log('üü¢ TRACE: sendQuickMessage called');
            if (window.teacherDashboard) {
                window.teacherDashboard.sendMessageToClass(message);
            } else {
                console.error('‚ùå teacherDashboard not available');
            }
        }

        function testAIService() {
            console.log('üü¢ TRACE: testAIService called');
            if (window.teacherDashboard && window.teacherDashboard.testAIService) {
                window.teacherDashboard.testAIService();
            } else {
                console.error('‚ùå testAIService not available');
            }
        }

        function sendPrivateMessage() {
            if (window.teacherDashboard && window.teacherDashboard.sendPrivateMessage) {
                window.teacherDashboard.sendPrivateMessage();
            }
        }

        // ◊ë◊ì◊ô◊ß◊™ debug ◊ú◊û◊¶◊ë ◊î◊û◊¢◊®◊õ◊™
        function debugSystemState() {
            console.log('üîç System Debug:');
            console.log('- window.teacherDashboard:', !!window.teacherDashboard);
            console.log('- teacherDashboard.sdk:', !!window.teacherDashboard?.sdk);
            console.log('- sdk.toggleAI:', !!window.teacherDashboard?.sdk?.toggleAI);
            console.log('- ClassroomSDK:', typeof ClassroomSDK);
            
            if (window.teacherDashboard?.sdk) {
                console.log('- SDK methods:', Object.getOwnPropertyNames(window.teacherDashboard.sdk));
            }
        }
        
        // ◊ß◊®◊ê ◊ú◊ë◊ì◊ô◊ß◊î ◊ê◊ó◊®◊ô 3 ◊©◊†◊ô◊ï◊™
        setTimeout(debugSystemState, 3000);
    </script>
</body>
</html>

================================================================================
File 31/34: C:\Users\Meir Livneh\Documents\fireClass\public\js\ClassroomSDK.js
================================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */

// SIMPLIFIED CLASSROOM SDK - 4-DIGIT ROOM CODES ONLY!

class ClassroomSDK {
    constructor() {
        try {
            this.db = firebase.firestore();
            this.auth = firebase.auth();
            this.functions = firebase.app().functions();
            console.log('‚úÖ Firebase services initialized in constructor.');
        } catch (e) {
            console.error("‚ùå CRITICAL: Could not initialize Firebase services.", e);
            alert("Fatal Error: Could not connect to Firebase services. Please refresh.");
        } 
        

        this.playerName = null;
        this.roomCode = null; // 4-digit room code
        this.isTeacher = false;
        this.isInitialized = false;
        this.studentId = null;
        this.isAiActiveForClass = false;

        // UI components
        this.chatButton = null;
        this.chatContainer = null;
        this.chatMessages = null;
        this.chatInput = null;
        this.aiButton = null;
        this.aiContainer = null;
        this.aiMessages = null;
        this.aiInput = null;
        
        // Listeners
        this.studentsListener = null;
        this.messagesListener = null;
        this.roomListener = null;
    }

    // Anonymous authentication
    async loginAnonymously() {
        try {
            const userCredential = await this.auth.signInAnonymously();
            console.log('‚úÖ Anonymous login successful:', userCredential.user.uid);
            return userCredential.user;
        } catch (error) {
            console.error('üî• Anonymous login failed:', error);
            throw error;
        }
    }

    // Generate unique 4-digit room code
    async generateUniqueRoomCode() {
        let attempts = 0;
        const maxAttempts = 20; // Maximum 20 attempts
        
        while (attempts < maxAttempts) {
            // Generate random 4-digit code
            const roomCode = Math.floor(1000 + Math.random() * 9000).toString();
            
            // Check that code doesn't exist
            const roomRef = this.db.collection('rooms').doc(roomCode);
            const doc = await roomRef.get();
            
            if (!doc.exists) {
                console.log(`‚úÖ Found unique room code: ${roomCode}`);
                return roomCode;
            }
            
            console.log(`üîÑ Room code ${roomCode} exists, trying next...`);
            attempts++;
        }
        
        // If not found after 20 attempts, return random code
        const randomCode = Math.floor(1000 + Math.random() * 9000).toString();
        console.log(`‚úÖ Generated random room code: ${randomCode}`);
        return randomCode;
    }

    // SIMPLIFIED INIT - 4-digit room codes only!
    async init(appName, userOrStudentId, playerName, roomCode = null) {
        console.log(`üöÄ Initializing ${appName}...`);
        this.appName = appName;
        this.playerName = playerName;

        if (appName === 'teacher-dashboard') {
            // ◊™◊î◊ú◊ô◊ö ◊î◊ê◊™◊ó◊ï◊ú ◊©◊ú ◊î◊û◊ï◊®◊î
            this.isTeacher = true;
            this.playerName = "Teacher";
            this.roomCode = await this.generateUniqueRoomCode();
            await this.initializeRoom(userOrStudentId.uid); // Pass the teacher's UID

        } else if (appName === 'student-app' && roomCode) {
            // ◊™◊î◊ú◊ô◊ö ◊î◊ê◊™◊ó◊ï◊ú ◊©◊ú ◊î◊™◊ú◊û◊ô◊ì
            this.isTeacher = false;
            this.roomCode = roomCode;
            this.studentId = userOrStudentId; // This is the student's session ID

            // ◊ï◊ì◊ê ◊©◊î◊ó◊ì◊® ◊ß◊ô◊ô◊ù ◊ú◊§◊†◊ô ◊†◊ô◊°◊ô◊ï◊ü ◊î◊¶◊ò◊®◊§◊ï◊™
            const roomExists = await this.checkRoomExists(roomCode);
            if (!roomExists) {
                throw new Error(`Room with code ${roomCode} does not exist.`);
            }
            await this.joinRoom(this.studentId, this.playerName);

        } else {
            throw new Error('Invalid initialization parameters.');
        }

        this.isInitialized = true;
        console.log(`‚úÖ ${appName} initialized successfully for room: ${this.roomCode}`);
    }

    // ◊î◊ï◊°◊£ ◊ê◊™ ◊©◊™◊ô ◊î◊§◊ï◊†◊ß◊¶◊ô◊ï◊™ ◊î◊ê◊ú◊î ◊ú◊ß◊ú◊ê◊°
    async checkRoomExists(roomCode) {
        const roomRef = this.db.collection('rooms').doc(roomCode);
        const doc = await roomRef.get();
        return doc.exists;
    }

    // ◊¢◊ì◊õ◊ï◊ü ◊ß◊ú ◊ú◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ initializeRoom
    async initializeRoom(teacherUid) {
        const roomRef = this.db.collection('rooms').doc(this.roomCode);
        await roomRef.set({
            room_code: this.roomCode,
            created_at: firebase.firestore.FieldValue.serverTimestamp(),
            teacher_uid: teacherUid,
            settings: {
                ai_active: false,
                ai_model: 'chatgpt',
                current_command: null,
                currentPoll: { isActive: false }
            }
        });
    }

    // ◊¢◊ì◊õ◊ï◊ü ◊ß◊ú ◊ú◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ joinRoom
    async joinRoom(studentId, playerName) {
        const studentRef = this.db.collection('rooms').doc(this.roomCode)
                                 .collection('students').doc(studentId);
        await studentRef.set({
            uid: studentId,
            name: playerName,
            joined_at: firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // Listen for students
    listenForStudents(callback) {
        if (!this.roomCode) return;
        
        const studentsCollection = this.db.collection('rooms').doc(this.roomCode)
                                         .collection('students');
        
        this.studentsListener = studentsCollection.onSnapshot(snapshot => {
            const students = [];
            snapshot.forEach(doc => {
                students.push(doc.data());
            });
            console.log('üë®‚Äçüéì Students updated:', students.length);
            
            if (typeof callback === 'function') {
                callback(students);
            }
        }, error => {
            console.error("üî• Error listening for students:", error);
        });
    }

    // Listen for messages
    listenForMessages(callback) {
        if (!this.roomCode) return;

        const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                         .collection('messages')
                                         .orderBy('timestamp');

        this.messagesListener = messagesCollection.onSnapshot(snapshot => {
            const newMessages = [];
            snapshot.docChanges().forEach(change => {
                if (change.type === "added") {
                    const msg = change.doc.data();
                    const currentUserId = this.isTeacher ? this.auth.currentUser?.uid : this.studentId;
                    const isPrivate = msg.is_private === true;
                    const isRecipient = msg.recipient_uid === currentUserId;
                    const isSender = msg.sender_uid === currentUserId;

                    if (!isPrivate || this.isTeacher || isRecipient || isSender) {
                        newMessages.push(msg);
                    }
                }
            });

            if (newMessages.length > 0 && typeof callback === 'function') {
                callback(newMessages);
            }
        }, error => {
            console.error("üî• Error listening for messages:", error);
        });
    }

    // Listen for room updates (commands, AI, etc.)
    listenForRoomUpdates(callback) {
        if (!this.roomCode) return;
        const roomRef = this.db.collection('rooms').doc(this.roomCode);

        this.roomListener = roomRef.onSnapshot(doc => {
            if (doc.exists && typeof callback === 'function') {
                // ◊©◊ú◊ë ◊ß◊®◊ô◊ò◊ô: ◊©◊ú◊ó ◊ê◊™ ◊õ◊ú ◊ê◊ï◊ë◊ô◊ô◊ß◊ò ◊î◊†◊™◊ï◊†◊ô◊ù, ◊ï◊™◊ü ◊ú◊ê◊§◊ú◊ô◊ß◊¶◊ô◊î ◊ú◊î◊ó◊ú◊ô◊ò
                callback(doc.data());
            }
        }, error => {
            console.error("üî• Error listening for room updates:", error);
        });
    }

    // Send message
    async sendMessage(content) {
        if (!content || !content.trim() || !this.roomCode) return;

        try {
            const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                             .collection('messages');
            await messagesCollection.add({
                sender: this.playerName || "Teacher",
                sender_uid: this.isTeacher ? this.auth.currentUser?.uid : this.studentId,
                content: content,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                is_teacher: this.isTeacher
            });
        } catch (error) {
            console.error('üî• Error sending message:', error);
            throw error;
        }
    }

    // Send command (teacher only)
    async sendCommand(commandName, payload = {}) {
        const roomRef = this.db.collection('rooms').doc(this.roomCode);
        await roomRef.update({
            'settings.current_command': {
                command: commandName,
                payload: payload,
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            },
            'last_activity': firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // Toggle AI mode (teacher only)
    async toggleAI() {
        console.log('[DIAGNOSTIC] 1. toggleAI function started.');
        const roomRef = this.db.collection('rooms').doc(this.roomCode);

        try {
            const doc = await roomRef.get();
            const currentAI = doc.exists ? doc.data().settings?.ai_active : false;
            console.log(`[DIAGNOSTIC] 2. Read from DB. currentAI is: ${currentAI}`);

            const newValue = !currentAI;
            console.log(`[DIAGNOSTIC] 3. Value to be written to DB is: ${newValue}`);

            await roomRef.update({
                'settings.ai_active': newValue
            });

            console.log('[DIAGNOSTIC] 4. SUCCESS: roomRef.update command finished without error.');
            return newValue;

        } catch (error) {
            // ◊ê◊ù ◊™◊î◊ô◊î ◊©◊í◊ô◊ê◊î ◊õ◊ú◊©◊î◊ô ◊ë◊§◊¢◊ï◊ú◊™ ◊î◊õ◊™◊ô◊ë◊î, ◊†◊®◊ê◊î ◊ê◊ï◊™◊î ◊õ◊ê◊ü
            console.error('[DIAGNOSTIC] 5. CRITICAL FAILURE: Error during toggleAI process.', error);
            // ◊ñ◊®◊ï◊ß ◊ê◊™ ◊î◊©◊í◊ô◊ê◊î ◊î◊ú◊ê◊î ◊õ◊ì◊ô ◊©◊î◊ß◊ï◊ì ◊©◊ß◊®◊ê ◊ú◊§◊ï◊†◊ß◊¶◊ô◊î ◊ô◊ì◊¢ ◊©◊î◊ô◊ê ◊†◊õ◊©◊ú◊î
            throw error;
        }
    }

    // Cleanup
    cleanup() {
        if (this.studentsListener) {
            this.studentsListener();
            this.studentsListener = null;
        }
        if (this.messagesListener) {
            this.messagesListener();
            this.messagesListener = null;
        }
        if (this.roomListener) {
            this.roomListener();
            this.roomListener = null;
        }
        if (this.roomListener_Polls) {
            this.roomListener_Polls();
            this.roomListener_Polls = null;
        }
    }

    // Returns room code
    getRoomCode() {
        return this.roomCode;
    }

    // ========== CHAT INTERFACE ==========
    createChatInterface() {
        // Show chat interface only for students
        if (this.isTeacher) {
            console.log("Teacher view: Floating chat interface disabled.");
            return; 
        }

        if (document.getElementById('classroom-chat-btn')) return;
        
        this.chatButton = document.createElement('button');
        this.chatButton.id = 'classroom-chat-btn';
        this.chatButton.innerHTML = 'üí¨';
        this.chatButton.style.cssText = 'position: fixed; bottom: 20px; right: 20px; width: 60px; height: 60px; border-radius: 50%; background: #007bff; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 1000;';
        this.chatButton.onclick = () => this.toggleChat();
        this.makeDraggable(this.chatButton);
        document.body.appendChild(this.chatButton);

        this.chatContainer = document.createElement('div');
        this.chatContainer.id = 'classroom-chat-container';
        this.chatContainer.style.cssText = 'position: fixed; bottom: 100px; right: 20px; width: 350px; height: 400px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;';
        
        const chatHeader = document.createElement('div');
        chatHeader.style.cssText = 'background: #007bff; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        chatHeader.innerHTML = `
            <span>üí¨ Class Chat</span>
            <button id="chat-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 5px;">‚àí</button>
        `;
        
        this.makeDraggable(this.chatContainer, chatHeader);
        
        chatHeader.querySelector('#chat-minimize-btn').onclick = (e) => {
            e.stopPropagation();
            // Use App's close function to ensure state is updated
            if (window.App && window.App.closeChat) {
                window.App.closeChat();
            } else {
                this.toggleChat();
            }
        };
        
        this.chatContainer.appendChild(chatHeader);
        
        const chatContent = document.createElement('div');
        chatContent.style.cssText = 'height: calc(100% - 60px); display: flex; flex-direction: column;';
        
        this.chatMessages = document.createElement('div');
        this.chatMessages.id = 'classroom-chat-messages';
        this.chatMessages.style.cssText = 'flex: 1; padding: 15px; overflow-y: auto; background: #f8f9fa;';
        this.chatMessages.innerHTML = '<div style="text-align: center; color: #999; font-style: italic;">No messages sent yet</div>';
        
        const chatInputArea = document.createElement('div');
        chatInputArea.style.cssText = 'padding: 15px; border-top: 1px solid #eee; background: white;';
        
        this.chatInput = document.createElement('input');
        this.chatInput.type = 'text';
        this.chatInput.placeholder = 'Type a message...';
        this.chatInput.style.cssText = 'width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 20px; outline: none; font-size: 14px;';
        
        this.chatInput.onkeypress = (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const messageContent = this.chatInput.value.trim();
                if (messageContent) {
                    this.sendMessage(messageContent);
                    this.chatInput.value = '';
                }
            }
        };
        
        chatInputArea.appendChild(this.chatInput);
        chatContent.appendChild(this.chatMessages);
        chatContent.appendChild(chatInputArea);
        this.chatContainer.appendChild(chatContent);
        document.body.appendChild(this.chatContainer);
    }

    enableChat() {
        if (this.chatButton) {
            this.chatButton.style.display = 'block';
        }
    }

    toggleChat() {
        if (!this.chatContainer) return;
        
        // Use the App's state management functions
        if (window.App) {
            if (window.App.isChatOpen) {
                window.App.closeChat();
            } else {
                window.App.openChat();
                if (this.chatInput) {
                    this.chatInput.focus();
                }
            }
        } else {
            // Fallback for direct usage
            const isVisible = this.chatContainer.style.display !== 'none';
            this.chatContainer.style.display = isVisible ? 'none' : 'block';
            
            if (!isVisible && this.chatInput) {
                this.chatInput.focus();
            }
        }
    }

    addChatMessage(sender, content, messageObj) {
        if (!this.chatMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.style.cssText = 'margin-bottom: 10px; padding: 8px 12px; background: white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);';
        
        const senderSpan = document.createElement('div');
        senderSpan.style.cssText = 'font-weight: bold; color: #007bff; font-size: 12px; margin-bottom: 4px;';
        senderSpan.textContent = sender;
        
        const contentSpan = document.createElement('div');
        contentSpan.style.cssText = 'color: #333; line-height: 1.4;';
        contentSpan.textContent = content;
        
        messageDiv.appendChild(senderSpan);
        messageDiv.appendChild(contentSpan);
        
        // Remove first message if it's "No messages sent yet"
        if (this.chatMessages.children.length === 1 && 
            this.chatMessages.children[0].textContent.includes('No messages sent yet')) {
            this.chatMessages.innerHTML = '';
        }
        
        this.chatMessages.appendChild(messageDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    // ========== AI INTERFACE ==========
    createAIInterface() {
        if (document.getElementById('classroom-ai-btn')) return;

        this.aiButton = document.createElement('button');
        this.aiButton.id = 'classroom-ai-btn';
        this.aiButton.innerHTML = 'ü§ñ';
        // Button is now always visible
        this.aiButton.style.cssText = `position: fixed; bottom: 20px; right: 90px; width: 60px; height: 60px; border-radius: 50%; background: #4caf50; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10000; display: block;`;

        this.aiButton.onclick = () => this.toggleAI();
        this.makeDraggable(this.aiButton);
        document.body.appendChild(this.aiButton);

        // The rest of the function remains the same for creating the container...
        this.aiContainer = document.createElement('div');
        this.aiContainer.id = 'classroom-ai-container';
        this.aiContainer.style.cssText = 'position: fixed; bottom: 100px; right: 20px; width: 400px; height: 500px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;';

        const aiHeader = document.createElement('div');
        aiHeader.style.cssText = 'background: #4caf50; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        aiHeader.innerHTML = `<span>ü§ñ AI Assistant</span><button style="background:none;border:none;color:white;font-size:18px;cursor:pointer;">‚àí</button>`;

        this.makeDraggable(this.aiContainer, aiHeader);

        aiHeader.querySelector('button').onclick = (e) => {
            e.stopPropagation();
            this.toggleAI();
        };

        this.aiContainer.appendChild(aiHeader);

        const aiContent = document.createElement('div');
        aiContent.style.cssText = 'height: calc(100% - 60px); display: flex; flex-direction: column;';

        this.aiMessages = document.createElement('div');
        this.aiMessages.id = 'classroom-ai-messages';
        this.aiMessages.style.cssText = 'flex: 1; padding: 15px; overflow-y: auto; background: #f8f9fa;';
        this.aiMessages.innerHTML = '<div style="text-align: center; color: #999; font-style: italic;">Ask the AI assistant...</div>';

        const aiInputArea = document.createElement('div');
        aiInputArea.style.cssText = 'padding: 15px; border-top: 1px solid #eee; background: white;';

        this.aiInput = document.createElement('input');
        this.aiInput.type = 'text';
        this.aiInput.placeholder = 'Ask a question...';
        this.aiInput.style.cssText = 'width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 20px; outline: none; font-size: 14px;';
        this.aiInput.onkeypress = (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const prompt = this.aiInput.value.trim();
                if (prompt) {
                    const lang = document.documentElement.lang || 'en';
                    this.sendAIMessage(prompt, lang);
                    this.aiInput.value = '';
                }
            }
        };

        aiInputArea.appendChild(this.aiInput);
        aiContent.appendChild(this.aiMessages);
        aiContent.appendChild(aiInputArea);
        this.aiContainer.appendChild(aiContent);
        document.body.appendChild(this.aiContainer);
    }

    toggleAI() {
        if (!this.aiContainer) return;
        
        const isVisible = this.aiContainer.style.display !== 'none';
        this.aiContainer.style.display = isVisible ? 'none' : 'block';
        
        if (!isVisible && this.aiInput) {
            this.aiInput.focus();
        }
    }

    getInterfaceLanguage() {
        return document.documentElement.lang || 'en';
    }

    async sendAIMessage(prompt, language) {
        // Check if AI is disabled for students
        if (!this.isTeacher && !this.isAiActiveForClass) {
            this.addAIMessage("ü§ñ", "AI is not available at the moment.", false);
            return;
        }

        if (!language) language = this.getInterfaceLanguage();

        if (!this.functions) {
            this.addAIMessage("ü§ñ", "Error: AI service not initialized", false);
            return;
        }
        this.addAIMessage(this.playerName || "You", prompt, true);

        try {
            const askAIFunction = this.functions.httpsCallable('askAI');
            const result = await askAIFunction({ prompt, roomCode: this.roomCode, language });
            const senderName = result.data.model ? `ü§ñ (${result.data.model})` : "ü§ñ";
            this.addAIMessage(senderName, result.data.result, false);
        } catch (error) {
            console.error("üî• Error calling askAI:", error);
            let errorMsg = "An error occurred with the AI service.";
            if (error.code === 'functions/unauthenticated') {
                errorMsg = "Authentication error. Please reconnect.";
            }
            this.addAIMessage("ü§ñ", errorMsg, false);
        }
    }

    addAIMessage(sender, content, isUser) {
        if (!this.aiMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.style.cssText = `margin-bottom: 10px; padding: 8px 12px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); ${isUser ? 'background: #007bff; color: white; margin-left: 20px;' : 'background: white; color: #333; margin-right: 20px;'}`;
        
        const senderSpan = document.createElement('div');
        senderSpan.style.cssText = `font-weight: bold; font-size: 12px; margin-bottom: 4px; ${isUser ? 'color: rgba(255,255,255,0.8);' : 'color: #28a745;'}`;
        senderSpan.textContent = sender;
        
        const contentSpan = document.createElement('div');
        contentSpan.style.cssText = 'line-height: 1.4;';
        contentSpan.textContent = content;
        
        messageDiv.appendChild(senderSpan);
        messageDiv.appendChild(contentSpan);
        
        // Remove first message if it's "Ask the AI assistant..."
        if (this.aiMessages.children.length === 1 && 
            this.aiMessages.children[0].textContent.includes('Ask the AI assistant')) {
            this.aiMessages.innerHTML = '';
        }
        
        this.aiMessages.appendChild(messageDiv);
        this.aiMessages.scrollTop = this.aiMessages.scrollHeight;
    }

    // ========== UTILITY FUNCTIONS ==========
    makeDraggable(element, dragHandle = null) {
        const handle = dragHandle || element;
        handle.addEventListener('mousedown', (e) => {
            e.preventDefault();
            let startX = e.clientX - element.offsetLeft;
            let startY = e.clientY - element.offsetTop;
            if (element.style.right) {
                element.style.left = element.offsetLeft + 'px';
                element.style.right = ''; 
            }
            const handleMouseMove = (me) => {
                element.style.left = (me.clientX - startX) + 'px';
                element.style.top = (me.clientY - startY) + 'px';
            };
            const handleMouseUp = () => {
                document.removeEventListener('mousemove', handleMouseMove);
                document.removeEventListener('mouseup', handleMouseUp);
            };
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
        });
    }

    showGameNotification(message) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; left: 50%; transform: translateX(-50%);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; padding: 15px 25px; border-radius: 25px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2); z-index: 10000;
            font-weight: bold; font-size: 16px; animation: slideDown 0.3s ease;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideUp 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
        
        // Add CSS for animations
        if (!document.getElementById('notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                @keyframes slideDown { from { transform: translateX(-50%) translateY(-100%); opacity: 0; } to { transform: translateX(-50%) translateY(0); opacity: 1; } }
                @keyframes slideUp { from { transform: translateX(-50%) translateY(0); opacity: 1; } to { transform: translateX(-50%) translateY(-100%); opacity: 0; } }
            `;
            document.head.appendChild(style);
        }
    }

    // Send private message (teacher only)
    async sendPrivateMessage(content, recipientUid) {
        if (!content || !content.trim() || !this.roomCode || !recipientUid) return;

        try {
            const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                             .collection('messages');
            await messagesCollection.add({
                sender: this.playerName || "Teacher",
                sender_uid: this.isTeacher ? this.auth.currentUser?.uid : this.studentId,
                recipient_uid: recipientUid,
                content: content,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                is_teacher: this.isTeacher,
                is_private: true
            });
        } catch (error) {
            console.error('üî• Error sending private message:', error);
            throw error;
        }
    }

    // Test AI service availability
    async testAIService() {
        if (!this.functions) {
            return { available: false, error: "Firebase Functions not initialized", code: "functions/not-initialized" };
        }

        // Ensure user is authenticated before calling cloud function
        let user = this.auth.currentUser;
        if (!user) {
            try {
                const userCredential = await this.auth.signInAnonymously();
                user = userCredential.user;
            } catch (authError) {
                return { available: false, error: "Authentication failed", code: "auth-failed" };
            }
        }

        if (!user || !user.uid) {
            return { available: false, error: "User not authenticated", code: "auth-missing" };
        }
        
        try {
            const askChatGPTFunction = this.functions.httpsCallable('askChatGPT');
            const result = await askChatGPTFunction({ prompt: "Hello" });

            return { available: true, result: result.data.result, code: "success" };
        } catch (error) {
            return { available: false, error: error.message, code: error.code || "unknown" };
        }
    }

    // Poll management functions
    async startPoll(pollConfig) {
        if (!this.isTeacher) return;
        
        console.log("üìä Starting poll", pollConfig);
        
        const newPoll = {
            id: Date.now() + '_' + Math.random().toString(36).substr(2, 9), // New unique ID
            type: pollConfig.type,
            question: pollConfig.question || '', // Add question field
            options: pollConfig.options,
            isActive: true,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            responses: {}
        };

        await this.db.collection('rooms').doc(this.roomCode).update({
            'settings.currentPoll': newPoll
        });
        
        console.log("‚úÖ Poll started successfully");
    }

    async stopPoll() {
        if (!this.isTeacher) return;
        
        console.log("üìä Stopping poll");
        
        await this.db.collection('rooms').doc(this.roomCode).update({
            'settings.currentPoll.isActive': false
        });
        
        console.log("‚úÖ Poll stopped successfully");
    }

    async submitPollAnswer(answer) {
        if (!this.functions) {
            console.error("Firebase Functions is not initialized.");
            return;
        }
        try {
            const submitAnswerFunction = this.functions.httpsCallable('submitPollAnswer');
            await submitAnswerFunction({
                roomCode: this.roomCode,
                studentId: this.studentId,
                playerName: this.playerName,
                answer: answer
            });
            console.log("‚úÖ Poll answer successfully sent via Cloud Function.");
        } catch (error) {
            console.error("üî• Error calling submitPollAnswer cloud function:", error);
        }
    }

    listenForPollUpdates(callback) {
        this.roomListener_Polls = this.db.collection('rooms').doc(this.roomCode)
            .onSnapshot(doc => {
                const pollData = doc.data()?.settings?.currentPoll;
                this.lastKnownPollData = pollData;
                console.log("üìä Poll update received", pollData);
                if (typeof callback === 'function') {
                    callback(pollData);
                }
            });
    }

    getCurrentPollData() {
        return this.lastKnownPollData;
    }

    getStudentId() {
        return this.studentId;
    }

    // Function to save question history
    async saveQuestionToHistory(pollData) {
        if (!this.isTeacher || !pollData) return;
        const historyRef = this.db.collection('rooms').doc(this.roomCode)
            .collection('questionHistory').doc(pollData.id);
        await historyRef.set({
            ...pollData,
            closedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // ========== POLL INTERFACE ==========
    createPollInterface() {
        if (this.isTeacher || document.getElementById('classroom-poll-btn')) return;

        // 1. Create the permanent floating button
        this.pollButton = document.createElement('button');
        this.pollButton.id = 'classroom-poll-btn';
        this.pollButton.innerHTML = 'üìä<div id="poll-badge" style="position:absolute; top:-2px; right:-2px; width:12px; height:12px; border-radius:50%; background:red; display:none; border: 2px solid white;"></div>';
        this.pollButton.style.cssText = 'position: fixed; bottom: 20px; right: 160px; width: 60px; height: 60px; border-radius: 50%; background: #607d8b; color: white; border: none; font-size: 24px; cursor: pointer; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10000; display: block;'; // Always visible

        this.pollButton.onclick = () => {
            if (this.pollContainer && this.pollContainer.dataset.active === 'true') {
                const isVisible = this.pollContainer.style.display !== 'none';
                this.pollContainer.style.display = isVisible ? 'none' : 'block';
            }
        };

        // *** ADD THIS LINE TO MAKE THE BUTTON DRAGGABLE ***
        this.makeDraggable(this.pollButton);

        document.body.appendChild(this.pollButton);

        // 2. Create the draggable container
        this.pollContainer = document.createElement('div');
        this.pollContainer.id = 'classroom-poll-container';
        this.pollContainer.dataset.active = 'false'; // Custom attribute to track state
        this.pollContainer.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 450px; min-height: 200px; background: white; border-radius: 15px; box-shadow: 0 8px 40px rgba(0,0,0,0.25); z-index: 10001; display: none; overflow: hidden;';

        const pollHeader = document.createElement('div');
        pollHeader.style.cssText = 'background: #ff9800; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        pollHeader.innerHTML = '<span>üìä Poll / Question</span><button id="poll-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 5px;">‚àí</button>';

        this.makeDraggable(this.pollContainer, pollHeader);

        pollHeader.querySelector('#poll-minimize-btn').onclick = (e) => {
            e.stopPropagation();
            this.pollContainer.style.display = 'none';
        };

        const pollContentArea = document.createElement('div');
        pollContentArea.id = 'classroom-poll-content-area';
        pollContentArea.style.cssText = 'padding: 20px;';

        this.pollContainer.appendChild(pollHeader);
        this.pollContainer.appendChild(pollContentArea);
        document.body.appendChild(this.pollContainer);
    }
}

================================================================================
File 32/34: C:\Users\Meir Livneh\Documents\fireClass\public\js\student-app.js
================================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */
// ================== START OF FILE: public/js/student-app.js (COMPLETE AND FIXED) ==================
const App = {
    classroom: null,
    currentPollId: null, // Variable to track the currently displayed poll

    getOrCreateStudentId: function() {
        let studentId = sessionStorage.getItem('studentId');
        if (!studentId) {
            studentId = 'student_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('studentId', studentId);
        }
        return studentId;
    },

    init: function() {
        this.loadRoomCodeFromURL();
        document.getElementById('login-form')?.addEventListener('submit', this.handleLogin.bind(this));
    },

    loadRoomCodeFromURL: function() {
        const params = new URLSearchParams(window.location.search);
        const roomCode = params.get('classroom');
        if (roomCode) {
            const input = document.getElementById('teacher-uid');
            if(input) input.value = roomCode;
        }
    },

    handleLogin: async function(event) {
        event.preventDefault();
        const playerName = document.getElementById('player-name').value.trim();
        const roomCode = document.getElementById('teacher-uid').value.trim();
        const loginButton = event.target.querySelector('button');
        if (!playerName || !/^\d{4}$/.test(roomCode)) {
            alert('Name and a 4-digit room code are required!');
            return;
        }

        loginButton.textContent = 'Joining...';
        loginButton.disabled = true;

        try {
            this.classroom = new ClassroomSDK();
            const studentId = this.getOrCreateStudentId();
            await this.classroom.init('student-app', studentId, playerName, roomCode);

            document.getElementById('login-container').style.display = 'none';
            document.getElementById('main-container').style.display = 'block';

            this.classroom.createChatInterface();
            this.classroom.createAIInterface();
            this.classroom.createPollInterface();
            this.classroom.listenForRoomUpdates(this.stateManager.bind(this));

            this.classroom.listenForMessages((messages) => {
                const chatContainer = document.getElementById('classroom-chat-container');
                const isChatHidden = !chatContainer || chatContainer.style.display === 'none';

                messages.forEach(msg => {
                    this.classroom.addChatMessage(msg.sender, msg.content, msg);

                    if (isChatHidden && msg.is_teacher) {
                        this.classroom.toggleChat();
                    }
                });
            });

        } catch (error) {
            console.error("‚ùå Failed to initialize student app:", error);
            alert(`Failed to join the room: ${error.message}\nPlease check the room code and try again.`);
            loginButton.textContent = 'Join Lesson';
            loginButton.disabled = false;
        }
    },

    // The new central State Manager function
    stateManager: function(roomData) {
        if (!roomData || !roomData.settings) return;

        const settings = roomData.settings;
        const pollData = settings.currentPoll;
        const command = settings.current_command;

        // --- AI State Management ---
        // ** THE MAIN FIX IS HERE **
        // We no longer hide the AI button. Instead, we update the SDK's internal state.
        // The SDK's sendAIMessage function will now handle the logic of checking if AI is active.
        this.classroom.isAiActiveForClass = settings.ai_active === true;

        // --- Poll State Management ---
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollBadge = document.getElementById('poll-badge');
        const pollIsActive = pollData && pollData.isActive;

        if (pollBadge && pollContainer) {
            pollContainer.dataset.active = pollIsActive ? 'true' : 'false';
            pollBadge.style.display = pollIsActive ? 'block' : 'none';
        }

        if (pollIsActive) {
            // If a new poll has arrived, render its content and OPEN the window
            if (this.currentPollId !== pollData.id) {
                this.currentPollId = pollData.id;
                this.renderPollInterface(pollData); // This function will also make the window visible
            }
        } else {
            // If the poll has been stopped by the teacher, force-close the window
            if (this.currentPollId !== null) {
                this.clearPollInterface(); // This function now closes the window
                this.currentPollId = null;
            }
        }

        // --- Content Command Management ---
        if (command && command.command === 'LOAD_CONTENT') {
            const iframe = document.getElementById('content-frame');
            const newUrl = command.payload.url || 'about:blank';
            if (iframe && iframe.src !== newUrl) {
                iframe.src = newUrl;
            }
        }
    },

    renderPollInterface: function(pollData) {
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollContentArea = document.getElementById('classroom-poll-content-area');
        if (!pollContainer || !pollContentArea) return;

        // Show the poll window and render content inside it
        pollContainer.style.display = 'block';

        // Build the poll UI based on its type
        if (pollData.type === 'open_text') {
            pollContentArea.innerHTML = `
                <p style="margin-top:0; margin-bottom:15px; font-weight:500;">The teacher is asking a question. Please type your answer below.</p>
                <textarea id="open-answer-input" placeholder="Write your answer here..." style="width: 100%; height: 80px; padding: 10px; border-radius: 6px; border: 1px solid #ccc; box-sizing: border-box;"></textarea>
                <button id="submit-open-answer" style="width: 100%; padding: 12px; margin-top: 10px; border: none; background: #007bff; color: white; border-radius: 6px; cursor: pointer;">Submit Answer</button>
            `;
            document.getElementById('submit-open-answer').onclick = (event) => {
                const answerInput = document.getElementById('open-answer-input');
                const answer = answerInput.value.trim();
                const submitBtn = event.currentTarget;

                if (answer) {
                    this.classroom.submitPollAnswer(answer);
                    answerInput.value = '';
                    submitBtn.textContent = '‚úÖ Answer Sent!';
                    submitBtn.disabled = true;

                    setTimeout(() => {
                        submitBtn.textContent = 'Submit Answer';
                        submitBtn.disabled = false;
                    }, 2000);
                }
            };
        } else { 
            const labels = (pollData.type === 'yes_no') ? ['Yes', 'No'] : ['1', '2', '3', '4'];
            pollContentArea.innerHTML = `<p style="margin-top:0; margin-bottom:15px; font-weight:500;">The teacher is asking a quick question:</p>`;

            const buttonsWrapper = document.createElement('div');
            buttonsWrapper.style.cssText = 'display: flex; gap: 10px; flex-wrap: wrap;';

            for (let i = 1; i <= pollData.options; i++) {
                const button = document.createElement('button');
                button.textContent = labels[i-1];
                button.style.cssText = 'flex-grow: 1; padding: 12px; border: 1px solid #ccc; background: #f0f0f0; border-radius: 6px; cursor: pointer;';
                button.onclick = () => {
                    this.classroom.submitPollAnswer(i);
                    pollContentArea.innerHTML = '<p style="text-align:center; font-weight: bold; color: #28a745;">Thank you for your answer!</p>';
                };
                buttonsWrapper.appendChild(button);
            }
            pollContentArea.appendChild(buttonsWrapper);
        }
    },

    clearPollInterface: function() {
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollContentArea = document.getElementById('classroom-poll-content-area');

        if (pollContainer) {
            pollContainer.style.display = 'none'; // Hide the window
            pollContainer.dataset.active = 'false';
        }
        if (pollContentArea) {
            pollContentArea.innerHTML = ''; // Clear its content for the next poll
        }
    }
};

document.addEventListener('DOMContentLoaded', () => {
    App.init();
});
// ================== END OF FILE ==================

================================================================================
File 33/34: C:\Users\Meir Livneh\Documents\fireClass\public\js\teacher-dashboard.js
================================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */
// teacher-dashboard.js - English version with advanced AI selection menu

class TeacherDashboard {
    constructor() {
        console.log('üü¢ TRACE: TeacherDashboard constructor called');
        this.sdk = null;
        this.students = [];
        this.activities = [];
        this.isAiActive = false; // Track AI status
        this.isAiActiveForStudents = false; // Add new variable for tracking
        this.currentAiModel = 'chatgpt';
        this.aiWarningShown = false; // Prevent repeated messages
        this.config = {}; // üéØ Change here
        this.debugMode = false;
        this.currentQuestionResponses = {}; // Stores { studentName: [answers] }
        
        // üîß English locale fix - set locale
        this.locale = 'en-US';
        this.rtlSupport = false;
    }

    // Debugging utility with English support
    debugLog(message, data = null) {
        const debugEnabled = true;
        if (!debugEnabled) return;
        
        const debugConsoleContent = document.querySelector('.enhanced-debug-console .debug-content');
        if(debugConsoleContent) {
            const logEntry = document.createElement('div');
            logEntry.style.direction = 'ltr';
            logEntry.style.textAlign = 'left';
            logEntry.innerHTML = `<div>[${new Date().toLocaleTimeString(this.locale)}] ${message}</div>`;
            if (data) {
                const dataPre = document.createElement('pre');
                dataPre.style.cssText = 'margin-left: 20px; color: #ffaa00; direction: ltr; text-align: left;';
                dataPre.textContent = JSON.stringify(data, null, 2);
                logEntry.appendChild(dataPre);
            }
            debugConsoleContent.appendChild(logEntry);
            debugConsoleContent.scrollTop = debugConsoleContent.scrollHeight;
        }
        console.log(`[TEACHER DEBUG] ${message}`, data);
    }

    async init() {
        console.log('üü¢ TRACE: TeacherDashboard.init called');
        const loadingOverlay = document.getElementById('loading-overlay');
        try {
            this.debugLog("üöÄ Initializing teacher dashboard...");
            await this.loadConfigData();

            // ◊¶◊ï◊® SDK ◊ï◊™◊û◊™◊ô◊ü ◊©◊î◊ï◊ê ◊ô◊î◊ô◊î ◊û◊ï◊õ◊ü ◊ú◊ó◊ú◊ï◊ò◊ô◊ü
            this.sdk = new ClassroomSDK();
            console.log('üîç SDK created:', !!this.sdk);
            console.log('üîç SDK toggleAI method:', !!this.sdk.toggleAI);
            
            const user = await this.sdk.loginAnonymously();
            this.debugLog("üëë Teacher logged in successfully", { uid: user.uid });

            await this.sdk.init('teacher-dashboard', user);
            this.debugLog(`‚úÖ Teacher dashboard initialized with room: ${this.sdk.getRoomCode()}`);

            // ◊ï◊ï◊ì◊ê ◊©◊î-SDK ◊û◊ï◊õ◊ü ◊ú◊§◊†◊ô ◊ô◊¶◊ô◊®◊™ AI
            console.log('üîç Final SDK check before AI init:');
            console.log('- SDK exists:', !!this.sdk);
            console.log('- toggleAI exists:', !!this.sdk.toggleAI);
            console.log('- DB exists:', !!this.sdk.db);
            console.log('- roomCode exists:', !!this.sdk.roomCode);

            // ◊®◊ß ◊ê◊ñ ◊¶◊ï◊® ◊ê◊™ ◊û◊û◊©◊ß ◊î-AI
            this.sdk.createAIInterface();
            this.initializeTeacherAI();
            
            // ◊î◊û◊©◊ö ◊õ◊®◊í◊ô◊ú...
            this.sdk.listenForStudents(this.updateStudentsList.bind(this));
            this.sdk.listenForMessages((messages) => {
                if (messages && messages.length > 0) {
                    this.addMessage(messages);
                }
            });
            this.sdk.listenForRoomUpdates((roomData) => {
                if (!roomData || !roomData.settings) return;

                if (roomData.settings.currentPoll) {
                    this.displayPollResults(roomData.settings.currentPoll);
                }

                const aiIsActiveInDB = roomData.settings.ai_active === true;
                if (this.isAiActive !== aiIsActiveInDB) {
                    console.log(`üîÑ Syncing teacher UI. AI status changed to: ${aiIsActiveInDB}`);
                    this.isAiActive = aiIsActiveInDB;
                    this.updateAIButton();
                }
            });

            this.updateConnectionStatus(true);
            this.setupEventListeners();
            this.updateRoomDisplay();
            
            // ◊ê◊ó◊®◊ô ◊©◊î◊õ◊ú ◊û◊ï◊õ◊ü, ◊ë◊ì◊ï◊ß ◊©◊ï◊ë ◊ê◊™ ◊î-AI
            setTimeout(() => {
                if (this.checkSDKReady()) {
                    this.showTeacherAIButton();
                    this.checkAIStatus();
                    console.log('‚úÖ Teacher AI button initialized and shown');
                } else {
                    console.error('‚ùå SDK not ready even after timeout');
                }
            }, 2000); // ◊™◊ü ◊ô◊ï◊™◊® ◊ñ◊û◊ü

            this.debugLog("‚úÖ Teacher dashboard initialized successfully.");

        } catch (error) {
            console.error("üî• Critical initialization error:", error);
            console.error("üîç Error stack:", error.stack);
            this.updateConnectionStatus(false);
        } finally {
            if(loadingOverlay) loadingOverlay.classList.add('hidden');
        }
    }

    // üÜï New function to activate AI for teacher
    async initializeTeacherAI() {
        this.debugLog("ü§ñ Initializing AI for teacher...");
        
        try {
            // 1. Check AI service availability
            const aiStatus = await this.testAIService();
            if (!aiStatus) {
                this.debugLog("‚ö†Ô∏è AI service not available, but continuing...");
            }
            
            // 2. Show AI button in any case (even if service is not available)
            this.showTeacherAIButton();
            
            // 3. Update AI status in interface
            await this.checkAIStatus();
            
            // 4. Add activity message
            this.addActivity("ü§ñ AI interface enabled for teacher");
            
            this.debugLog("‚úÖ Teacher AI initialized successfully");
            
        } catch (error) {
            console.error("üî• Error initializing teacher AI:", error);
            this.debugLog("‚ùå Teacher AI initialization failed", error);
            
            // Even in case of error - show the button
            this.showTeacherAIButton();
            this.addActivity("‚ö†Ô∏è AI available but with limitations");
        }
    }

    // üÜï Function to show AI button for teacher
    showTeacherAIButton() {
        // üîß FIX: Ensure AI button is created and visible
        let aiBtn = document.getElementById('classroom-ai-btn');
        
        if (!aiBtn) {
            // Create the button if it doesn't exist
            console.log('üîß Creating missing AI button for teacher');
            if (this.sdk && this.sdk.createAIInterface) {
                this.sdk.createAIInterface();
                aiBtn = document.getElementById('classroom-ai-btn');
            }
        }
        
        if (aiBtn) {
            aiBtn.style.display = 'block';
            aiBtn.style.opacity = '1';
            aiBtn.style.visibility = 'visible';
            
            // Add teacher indicator
            const teacherIndicator = document.createElement('div');
            teacherIndicator.className = 'teacher-ai-indicator';
            teacherIndicator.innerHTML = 'üéì';
            teacherIndicator.style.cssText = `
                position: absolute; top: -5px; left: -5px;
                background: #28a745; color: white;
                border-radius: 50%; width: 20px; height: 20px;
                font-size: 12px; display: flex;
                align-items: center; justify-content: center;
                z-index: 10003;
            `;
            
            if (!aiBtn.querySelector('.teacher-ai-indicator')) {
                aiBtn.style.position = 'relative';
                aiBtn.appendChild(teacherIndicator);
            }
            
            this.debugLog("ü§ñ AI button displayed for teacher");
            console.log('‚úÖ Teacher AI button is now visible and functional');
        } else {
            console.error('‚ùå Could not create or find AI button for teacher');
        }
    }

    // Check AI status and read current model
    async checkAIStatus() {
        console.log('üîç checkAIStatus called');
        if (!this.sdk || !this.sdk.db) {
            console.log('‚ùå SDK or DB not ready');
            this.debugLog("‚ùå Cannot check AI status - SDK/DB not ready");
            return;
        }
        
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            const doc = await roomRef.get();
            
            console.log('üîç Room document exists:', doc.exists);
            
            if (doc.exists) {
                const roomData = doc.data();
                console.log('üîç Room data:', roomData);
                console.log('üîç AI settings:', roomData.settings);
                
                this.isAiActive = roomData.settings?.ai_active === true;
                this.currentAiModel = roomData.settings?.ai_model || 'chatgpt';
                
                console.log('üîç Set isAiActive to:', this.isAiActive);
                
                this.updateAIButton();
                this.updateAIModelDisplay();
                
                this.debugLog(`ü§ñ AI Status: ${this.isAiActive ? 'Active' : 'Disabled'}, Model: ${this.currentAiModel}`);
            } else {
                console.log('‚ö†Ô∏è Room document not found');
                this.debugLog("‚ö†Ô∏è Room document not found for AI status check");
            }
        } catch (error) {
            console.error("üî• Error checking AI status:", error);
            this.debugLog("‚ùå AI status check failed", error);
        }
    }

    // Update AI button display
    updateAIButton() {
        const aiStatusIcon = document.getElementById('aiStatusIcon');
        const aiStatusText = document.getElementById('aiStatusText');
        const aiStatusDesc = document.querySelector('#toggleAI .dropdown-desc');

        if (this.isAiActive) {
            if (aiStatusIcon) aiStatusIcon.textContent = 'üü¢';
            if (aiStatusText) aiStatusText.textContent = 'AI Active for Students';
            if (aiStatusDesc) aiStatusDesc.textContent = 'Click to disable';
        } else {
            if (aiStatusIcon) aiStatusIcon.textContent = 'üî¥';
            if (aiStatusText) aiStatusText.textContent = 'AI Disabled for Students';
            if (aiStatusDesc) aiStatusDesc.textContent = 'Click to enable';
        }
    }

    // Update current model display
    updateAIModelDisplay() {
        // Update current model text
        const modelDisplays = document.querySelectorAll('.current-ai-model');
        modelDisplays.forEach(display => {
            display.textContent = this.getModelDisplayName(this.currentAiModel);
        });

        // Highlight active button
        document.querySelectorAll('.dropdown-item.ai-model-btn').forEach(btn => {
            if (btn.dataset.model === this.currentAiModel) {
                btn.style.backgroundColor = '#e8f5e9';
                btn.style.fontWeight = 'bold';
            } else {
                btn.style.backgroundColor = '';
                btn.style.fontWeight = 'normal';
            }
        });
    }

    // Get display name for model
    getModelDisplayName(model) {
        const modelNames = {
            'chatgpt': 'ChatGPT',
            'claude': 'Claude',
            'gemini': 'Gemini'
        };
        return modelNames[model] || model;
    }

    // Toggle AI mode (enable/disable)
    async toggleAIForClass() {
        console.log('--- Starting toggleAIForClass ---');
        if (!this.sdk || !this.sdk.db || !this.sdk.roomCode) {
            console.error('SDK not ready. Cannot update Firestore.');
            alert('SDK not ready. Please refresh.');
            return;
        }

        const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.roomCode);
        
        try {
            // ◊ß◊ï◊ì◊ù ◊ß◊ï◊®◊ê◊ô◊ù ◊õ◊ì◊ô ◊ú◊ì◊¢◊™ ◊û◊î ◊î◊û◊¶◊ë ◊î◊†◊ï◊õ◊ó◊ô
            const doc = await roomRef.get();
            if (!doc.exists) {
                console.error('Document does not exist!');
                return;
            }

            const currentState = doc.data().settings.ai_active;
            const newState = !currentState;

            // ◊û◊ë◊¶◊¢◊ô◊ù ◊ê◊™ ◊î◊¢◊ì◊õ◊ï◊ü ◊ë◊û◊°◊ì ◊î◊†◊™◊ï◊†◊ô◊ù
            await roomRef.update({
                'settings.ai_active': newState
            });

            console.log(`SUCCESS: Firestore updated. New state is: ${newState}`);

            // ======================================================
            // === ◊î◊ó◊ú◊ß ◊î◊ó◊°◊®: ◊¢◊ì◊õ◊ï◊ü ◊û◊û◊©◊ß ◊î◊û◊©◊™◊û◊© ◊ú◊ê◊ó◊® ◊î◊î◊¶◊ú◊ó◊î ===
            // ======================================================

            // 1. ◊¢◊ì◊õ◊ï◊ü ◊î◊û◊©◊™◊†◊î ◊î◊û◊ß◊ï◊û◊ô ◊©◊û◊ó◊ñ◊ô◊ß ◊ê◊™ ◊î◊°◊ò◊ò◊ï◊°
            this.isAiActive = newState;
            
            // 2. ◊¢◊ì◊õ◊ï◊ü ◊û◊®◊ê◊î ◊î◊õ◊§◊™◊ï◊® (◊¶◊ë◊¢ ◊ï◊ò◊ß◊°◊ò)
            this.updateAIButton();
            
            // 3. ◊î◊ï◊°◊§◊™ ◊©◊ï◊®◊î ◊ú◊ô◊ï◊û◊ü ◊î◊ê◊ô◊®◊ï◊¢◊ô◊ù
            if (newState) {
                this.addActivity('ü§ñ AI enabled for class.');
            } else {
                this.addActivity('üî¥ AI disabled for class.');
            }
            
        } catch (error) {
            console.error('FAILURE: Could not update Firestore.', error);
            alert('Failed to update the AI status. See console for error details.');
        }
    }

    checkSDKReady() {
        if (!this.sdk) {
            console.error('‚ùå SDK not initialized');
            return false;
        }
        
        if (!this.sdk.toggleAI) {
            console.error('‚ùå toggleAI method missing from SDK');
            console.log('üîç Available methods:', Object.getOwnPropertyNames(this.sdk));
            return false;
        }
        
        if (!this.sdk.db) {
            console.error('‚ùå Firebase DB not ready');
            return false;
        }
        
        if (!this.sdk.roomCode) {
            console.error('‚ùå Room code not set');
            return false;
        }
        
        console.log('‚úÖ SDK ready for AI operations');
        return true;
    }

    // Switch AI model (without turning off/on)
    async switchAIModel(model) {
        if (!this.sdk) return;
        
        this.debugLog(`üîÑ Switching AI model to: ${model}`);
        
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.update({
                'settings.ai_model': model,
                'last_activity': firebase.firestore.FieldValue.serverTimestamp()
            });
            
            this.currentAiModel = model;
            this.updateAIButton();
            this.updateAIModelDisplay();
            
            const modelName = this.getModelDisplayName(model);
            this.addActivity(`üîÑ AI model switched to: ${modelName}`);
            this.debugLog(`‚úÖ AI model switched to: ${model}`);
            
            // Message to students
            if (this.isAiActive) {
                this.showModelSwitchMessage(modelName);
            }
            
        } catch (error) {
            console.error("üî• Error switching AI model:", error);
            this.debugLog("‚ùå AI model switch failed", error);
            alert("Error switching AI model: " + error.message);
        }
    }

    // Model switch message
    showModelSwitchMessage(modelName) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 10000;
            background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
            color: white; padding: 15px 20px; border-radius: 8px;
            box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);
            font-weight: bold; max-width: 300px;
            animation: slideInRight 0.5s ease;
            direction: ltr; text-align: left;
        `;
        
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 24px;">üîÑ</span>
                <div>
                    <div>AI Model Switched!</div>
                    <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">
                        Now using: ${modelName}
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease';
            setTimeout(() => notification.remove(), 500);
        }, 3000);
    }

    // Test AI service - updated to work with askAI
    async testAIService() {
        // Comprehensive check of all required components
        if (!this.sdk) {
            this.debugLog("‚ùå SDK not available for AI test");
            return false;
        }
        
        if (!this.sdk.auth?.currentUser) {
            this.debugLog("‚ùå User not authenticated for AI test");
            return false;
        }
        
        if (!this.sdk.functions) {
            this.debugLog("‚ùå Firebase Functions not initialized");
            return false;
        }
            
        this.debugLog("üîç Testing AI service availability...");
        
        try {
            // Check if SDK has testAIService method, if not use fallback
            if (this.sdk.testAIService) {
                const result = await this.sdk.testAIService();
                
                if (result.available) {
                    this.debugLog("‚úÖ AI service available and working", result);
                    return true;
                } else {
                    this.debugLog("‚ùå AI service not available", result);
                    
                    // Show detailed message to teacher
                    let errorDetails = "AI service not available";
                    if (result.code === 'functions/failed-precondition') {
                        errorDetails = "AI service not configured (missing API key)";
                    } else if (result.code === 'functions/unauthenticated') {
                        errorDetails = "Authentication error in system";
                    } else if (result.code === 'functions/not-initialized') {
                        errorDetails = "Firebase Functions not initialized";
                    }
                    
                    // Show one-time alert
                    if (!this.aiWarningShown) {
                        this.aiWarningShown = true;
                        setTimeout(() => {
                            if (confirm(`‚ö†Ô∏è ${errorDetails}\n\nWould you like to try again?`)) {
                                this.testAIService();
                            }
                        }, 1000);
                    }
                    
                    return false;
                }
            } else {
                // Fallback if SDK doesn't have testAIService
                this.debugLog("‚ö†Ô∏è SDK testAIService method not found, assuming available");
                return true;
            }
        } catch (error) {
            this.debugLog("üî• AI service test failed with error", error);
            console.error("AI test error:", error);
            // Don't fail completely, just log and continue
            return true;
        }
    }

    updateConnectionStatus(isConnected) {
        const statusDiv = document.getElementById('connectionStatus');
        if (!statusDiv) return;
        if (isConnected) {
            statusDiv.textContent = 'üü¢ Connected to Firebase';
            statusDiv.className = 'connection-status connected';
        } else {
            statusDiv.textContent = 'üî¥ Not Connected';
            statusDiv.className = 'connection-status disconnected';
        }
    }

    addActivity(activityText) {
        const activitiesArea = document.getElementById('activitiesArea');
        if (!activitiesArea) return;

        const activityDiv = document.createElement('div');
        activityDiv.className = 'activity-item';
        activityDiv.style.direction = 'ltr';
        activityDiv.style.textAlign = 'left';
        activityDiv.innerHTML = `
            <span class="activity-time">${new Date().toLocaleTimeString(this.locale)}</span>
            <span class="activity-text">${activityText}</span>
        `;
        activitiesArea.appendChild(activityDiv);
        activitiesArea.scrollTop = activitiesArea.scrollHeight;
    }

    updateStudentsList(studentsData) {
        this.students = studentsData;
        const studentsListDiv = document.getElementById('studentsList');
        const studentsCountSpan = document.getElementById('studentsCount');
        if (!studentsListDiv || !studentsCountSpan) return;

        // Clear existing list
        studentsListDiv.innerHTML = '';
        studentsCountSpan.textContent = this.students.length;

        if (this.students.length === 0) {
            studentsListDiv.innerHTML = '<div class="no-students">No students connected currently</div>';
            return;
        }
        
        const template = document.getElementById('studentTemplate');
        
        // Process ALL students in the array
        this.students.forEach(student => {
            const studentName = student.name || 'Unknown Student';
            const studentElement = document.importNode(template.content, true);
            
            const nameSpan = studentElement.querySelector('.student-name');
            if(nameSpan) nameSpan.textContent = studentName;

            const actionsDiv = studentElement.querySelector('.student-actions');
            if (actionsDiv) {
                const privateMsgBtn = document.createElement('button');
                privateMsgBtn.textContent = 'Private Message';
                privateMsgBtn.className = 'private-message-btn';
                privateMsgBtn.onclick = () => this.openPrivateMessageModal(student);
                actionsDiv.appendChild(privateMsgBtn);
            }
            
            studentsListDiv.appendChild(studentElement);
        });
        
        this.addActivity(`Student list updated. ${this.students.length} students connected.`);
        console.log(`‚úÖ Updated student list: ${this.students.length} students displayed`);
    }

    // üîß Fix #1: undefined messages - complete and fixed function
    addMessage(messages) {
        // If it's an array of messages - iterate through each one
        if (Array.isArray(messages)) {
            messages.forEach(message => this.addSingleMessage(message));
            return;
        }
        
        // If it's a single message
        this.addSingleMessage(messages);
    }

    addSingleMessage(message) {
        const messagesArea = document.getElementById('messagesArea');
        const messagesCountSpan = document.getElementById('messagesCount');
        if (!messagesArea) return;

        // üîß FIX: Prevent duplicate messages by checking if already exists
        const messageId = message.timestamp?.seconds + '_' + message.sender_uid + '_' + message.content.substring(0, 20);
        const existingMessage = messagesArea.querySelector(`[data-message-id="${messageId}"]`);
        if (existingMessage) {
            console.log('‚ö†Ô∏è Duplicate message prevented:', message.content.substring(0, 30));
            return;
        }

        // Validation and message creation code...
        const sender = message?.sender || 'Unknown User';
        const content = message?.content || 'Empty Message';
        const timestamp = message?.timestamp;
        const isTeacher = message?.is_teacher === true;
        const isPrivate = message?.is_private === true;

        // Remove "no messages" placeholder
        const noMessages = messagesArea.querySelector('.no-messages');
        if (noMessages) {
            noMessages.remove();
        }

        // Update message count
        if (messagesCountSpan) {
            const currentCount = parseInt(messagesCountSpan.textContent) || 0;
            messagesCountSpan.textContent = currentCount + 1;
        }

        // Create message element
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-item';
        messageDiv.setAttribute('data-message-id', messageId); // üîß FIX: Add unique identifier
        messageDiv.style.direction = 'ltr';
        messageDiv.style.textAlign = 'left';
        
        // Icon and time formatting...
        let senderIcon = '';
        if (isTeacher) {
            senderIcon = 'üéì ';
        } else if (isPrivate) {
            senderIcon = 'üîí ';
        }

        let timeString = 'Unknown Time';
        if (timestamp) {
            try {
                const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
                timeString = date.toLocaleTimeString(this.locale);
            } catch (e) {
                console.warn('Cannot parse timestamp:', timestamp);
                timeString = new Date().toLocaleTimeString(this.locale);
            }
        }

        messageDiv.innerHTML = `
            <div class="message-header">
                <span class="message-sender">${senderIcon}${sender}</span>
                <span class="message-time">${timeString}</span>
            </div>
            <div class="message-content">${content}</div>
            ${isPrivate ? '<div class="message-private-indicator">Private Message</div>' : ''}
        `;

        if (isPrivate) {
            messageDiv.style.borderLeft = '4px solid #ffc107';
            messageDiv.style.background = '#fff9c4';
        }

        messagesArea.appendChild(messageDiv);
        messagesArea.scrollTop = messagesArea.scrollHeight;

        console.log(`‚úÖ Message added: ${content.substring(0, 30)}...`);
    }

    sendCommand(command, payload = {}) {
        if (!this.sdk) return;
        this.sdk.sendCommand(command, payload);
        this.addActivity(`üì§ Command sent: ${command}`);
    }

    sendMessageToClass(content) {
        if (!content || !content.trim()) return;
        
        if (this.sdk) {
            this.sdk.sendMessage(content);
            this.addActivity(`üí¨ Message sent to class: ${content}`);
        }
    }

    // üÜï AI activation encouragement message with English support
    showAIActivationMessage() {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 10000;
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white; padding: 15px 20px; border-radius: 8px;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
            font-weight: bold; max-width: 300px;
            animation: slideInRight 0.5s ease;
            direction: ltr; text-align: left;
        `;
        
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 24px;">ü§ñ</span>
                <div>
                    <div>AI Enabled Successfully!</div>
                    <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">
                        Students can now ask questions
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // Remove after 4 seconds
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease';
            setTimeout(() => notification.remove(), 500);
        }, 4000);
        
        // Add CSS for animations if not exists
        if (!document.getElementById('ai-notification-styles')) {
            const style = document.createElement('style');
            style.id = 'ai-notification-styles';
            style.textContent = `
                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOutRight {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(style);
        }
    }

    setupEventListeners() {
        // Modal handling
        const openModal = (modalId) => document.getElementById(modalId)?.classList.add('visible');
        const closeModal = (modal) => modal.closest('.modal-overlay')?.classList.remove('visible');

        // üéØ Fix: Single block handling model buttons
        document.querySelectorAll('.dropdown-item.ai-model-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                const model = btn.dataset.model;
                if (model) {
                    this.switchAIModel(model);
                }
            });
        });

        // Modal close buttons
        document.querySelectorAll('.modal-close').forEach(btn => {
            btn.addEventListener('click', (e) => {
                closeModal(e.target);
            });
        });

        // Private message form submit
        const privateMessageForm = document.getElementById('privateMessageForm');
        if (privateMessageForm) {
            privateMessageForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.sendPrivateMessage();
            });
        }

        // üéØ Add the following code block within the function
        const customUrlForm = document.getElementById('customUrlForm');
        if (customUrlForm) {
            customUrlForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const urlInput = document.getElementById('customUrlInput');
                const url = urlInput.value.trim();
                if (url) {
                    this.sendSelectedGame(url); // Reuse function for sending and closing
                    urlInput.value = '';
                }
            });
        }

        // üéØ Add poll handling
        document.querySelectorAll('.poll-type-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const pollType = btn.dataset.type;
                this.startPoll(pollType);
            });
        });

        const stopPollBtn = document.getElementById('stop-poll-btn');
        if(stopPollBtn) {
            stopPollBtn.addEventListener('click', () => this.stopPoll());
        }

        // üéØ Handle general chat form
        const chatForm = document.getElementById('chat-form');
        if (chatForm) {
            chatForm.addEventListener('submit', (e) => {
                e.preventDefault(); // Prevents page refresh - the critical fix!
                const input = document.getElementById('chat-input');
                const message = input.value.trim();
                if (message) {
                    this.sdk.sendMessage(message);
                    input.value = '';
                }
            });
        }

        document.getElementById('ai-summarize-btn')?.addEventListener('click', () => this.handleAiAnalysis('summarize'));
        document.getElementById('ai-keywords-btn')?.addEventListener('click', () => this.handleAiAnalysis('keywords'));

        // Handle closing the open question modal and stopping the poll
        document.getElementById('close-open-question-btn')?.addEventListener('click', () => this.closeOpenEndedQuestion());
        document.querySelector('#open-question-modal .modal-close')?.addEventListener('click', () => this.closeOpenEndedQuestion());

        // ◊î◊ï◊°◊§◊™ ◊î◊ê◊ñ◊†◊î ◊ú◊õ◊§◊™◊ï◊® ◊ê◊ô◊§◊ï◊° ◊û◊°◊õ◊ô◊ù
        document.getElementById('resetScreensBtn')?.addEventListener('click', () => {
            if (confirm('Are you sure you want to reset all student screens? This will stop any active poll or content.')) {
                this.resetStudentScreens();
            }
        });
    }

    openPrivateMessageModal(student) {
        const modal = document.getElementById('privateMessageModal');
        if (modal) {
            document.getElementById('privateMessageRecipient').textContent = student.name;
            modal.dataset.studentUid = student.uid;
            modal.classList.add('visible');
        }
    }

    async sendPrivateMessage() {
        const modal = document.getElementById('privateMessageModal');
        const content = document.getElementById('privateMessageText').value.trim();
        const studentUid = modal.dataset.studentUid;
        
        if (!content || !studentUid) return;
        
        try {
            await this.sdk.sendPrivateMessage(content, studentUid);
            this.addActivity(`‚úâÔ∏è Private message sent to ${document.getElementById('privateMessageRecipient').textContent}`);
            document.getElementById('privateMessageText').value = '';
            modal.classList.remove('visible');
        } catch (error) {
            console.error("üî• Error sending private message:", error);
            alert("Error sending private message");
        }
    }

    async resetClassroomData() {
        if (!this.sdk || !confirm('Are you sure you want to reset the classroom? This action will delete all data.')) {
            return;
        }
        
        try {
            // Delete room from cloud
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.delete();
            
            // Create new room
            await this.sdk.initializeRoom();
            
            this.addActivity('üîÑ Classroom reset successfully');
            alert('Classroom reset successfully!');
        } catch (error) {
            console.error("üî• Error resetting classroom:", error);
            alert("Error resetting classroom");
        }
    }

    updateRoomDisplay() {
        const roomCode = this.sdk ? this.sdk.getRoomCode() : null;
        if (!roomCode) return;

        // Update text display in header
        const roomCodeSpan = document.getElementById('header-room-code');
        if (roomCodeSpan) {
            roomCodeSpan.textContent = roomCode;
        }

        // Create and display QR code
        const qrImage = document.getElementById('qr-code-image');
        if (qrImage) {
            const studentUrl = `${window.location.origin}/${this.config.studentAppUrl}?classroom=${roomCode}`;
            const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(studentUrl)}`;
            
            qrImage.src = qrApiUrl;

            // Add copy functionality on click
            qrImage.onclick = () => {
                navigator.clipboard.writeText(studentUrl).then(() => {
                    this.addActivity(`‚úÖ Student link copied`);
                    // Can add small visual notification here if desired
                }).catch(err => {
                    console.error('Failed to copy URL: ', err);
                });
            };
        }
    }

    async loadConfigData() {
        try {
            const response = await fetch('config.json');
            if (!response.ok) throw new Error('Network response was not ok');
            this.config = await response.json();
            this.debugLog('‚úÖ Config file loaded successfully', this.config);
        } catch (error) {
            console.error('üî• Error loading config file:', error);
            this.config = { studentAppUrl: 'student-app.html', games: [] }; // Fallback
        }
    }

    openContentModal() {
        document.getElementById('customContentModal')?.classList.add('visible');
        this.populateGamesList();
    }

    populateGamesList() {
        const container = document.getElementById('game-list-container');
        if (!container) return;

        const games = this.config?.games || []; // üéØ Change here
        container.innerHTML = ''; // Clear previous content

        if (games.length === 0) {
            container.innerHTML = '<p>No games found in config.json</p>';
            return;
        }

        games.forEach(game => {
            const gameElement = document.createElement('a');
            gameElement.href = '#';
            gameElement.className = 'dropdown-item'; // Reuse existing CSS
            gameElement.onclick = (e) => {
                e.preventDefault();
                this.sendSelectedGame(game.url);
            };

            gameElement.innerHTML = `
                <span class="dropdown-icon">${game.icon || 'üîó'}</span>
                <div class="dropdown-content">
                    <div class="dropdown-title">${game.name}</div>
                    <div class="dropdown-desc">${game.description}</div>
                </div>
            `;
            container.appendChild(gameElement);
        });
    }

    sendSelectedGame(url) {
        if (!url) return;
        this.sendCommand('LOAD_CONTENT', { url });

        // Close window after sending
        const modal = document.getElementById('customContentModal');
        if (modal) {
            modal.querySelector('.modal-close').click();
        }
    }

    // üéØ Functions for poll management
    openPollCreationModal() {
        this.debugLog("üìä Opening poll creation window");
        document.getElementById('poll-creation-modal')?.classList.add('visible');
    }

    // ◊î◊ó◊ú◊£ ◊ê◊™ ◊õ◊ú ◊î◊§◊ï◊†◊ß◊¶◊ô◊î startPoll ◊ë◊ñ◊ï:
    async startPoll(pollType) {
        this.debugLog(`üìä Starting a new poll of type: ${pollType}`);

        try {
            // ◊©◊ú◊ë 1: ◊ë◊ì◊ô◊ß◊î ◊ï◊ê◊®◊õ◊ï◊ë ◊©◊ú ◊î◊°◊ß◊® ◊î◊§◊¢◊ô◊ú ◊î◊ß◊ï◊ì◊ù (◊ê◊ù ◊ß◊ô◊ô◊ù)
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.roomCode);
            const roomDoc = await roomRef.get();
            const existingPoll = roomDoc.data()?.settings?.currentPoll;

            if (existingPoll && existingPoll.isActive) {
                this.debugLog('Archiving previous active poll...', existingPoll.id);
                await this.sdk.saveQuestionToHistory(existingPoll);
                this.addActivity(`üìù Previous poll (${existingPoll.id.substring(0,5)}) archived.`);
            }

            // ◊©◊ú◊ë 2: ◊ô◊¶◊ô◊®◊™ ◊ê◊ï◊ë◊ô◊ô◊ß◊ò ◊î◊°◊ß◊® ◊î◊ó◊ì◊© ◊¢◊ù ◊û◊ê◊í◊® ◊™◊©◊ï◊ë◊ï◊™ ◊®◊ô◊ß
            const pollOptions = {
                'yes_no': 2,
                'multiple_choice': 4,
                'open_text': 0
            };

            const newPoll = {
                id: "poll_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9),
                type: pollType,
                question: '', // ◊†◊ô◊™◊ü ◊ú◊î◊®◊ó◊ë◊î ◊ë◊¢◊™◊ô◊ì
                options: pollOptions[pollType],
                isActive: true,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                responses: {} // ◊î◊™◊ó◊ú◊î ◊¢◊ù ◊û◊ê◊í◊® ◊†◊ß◊ô
            };

            // ◊©◊ú◊ë 3: ◊¢◊ì◊õ◊ï◊ü ◊î-Firestore ◊¢◊ù ◊î◊°◊ß◊® ◊î◊ó◊ì◊©
            await roomRef.update({
                'settings.currentPoll': newPoll
            });

            // ◊©◊ú◊ë 4: ◊¢◊ì◊õ◊ï◊ü ◊û◊û◊©◊ß ◊î◊û◊©◊™◊û◊© ◊ë◊î◊™◊ê◊ù ◊ú◊°◊ï◊í ◊î◊°◊ß◊® ◊î◊ó◊ì◊©
            if (pollType === 'open_text') {
                this.currentQuestionResponses = {}; // ◊ê◊ô◊§◊ï◊° ◊î◊ß◊ê◊© ◊î◊û◊ß◊ï◊û◊ô
                document.getElementById('open-question-modal')?.classList.add('visible');
            } else {
                document.getElementById('poll-section').style.display = 'block';
            }

            this.addActivity(`üìä Started new poll of type: ${pollType}`);
            document.getElementById('poll-creation-modal')?.classList.remove('visible');
            this.debugLog(`‚úÖ New poll ${newPoll.id} started successfully.`);

        } catch (error) {
            console.error("üî• Failed to start a new poll:", error);
            this.debugLog("‚ùå Error during startPoll", error);
            this.addActivity("‚ùå Error starting new poll.");
        }
    }

    stopPoll() {
        this.debugLog("üìä Stopping poll");
        this.sdk.stopPoll();
        document.getElementById('poll-section').style.display = 'none';
        this.addActivity(`‚èπÔ∏è Poll ended`);
    }

    displayPollResults(pollData) {
        // Handle Open Text Polls
        if (pollData && pollData.type === 'open_text' && pollData.isActive) {
            const container = document.getElementById('open-question-results');
            if (!container) return;
            container.innerHTML = ''; // Clear previous results to re-render

            const responses = pollData.responses || {};
            this.currentQuestionResponses = responses; // Update local memory

            // Correctly iterate over the responses object
            for (const studentName in responses) {
                if (Object.hasOwnProperty.call(responses, studentName)) {
                    const answers = responses[studentName];
                    if (Array.isArray(answers) && answers.length > 0) {
                        const lastAnswer = answers[answers.length - 1];
                        const answerDiv = document.createElement('div');
                        answerDiv.innerHTML = `<strong>${studentName} (${answers.length} versions):</strong><p style="margin: 5px 0 0 0; color: #333;">${lastAnswer}</p>`;
                        answerDiv.style.borderBottom = '1px solid #eee';
                        answerDiv.style.padding = '10px 0';
                        container.appendChild(answerDiv);
                    }
                }
            }
        } 
        // Handle Multiple Choice and Yes/No Polls
        else if (pollData && (pollData.type === 'multiple_choice' || pollData.type === 'yes_no')) {
            const container = document.getElementById('poll-results-container');
            const section = document.getElementById('poll-section');
            if (!container || !section) return;

            section.style.display = 'block';
            container.innerHTML = '';

            const responses = pollData.responses || {};
            const totalVotes = Object.keys(responses).length;
            const voteCounts = {};

            // Count votes for each option
            for (let i = 1; i <= pollData.options; i++) {
                voteCounts[i] = 0;
            }
            Object.values(responses).forEach(vote => {
                if (voteCounts[vote] !== undefined) {
                    voteCounts[vote]++;
                }
            });

            // Display results
            for (let i = 1; i <= pollData.options; i++) {
                const votes = voteCounts[i];
                const percentage = totalVotes > 0 ? ((votes / totalVotes) * 100).toFixed(1) : 0;
                const label = pollData.type === 'yes_no' ? (i === 1 ? 'Yes' : 'No') : `Option ${i}`;

                const barHtml = `
                    <div style="margin-bottom: 12px;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                            <strong>${label}</strong>
                            <span>${votes} votes (${percentage}%)</span>
                        </div>
                        <div style="background: #e0e0e0; border-radius: 4px; overflow: hidden;">
                            <div style="width: ${percentage}%; background: #42a5f5; height: 20px; transition: width 0.3s ease;"></div>
                        </div>
                    </div>
                `;
                container.innerHTML += barHtml;
            }
        }
    }

    async handleAiAnalysis(type) {
        // 1. Open the teacher's AI window immediately
        if (this.sdk && this.sdk.aiContainer.style.display === 'none') {
            this.sdk.toggleAI();
        }

        // 2. Collect current responses from local memory
        if (Object.keys(this.currentQuestionResponses).length === 0) {
            this.sdk.addAIMessage("ü§ñ", "No responses to analyze currently.", false);
            return;
        }

        const allAnswers = JSON.stringify(this.currentQuestionResponses, null, 2);
        const lang = this.sdk.getInterfaceLanguage();
        let prompt;

        // 3. Create language-aware prompt
        if (type === 'summarize') {
            prompt = (lang === 'he')
                ? `◊ú◊§◊†◊ô◊ö ◊™◊©◊ï◊ë◊ï◊™ ◊©◊ú ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊ú◊©◊ê◊ú◊î. ◊õ◊ú ◊©◊ù ◊™◊ú◊û◊ô◊ì ◊û◊û◊ï◊§◊î ◊ú◊û◊¢◊®◊ö ◊©◊ú ◊î◊™◊©◊ï◊ë◊ï◊™ ◊©◊ú◊ï (◊û◊î◊®◊ê◊©◊ï◊†◊î ◊ú◊ê◊ó◊®◊ï◊†◊î). ◊°◊õ◊ù ◊ê◊™ ◊®◊û◊™ ◊î◊î◊ë◊†◊î ◊î◊õ◊ô◊™◊™◊ô◊™, ◊ñ◊î◊î ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊™◊©◊ï◊ë◊ï◊™◊ô◊î◊ù ◊û◊¶◊ë◊ô◊¢◊ï◊™ ◊¢◊ú ◊ß◊ï◊©◊ô, ◊ï◊¶◊ô◊ô◊ü ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊î◊®◊ê◊ï ◊©◊ô◊§◊ï◊® ◊û◊©◊û◊¢◊ï◊™◊ô ◊ë◊ô◊ü ◊î◊í◊®◊°◊ê◊ï◊™:\n\n${allAnswers}`
                : `Here are student responses to a question. Each student name maps to an array of their answers (from first to last). Summarize the class's understanding, identify students whose answers indicate difficulty, and point out students who showed significant improvement across versions:\n\n${allAnswers}`;
        } else { // keywords
            prompt = (lang === 'he')
                ? `◊ñ◊î◊î ◊ê◊™ 10 ◊û◊ô◊ú◊ï◊™ ◊î◊û◊§◊™◊ó ◊î◊†◊§◊ï◊¶◊ï◊™ ◊ï◊î◊û◊©◊û◊¢◊ï◊™◊ô◊ï◊™ ◊ë◊ô◊ï◊™◊® ◊û◊î◊™◊©◊ï◊ë◊ï◊™ ◊î◊ë◊ê◊ï◊™:\n\n${allAnswers}`
                : `Extract the 10 most frequent and significant keywords from the following text:\n\n${allAnswers}`;
        }

        // 4. Send prompt to AI
        this.sdk.sendAIMessage(prompt, lang);
        this.addActivity(`üìà Sent "situation analysis" to AI.`);

        // 5. Reset responses in Firestore for a new round
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.update({ 'settings.currentPoll.responses': {} });
            this.addActivity(`üîÑ Response repository in Firestore reset and ready for next round.`);
        } catch (error) {
            console.error("Error resetting poll responses:", error);
        }
    }

    async generateLessonSummary() {
        this.addActivity('üìä Preparing comprehensive summary report...');
        if (this.sdk && this.sdk.aiContainer) {
            if (this.sdk.aiContainer.style.display === 'none') {
                this.sdk.toggleAI();
            }
        }
        try {
            const historySnapshot = await this.sdk.db.collection('rooms')
                .doc(this.sdk.getRoomCode())
                .collection('questionHistory')
                .orderBy('createdAt')
                .get();
            let fullLessonData = [];
            historySnapshot.forEach(doc => {
                fullLessonData.push(doc.data());
            });
            const summaryPrompt = this.buildLessonSummaryPrompt(fullLessonData);
            const language = this.sdk.getInterfaceLanguage();
            await this.sdk.sendAIMessage(summaryPrompt, language);
            this.addActivity('‚úÖ Summary report sent to AI');
            document.getElementById('end-lesson-modal')?.classList.remove('visible');
        } catch (error) {
            console.error('üî• Error creating summary report:', error);
            this.addActivity('‚ùå Error creating summary report');
        }
    }

    buildLessonSummaryPrompt(lessonData) {
        const language = this.sdk.getInterfaceLanguage();
        if (language === 'he') {
            let prompt = `◊ì◊ï◊ó ◊°◊ô◊õ◊ï◊ù ◊û◊ß◊ô◊£ ◊ú◊©◊ô◊¢◊ï◊®\n\n`;
            prompt += `◊û◊°◊§◊® ◊©◊ê◊ú◊ï◊™ ◊©◊†◊©◊ê◊ú◊ï: ${lessonData.length}\n\n`;
            lessonData.forEach((question, index) => {
                prompt += `◊©◊ê◊ú◊î ${index + 1}: ${question.question || '◊©◊ê◊ú◊î ◊ú◊ú◊ê ◊õ◊ï◊™◊®◊™'}\n`;
                prompt += `◊™◊©◊ï◊ë◊ï◊™ ◊î◊™◊ú◊û◊ô◊ì◊ô◊ù:\n`;
                Object.entries(question.responses || {}).forEach(([student, answers]) => {
                    if (Array.isArray(answers)) {
                        prompt += `  ${student}: ${answers.join(' ‚Üí ')}\n`;
                    } else {
                        prompt += `  ${student}: ${answers}\n`;
                    }
                });
                prompt += `\n`;
            });
            prompt += `◊ê◊†◊ê ◊°◊õ◊ù:\n`;
            prompt += `1. ◊î◊™◊ß◊ì◊û◊ï◊™ ◊õ◊ú◊ú◊ô◊™ ◊©◊ú ◊î◊õ◊ô◊™◊î\n`;
            prompt += `2. ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊î◊®◊ê◊ï ◊©◊ô◊§◊ï◊® ◊û◊©◊û◊¢◊ï◊™◊ô\n`;
            prompt += `3. ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊†◊ñ◊ß◊ß◊ô◊ù ◊ú◊™◊©◊ï◊û◊™ ◊ú◊ë ◊†◊ï◊°◊§◊™\n`;
            prompt += `4. ◊†◊ï◊©◊ê◊ô◊ù ◊©◊†◊ï◊™◊®◊ï ◊ú◊ê ◊ë◊®◊ï◊®◊ô◊ù\n`;
            prompt += `5. ◊î◊û◊ú◊¶◊ï◊™ ◊ú◊©◊ô◊¢◊ï◊® ◊î◊ë◊ê\n`;
            return prompt;
        } else {
            let prompt = `Comprehensive Lesson Summary Report\n\n`;
            prompt += `Number of questions asked: ${lessonData.length}\n\n`;
            lessonData.forEach((question, index) => {
                prompt += `Question ${index + 1}: ${question.question || 'Untitled question'}\n`;
                prompt += `Student responses:\n`;
                Object.entries(question.responses || {}).forEach(([student, answers]) => {
                    if (Array.isArray(answers)) {
                        prompt += `  ${student}: ${answers.join(' ‚Üí ')}\n`;
                    } else {
                        prompt += `  ${student}: ${answers}\n`;
                    }
                });
                prompt += `\n`;
            });
            prompt += `Please summarize:\n`;
            prompt += `1. Overall class progress\n`;
            prompt += `2. Students who showed significant improvement\n`;
            prompt += `3. Students who need additional attention\n`;
            prompt += `4. Topics that remain unclear\n`;
            prompt += `5. Recommendations for next lesson\n`;
            return prompt;
        }
    }

    async closeOpenEndedQuestion() {
        if (!this.sdk) return;
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            const roomDoc = await roomRef.get();
            const currentPoll = roomDoc.data()?.settings?.currentPoll;
            if (currentPoll && currentPoll.isActive) {
                await this.sdk.saveQuestionToHistory(currentPoll);
                await roomRef.update({ 'settings.currentPoll.isActive': false });
                this.addActivity('üìù Open question closed - student modal closed');
            }
            document.getElementById('open-question-modal')?.classList.remove('visible');
        } catch (error) {
            console.error('üî• Error closing open question:', error);
            this.addActivity('‚ùå Error closing question');
        }
    }

    // ◊î◊ï◊°◊§◊™ ◊û◊™◊ï◊ì◊î ◊ú◊û◊ó◊ú◊ß◊î TeacherDashboard
    async resetStudentScreens() {
        if (!this.sdk) return;
        console.log("üîÑ Resetting all student screens...");
        try {
            // ◊©◊ú◊ó ◊§◊ß◊ï◊ì◊î ◊ú◊†◊ß◊ï◊™ ◊ê◊™ ◊î-iframe
            await this.sdk.sendCommand('LOAD_CONTENT', { url: 'about:blank' });
            // ◊¢◊¶◊ï◊® ◊õ◊ú ◊°◊ß◊® ◊§◊¢◊ô◊ú
            await this.sdk.stopPoll();
            this.addActivity('‚èπÔ∏è All student screens have been cleared.');
        } catch (error) {
            console.error("Error resetting student screens:", error);
        }
    }
}

// Global functions for HTML buttons with English support
function sendQuickMessage(message) {
    if (window.teacherDashboard) {
        window.teacherDashboard.sendMessageToClass(message);
    }
}

function sendGameContent(url) {
    if (window.teacherDashboard) {
        window.teacherDashboard.sendCommand('LOAD_CONTENT', { url });
    }
}

function sendCustomContent() {
    document.getElementById('customContentModal').classList.add('visible');
}

// Global functions - updated
function toggleAIForClass() {
    if (window.teacherDashboard) {
        window.teacherDashboard.toggleAIForClass();
    }
}

function switchAIModel(model) {
    if (window.teacherDashboard) {
        window.teacherDashboard.switchAIModel(model);
    }
}

function resetClassroomData() {
    if (window.teacherDashboard) {
        window.teacherDashboard.resetClassroomData();
    }
}

function toggleDebug() {
    const debugConsole = document.querySelector('.enhanced-debug-console');
    if (debugConsole) {
        debugConsole.classList.toggle('visible');
    }
}

function sendMessage() {
    document.getElementById('messageModal').classList.add('visible');
}

function exportData() {
    if (!window.teacherDashboard) return;
    
    const data = {
        students: window.teacherDashboard.students,
        activities: window.teacherDashboard.activities,
        timestamp: new Date().toISOString(),
        roomCode: window.teacherDashboard.sdk?.getRoomCode()
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `classroom-data-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
}

function updateAIMenuStatus(isActive) {
    const aiMenuItems = document.querySelectorAll('.ai-menu-item');
    aiMenuItems.forEach(item => {
        item.style.opacity = isActive ? '1' : '0.5';
        item.style.pointerEvents = isActive ? 'auto' : 'none';
    });
}

// Function to copy classroom ID to clipboard with English support
function copyClassroomId() {
    if (!window.teacherDashboard || !window.teacherDashboard.sdk) {
        alert('System is not ready yet');
        return;
    }
    
    const roomCode = window.teacherDashboard.sdk.getRoomCode();
    
    // Copy to clipboard
    navigator.clipboard.writeText(roomCode).then(() => {
        // Change button text temporarily
        const copyBtn = document.getElementById('copyClassroomIdBtn');
        if (copyBtn) {
            const originalText = copyBtn.textContent;
            copyBtn.textContent = '‚úÖ Copied!';
            copyBtn.style.background = 'rgba(76, 175, 80, 0.3)';
            
            setTimeout(() => {
                copyBtn.textContent = originalText;
                copyBtn.style.background = 'rgba(255,255,255,0.2)';
            }, 2000);
        }
        
        // User notification
        if (window.teacherDashboard) {
            window.teacherDashboard.addActivity('üìã Classroom ID copied to clipboard');
        }
    }).catch(err => {
        console.error('Copy error:', err);
        alert('Error copying ID. Try copying manually.');
    });
}

// Function to test AI status with English messages
function testAIService() {
    if (window.teacherDashboard) {
        window.teacherDashboard.testAIService().then(result => {
            if (result) {
                alert('‚úÖ AI service is available and working properly!');
            } else {
                alert('‚ùå AI service is currently unavailable. Check settings.');
            }
        });
    }
}

// üîß Add English support for the entire system
document.addEventListener('DOMContentLoaded', function() {
    // Set text direction for all relevant elements
    const ltrElements = document.querySelectorAll('.message-item, .activity-item, .student-item');
    ltrElements.forEach(element => {
        element.style.direction = 'ltr';
        element.style.textAlign = 'left';
    });
    
    // Set font that supports English
    const style = document.createElement('style');
    style.textContent = `
        body, * {
            font-family: 'Segoe UI', Tahoma, Arial, 'Roboto', 'Open Sans', sans-serif !important;
        }
        
        .message-content, .activity-text, .student-name {
            direction: ltr !important;
            text-align: left !important;
            unicode-bidi: embed !important;
        }
        
        .debug-log, .debug-content {
            direction: ltr !important;
            text-align: left !important;
        }
        
        /* Fix English texts in interface */
        .dropdown-title, .dropdown-desc, .tool-label, .tool-desc {
            direction: ltr !important;
            text-align: left !important;
        }
    `;
    document.head.appendChild(style);
});

// Debug function with English logs
function debugClassroom() {
    if (!window.teacherDashboard) {
        console.log('Teacher dashboard not initialized');
        return;
    }
    
    const debug = {
        'Room': window.teacherDashboard.sdk?.getRoomCode(),
        'Students': window.teacherDashboard.students.length,
        'AI Active': window.teacherDashboard.isAiActive,
        'AI Model': window.teacherDashboard.currentAiModel,
        'SDK Connected': !!window.teacherDashboard.sdk,
        'Init Time': new Date().toLocaleTimeString('en-US')
    };
    
    console.table(debug);
    return debug;
}

================================================================================
File 34/34: C:\Users\Meir Livneh\Documents\fireClass\public\student-app.html
================================================================================

<!DOCTYPE html>
<!--
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
-->
<html lang="en" dir="ltr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Learning Space</title>
    <link rel="stylesheet" href="css/student-app.css">
</head>
<body>
    <div id="login-container" class="container">
        <div class="login-box">
            <h1>‚úèÔ∏è Classroom Learning Space</h1>
            <p>To join the lesson, please enter your name and room code</p>
            <form id="login-form">
                <input type="text" id="player-name" placeholder="Your name" required>
                <div class="input-group">
                    <label for="teacher-uid">üè´ Room Code:</label>
                    <input type="text" id="teacher-uid" placeholder="Enter 4-digit room code" maxlength="4" required>
                </div>
                <button type="submit">Join Lesson</button>
            </form>
        </div>
    </div>

    <main id="main-container" style="display: none;">
        <iframe id="content-frame" src="about:blank" title="Lesson Content"></iframe>
    </main>

    <div id="poll-interface" style="position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); z-index: 1001; background: rgba(30, 30, 50, 0.9); padding: 20px; border-radius: 12px; display: none; gap: 15px; border: 2px solid white; box-shadow: 0 0 20px rgba(0,0,0,0.5);">
    </div>

    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-functions-compat.js"></script>

    <script src="firebase-config.js"></script>

    <script>
      // Initialize the Firebase app using your configuration
      firebase.initializeApp(firebaseConfig);

      // Create global references to the services we will use
      const db = firebase.firestore();
      const auth = firebase.auth();
      const functions = firebase.functions();
    </script>

    <script src="js/ClassroomSDK.js"></script>
    <script src="js/student-app.js"></script>
</body>
</html>

================================================================================
END OF COLLECTED FILES
================================================================================
