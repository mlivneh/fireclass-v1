=================================================================
FireClass System - Complete Project Files
Created: 2025-07-17 18:24:40
Source Directory: public
=================================================================


=================================================================
FILE: config.json
FULL PATH: public\config.json
=================================================================

{
  "studentAppUrl": "https://class-board-ad64e.web.app/student-app.html",
  "games": [
    {
      "name": "AI Model Training",
      "description": "Visual Recognition training",
      "icon": "📚",
      "url": "https://meir.world/face-recognition/"
    },
    {
      "name": "TM",
      "description": "Goggle Teachable Machines",
      "icon": "🎯",
      "url": "https://teachablemachine.withgoogle.com/train"
    },
    {
      "name": "PhET",
      "description": "Projectile Data Lab",
      "icon": "🎯",
      "url": "https://phet.colorado.edu/sims/html/projectile-data-lab/latest/projectile-data-lab_all.html"
    },
    {
      "name": "Kahoot",
      "description": "Interactive quiz game",
      "icon": "🎯",
      "url": "https://kahoot.it"
    },
    {
      "name": "Wordwall",
      "description": "Word games and creation",
      "icon": "🎲",
      "url": "https://wordwall.net"
    },
    {
      "name": "Scratch",
      "description": "Programming and creation",
      "icon": "🐱",
      "url": "https://scratch.mit.edu"
    }
  ]
}



=================================================================
FILE: firebase-config.js
FULL PATH: public\firebase-config.js
=================================================================

var firebaseConfig = {
  apiKey: "AIzaSyAyi3h3OZasXI123uA7X6YAbwPFgopgl_w",
  authDomain: "fireclass-us.firebaseapp.com",
  projectId: "fireclass-us",
  storageBucket: "fireclass-us.appspot.com",
  messagingSenderId: "600159423729",
  appId: "1:600159423729:web:0d65fb1b01a67a127fed50",
  measurementId: "G-Y7GYKR7LQD"
};


=================================================================
FILE: i18n-config.json
FULL PATH: public\i18n-config.json
=================================================================

{
  "defaultLanguage": "en",
  "supportedLanguages": [
    "en",
    "he",
    "ar",
    "es",
    "fr"
  ],
  "fallbackLanguage": "en",
  "autoDetect": true,
  "rtlLanguages": [
    "he",
    "ar"
  ]
}


=================================================================
FILE: index.html
FULL PATH: public\index.html
=================================================================

<!DOCTYPE html>
<!--
 * Copyright © 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
-->
<html lang="en" dir="ltr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher Dashboard - ClassroomSDK</title>
    <!-- CSS Link -->
    <link rel="stylesheet" href="css/teacher-dashboard.css">
</head>
<body>
    <div id="loading-overlay">
        <div class="spinner"></div>
    </div>
    <!-- ==================== NEW LOGIN SCREEN START ==================== -->
<div id="login-container" class="login-overlay" style="display: none;">
    <div class="login-box">
        <div class="logo">
            <span class="logo-icon">⚙️</span>
            <span class="logo-text">fireClass Control</span>
        </div>
        <p>Welcome, please sign in to continue.</p>

        <div class="signin-options-title">Signin Options</div>

        <div class="signin-options">
            <button id="google-signin-btn" class="signin-btn" title="Sign in with Google">
                <img src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" alt="Google Logo">
            </button>
            <button id="microsoft-signin-btn" class="signin-btn" title="Sign in with Microsoft">
                <img src="https://upload.wikimedia.org/wikipedia/commons/4/44/Microsoft_logo.svg" alt="Microsoft Logo">
            </button>
        </div>
    </div>
</div>
<!-- ===================== NEW LOGIN SCREEN END ===================== -->

    <!-- ==================== NEW HEADER START ==================== -->
<header class="header">
    <div class="nav-container">
        <!-- Left Side: Logo and Room Code -->
        <div class="header-left">
            <div class="logo">
                <span class="logo-icon">⚙️</span>
                <span class="logo-text">fireClass Control</span>
            </div>
            <div id="header-room-display" class="header-room-display">
                <span class="room-code-label">Room:</span>
                <span id="header-room-code" class="room-code-value">...</span>
                <img id="qr-code-image" class="qr-code" alt="QR Code" title="Click to copy student link"/>
            </div>
        </div>

        <!-- Center: Navigation Menu -->
        <nav class="header-center">
            <ul class="nav-menu">
                <!-- Quick Actions -->
                <li class="nav-item">
                    <a href="#" class="nav-link"><span class="nav-icon">⚡</span><span>Quick Actions</span></a>
                    <div class="dropdown">
                        <div class="dropdown-header">Quick actions for lesson management</div>
                        <a href="#" class="dropdown-item success-item" onclick="sendQuickMessage('Let\'s start the lesson!')"><span class="dropdown-icon">🎓</span><div class="dropdown-content"><div class="dropdown-title">Start Lesson</div><div class="dropdown-desc">Send message to all students</div></div></a>
                        <a href="#" class="dropdown-item warning-item" onclick="sendQuickMessage('Time for a break! Come back in 5 minutes.')"><span class="dropdown-icon">☕</span><div class="dropdown-content"><div class="dropdown-title">Break Time</div><div class="dropdown-desc">Announce break time</div></div></a>
                        <a href="#" class="dropdown-item" onclick="sendQuickMessage('The lesson has ended. Well done everyone!')"><span class="dropdown-icon">✅</span><div class="dropdown-content"><div class="dropdown-title">End Lesson</div><div class="dropdown-desc">Finish the lesson</div></div></a>
                        <a href="#" class="dropdown-item danger-item" onclick="resetClassroomData()"><span class="dropdown-icon">🔄</span><div class="dropdown-content"><div class="dropdown-title">New Lesson</div><div class="dropdown-desc">Clear all lesson data</div></div></a>
                    </div>
                </li>
                <!-- Games and Content -->
                <li class="nav-item">
                    <a href="#" class="nav-link" onclick="window.teacherDashboard.openContentModal()"><span class="nav-icon">🎮</span><span>Games & Content</span></a>
                </li>
                <!-- AI Management -->
                <li class="nav-item">
                    <a href="#" class="nav-link" id="aiMenuLink"><span class="nav-icon">🤖</span><span>AI Management</span></a>
                    <div class="dropdown">
                        <div class="dropdown-header">AI Assistant settings for students</div>
                        <a href="#" class="dropdown-item" id="toggleAI" onclick="console.log('🟢 TRACE: AI button clicked'); window.teacherDashboard.toggleAIForClass()"><span class="dropdown-icon" id="aiStatusIcon">🔴</span><div class="dropdown-content"><div class="dropdown-title" id="aiStatusText">AI disabled for students</div><div class="dropdown-desc">Click to enable</div></div></a>
                        <div style="padding: 10px 20px; border-top: 1px solid #f0f2f5; background: #f8f9fa;"><strong style="font-size: 14px; color: #555;">🎯 Select model for class:</strong><div style="font-size: 12px; color: #777; margin-top: 2px;">Current model: <span class="current-ai-model">ChatGPT</span></div></div>
                        <a href="#" class="dropdown-item ai-model-btn" data-model="chatgpt" onclick="window.teacherDashboard.switchAIModel('chatgpt')"><span class="dropdown-icon">🤖</span><div class="dropdown-content"><div class="dropdown-title">ChatGPT</div><div class="dropdown-desc">Advanced model from OpenAI</div></div></a>
                        <a href="#" class="dropdown-item ai-model-btn" data-model="claude" onclick="window.teacherDashboard.switchAIModel('claude')"><span class="dropdown-icon">🧠</span><div class="dropdown-content"><div class="dropdown-title">Claude</div><div class="dropdown-desc">Smart model from Anthropic</div></div></a>
                        <a href="#" class="dropdown-item ai-model-btn" data-model="gemini" onclick="window.teacherDashboard.switchAIModel('gemini')"><span class="dropdown-icon">✨</span><div class="dropdown-content"><div class="dropdown-title">Gemini</div><div class="dropdown-desc">Google's model</div></div></a>
                    </div>
                </li>
                <!-- Tools -->
                <li class="nav-item">
                    <a href="#" class="nav-link"><span class="nav-icon">🔧</span><span>Tools</span></a>
                    <div class="dropdown">
                        <div class="dropdown-header">Utilities and debugging tools</div>
                        <a href="#" class="dropdown-item" onclick="toggleDebug()"><span class="dropdown-icon">🐛</span><div class="dropdown-content"><div class="dropdown-title">Debug Console</div><div class="dropdown-desc">Show technical information</div></div></a>
                        <a href="#" class="dropdown-item" onclick="exportData()"><span class="dropdown-icon">📊</span><div class="dropdown-content"><div class="dropdown-title">Export Data</div><div class="dropdown-desc">Save student list and messages</div></div></a>
                        <a href="#" class="dropdown-item" id="open-content-manager-btn">
                            <span class="dropdown-icon">📚</span>
                            <div class="dropdown-content">
                                <div class="dropdown-title">Manage Content & AI</div>
                                <div class="dropdown-desc">Edit your personal links and AI prompts</div>
                            </div>
                        </a>
                    </div>
                </li>
                <!-- Polls -->
                <li class="nav-item">
                    <a href="#" class="nav-link"><span class="nav-icon">📊</span><span>Polls</span></a>
                    <div class="dropdown">
                        <a href="#" class="dropdown-item" onclick="window.teacherDashboard.openPollCreationModal()"><span class="dropdown-icon">➕</span><div class="dropdown-content"><div class="dropdown-title">Start New Poll</div><div class="dropdown-desc">Send quick question to class</div></div></a>
                    </div>
                </li>
                <!-- Reports -->
                <li class="nav-item">
                    <a href="#" class="nav-link"><span class="nav-icon">📊</span><span>Reports</span></a>
                    <div class="dropdown">
                        <div class="dropdown-header">Reports and analytics (FFU)</div>
                        <a href="#" class="dropdown-item" onclick="generateLessonSummary()"><span class="dropdown-icon">📋</span><div class="dropdown-content"><div class="dropdown-title">Lesson Summary</div><div class="dropdown-desc">Comprehensive AI report of entire lesson</div></div></a>
                        <a href="#" class="dropdown-item" onclick="exportLessonData()"><span class="dropdown-icon">💾</span><div class="dropdown-content"><div class="dropdown-title">Export Lesson Data</div><div class="dropdown-desc">Save all data to file</div></div></a>
                    </div>
                </li>
            </ul>
        </nav>

        <!-- Right Side: Actions & Status -->
        <div class="header-right">
            <!-- New End Lesson Button with Dropdown -->
            <div class="dropdown-action-btn" id="end-lesson-controls">
                <button class="main-action-icon">✖</button>
                <div class="dropdown">
                    <a href="#" class="dropdown-item" id="reset-screens-action">
                        <span class="dropdown-icon">⏹️</span>
                        <div class="dropdown-content">
                            <div class="dropdown-title">Clear Screens</div>
                            <div class="dropdown-desc">Reset all student screens</div>
                        </div>
                    </a>
                    <a href="#" class="dropdown-item danger-item" id="end-lesson-action" onclick="document.getElementById('end-lesson-modal').classList.add('visible')">
                        <span class="dropdown-icon">🚫</span>
                        <div class="dropdown-content">
                            <div class="dropdown-title">Exit Lesson</div>
                            <div class="dropdown-desc">End lesson and show report options</div>
                        </div>
                    </a>
                </div>
            </div>

            <!-- New Logout Button -->
            <button id="logout-action-btn" class="main-action-icon green" title="Logout">🚪</button>

            <!-- New Connection Status Indicator -->
            <div id="connectionStatus" title="Connecting..."></div>
        </div>
    </div>
</header>
<!-- ===================== NEW HEADER END ===================== -->

    <!-- Main Content -->
    <div class="main-content" style="display: none;">
        <!-- Students Section -->
        <div class="section">
            <h2>👥 Connected Students (<span id="studentsCount">0</span>)</h2>
            <div id="studentsList" class="students-list">
                <div class="no-students">No students connected yet</div>
            </div>
        </div>

        <!-- Chat Section -->
        <div class="section">
            <h2>💬 Communication with Students</h2>
            <div id="messagesArea" class="chat-messages">
                <div class="no-messages">No messages yet</div>
            </div>
            <form id="chat-form" style="display: flex; gap: 10px;">
                <input type="text" id="chat-input" placeholder="Type a message to all students..." required style="flex-grow: 1;">
                <button type="submit">Send</button>
            </form>
        </div>

        <!-- Poll Section -->
        <div class="section" id="poll-section" style="display:none;">
            <h2>📊 Real-time Poll Results</h2>
            <div id="poll-results-container"></div>
            <button id="stop-poll-btn" style="background: #e74c3c; color: white; padding: 10px 20px; border: none; border-radius: 6px; cursor: pointer; margin-top: 20px;">End poll and hide results</button>
        </div>

        <!-- Activity Section -->
        <div class="section">
            <h2>📊 Recent Activity</h2>
            <div id="activitiesArea" class="activity-log">
                <div class="no-activity">No activity yet</div>
            </div>
        </div>
    </div>

    <!-- Templates -->
    <template id="studentTemplate">
        <div class="student-item">
            <div class="student-info">
                <span class="student-name"></span>
                <div class="student-actions"></div>
            </div>
        </div>
    </template>

    <!-- Private Message Modal -->
    <div id="privateMessageModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>✉️ Private Message</h3>
                <button class="modal-close">×</button>
            </div>
            <div class="modal-body">
                <p>Sending private message to: <span id="privateMessageRecipient"></span></p>
                <textarea id="privateMessageText" placeholder="Write your private message..." rows="4"></textarea>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Cancel</button>
                <button onclick="sendPrivateMessage()" class="primary">Send Message</button>
            </div>
        </div>
    </div>

    <!-- Message Modal -->
    <div id="messageModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>💬 Send Message to Class</h3>
                <button class="modal-close">×</button>
            </div>
            <div class="modal-body">
                <form id="messageForm">
                    <textarea id="messageText" placeholder="Write a message to all students..." rows="4" required></textarea>
                </form>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Cancel</button>
                <button type="submit" form="messageForm" class="primary">Send Message</button>
            </div>
        </div>
    </div>

    <!-- Custom Content Modal -->
    <div id="customContentModal" class="modal-overlay">
        <div class="modal-content" style="max-width: 600px;">
            <div class="modal-header">
                <h3>📤 Send Game or Content to Students</h3>
                <button class="modal-close">×</button>
            </div>
            <div class="modal-body" style="padding: 0;">
                <div id="game-list-container" style="padding: 20px; max-height: 300px; overflow-y: auto; border-bottom: 1px solid #eee;">
                </div>
                <div id="custom-url-section" style="padding: 20px; background: #f9f9f9;">
                    <p style="margin: 0 0 10px 0; font-weight: 500;">Or send custom link:</p>
                    <form id="customUrlForm" style="display: flex; gap: 10px;">
                        <input type="url" id="customUrlInput" placeholder="Enter full URL..." required style="flex-grow: 1; padding: 10px; border: 1px solid #ccc; border-radius: 6px;">
                        <button type="submit" class="primary" style="white-space: nowrap;">Send Link</button>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                 <a href="#" class="danger-item" onclick="window.teacherDashboard.sendCommand('LOAD_CONTENT', { url: 'about:blank' })" style="margin-right: auto; text-decoration:none; padding: 8px 12px; border-radius: 6px;">
                    ⏹️ Stop content and clear screens
                </a>
                <button class="modal-close">Close</button>
            </div>
        </div>
    </div>

    <!-- Poll Creation Modal -->
    <div id="poll-creation-modal" class="modal-overlay">
        <div class="modal-content" style="max-width: 400px;">
            <div class="modal-header">
                <h3>Select Poll Type</h3>
                <button class="modal-close">×</button>
            </div>
            <div class="modal-body" style="display: flex; flex-direction: column; gap: 15px;">
                <button class="poll-type-btn" data-type="yes_no">Yes / No Poll</button>
                <button class="poll-type-btn" data-type="multiple_choice">Multiple Choice Poll (1-4)</button>
                <button class="poll-type-btn" data-type="open_text">Open Question (Free text)</button>
            </div>
        </div>
    </div>

    <!-- Open Question Modal -->
    <div id="open-question-modal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Open Question Responses</h3>
                <button class="modal-close">×</button>
            </div>
            <div id="open-question-results" class="modal-body" style="max-height: 400px; overflow-y: auto;"></div>
            <div class="modal-footer" style="display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; gap: 10px;">
                    <button id="ai-summarize-btn">Summarize with AI</button>
                    <button id="ai-keywords-btn">Extract Keywords</button>
                </div>
                <button id="close-open-question-btn" class="danger-item" style="padding: 8px 16px; border-radius: 6px; border: none; cursor: pointer;">
                    ⏹️ End Poll
                </button>
            </div>
        </div>
    </div>

    <!-- End Lesson Modal -->
    <div id="end-lesson-modal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>🎓 End of Lesson</h3>
                <button class="modal-close">×</button>
            </div>
            <div class="modal-body">
                <p>The lesson has ended! Choose which report you'd like to generate:</p>
                <div style="display: flex; flex-direction: column; gap: 10px; margin-top: 15px;">
                    <button class="poll-type-btn" onclick="generateLessonSummary()">
                        📋 Comprehensive Summary Report
                    </button>
                    <button class="poll-type-btn" onclick="exportLessonData()">
                        💾 Export Lesson Data
                    </button>
                    <button class="poll-type-btn" onclick="generateStudentProgress()">
                        👥 Student Progress Report
                    </button>
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Close</button>
            </div>
        </div>
    </div>

<!-- Scripts -->
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-functions-compat.js"></script>
    <script src="firebase-config.js"></script>

    <!-- טען את ClassroomSDK לפני teacher-dashboard -->
    <script src="js/ClassroomSDK.js"></script>
    <script src="js/teacher-dashboard.js"></script>

    <!-- =========================================================== -->
    <!-- ========= CONTENT & AI PROMPT MANAGEMENT MODAL ============ -->
    <!-- =========================================================== -->
    <div id="content-manager-modal" class="modal-overlay">
        <div class="modal-content" style="max-width: 800px;">
            <div class="modal-header">
                <h3>📚 Manage Your Content & AI Contexts</h3>
                <button class="modal-close">×</button>
            </div>
            <div class="modal-body" style="padding: 0;">
                <!-- Tabs Navigation -->
                <div class="tabs">
                    <button class="tab-link active" data-tab="tab-my-content">My Content</button>
                    <button class="tab-link" data-tab="tab-my-prompts">My AI Prompts</button>
                </div>

                <!-- Tab 1: My Content (Links) -->
                <div id="tab-my-content" class="tab-content active">
                    <div class="content-list" id="personal-content-list">
                        <!-- Personal links will be dynamically inserted here -->
                    </div>
                    <div class="content-form-container">
                        <h4>Add New Content</h4>
                        <form id="personal-content-form">
                            <input type="text" id="content-title" placeholder="Title (e.g., 'PhET Simulation')" required>
                            <input type="text" id="content-desc" placeholder="Description" required>
                            <input type="text" id="content-icon" placeholder="Icon (e.g., '🎯')" required>
                            <input type="url" id="content-url" placeholder="https://..." required>
                            <input type="hidden" id="content-id">
                            <button type="submit">Save Content</button>
                            <button type="button" id="cancel-content-edit" class="secondary" style="display:none;">Cancel Edit</button>
                        </form>
                    </div>
                </div>

                <!-- Tab 2: My AI Prompts -->
                <div id="tab-my-prompts" class="tab-content">
                    <h4>Select Active AI Context for this Lesson</h4>
                    <select id="active-prompt-selector">
                        <option value="general">General (Open Context)</option>
                        <!-- Personal prompts will be dynamically inserted here -->
                    </select>

                    <hr>

                    <h4>My Prompt Library</h4>
                    <div class="content-list" id="personal-prompts-list">
                        <!-- Personal prompts will be dynamically inserted here -->
                    </div>

                    <h4>Prompt Creation Wizard</h4>
                    <div class="prompt-wizard">
                        <p>1. Describe your lesson goal in your own words:</p>
                        <textarea id="prompt-goal-input" placeholder="e.g., 'Today I'm teaching the Pythagorean theorem and solving problems with right-angled triangles.'"></textarea>
                        <button id="generate-prompt-suggestion-btn">Create a Prompt for Me</button>

                        <div id="prompt-editing-area" style="display:none; margin-top: 20px;">
                            <p>2. Refine the suggested prompt and save it:</p>
                            <form id="personal-prompt-form">
                                <input type="text" id="prompt-title" placeholder="Prompt Title (e.g., 'Pythagorean Theorem')" required>
                                <textarea id="prompt-content" rows="6" required></textarea>
                                <input type="hidden" id="prompt-id">
                                <button type="submit">Save Prompt</button>
                                <button type="button" id="cancel-prompt-edit" class="secondary" style="display:none;">Cancel Edit</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        console.log('🟢 TRACE: index.html loaded');
        
        // וודא שFirebase מאותחל
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();
        const auth = firebase.auth();
        const functions = firebase.functions();
        
        console.log('🔍 Firebase initialized');
        console.log('🔍 ClassroomSDK available:', typeof ClassroomSDK);
        
        window.teacherDashboard = new TeacherDashboard();
        firebase.auth().onAuthStateChanged(user => {
            if (user) {
                // User is signed in.
                console.log('✅ User is signed in:', user.uid);
                document.getElementById('loading-overlay').classList.remove('hidden'); // Show loading
                window.teacherDashboard.handleSuccessfulLogin(user)
                    .catch(err => {
                        console.error("Login handling failed", err);
                        window.teacherDashboard.logout(); // Logout on error
                    });
            } else {
                // User is signed out.
                console.log('🚪 User is signed out.');
                window.teacherDashboard.showLoginScreen();
            }
        });
        
        // פונקציות גלובליות
        function sendQuickMessage(message) {
            console.log('🟢 TRACE: sendQuickMessage called');
            if (window.teacherDashboard) {
                window.teacherDashboard.sendMessageToClass(message);
            } else {
                console.error('❌ teacherDashboard not available');
            }
        }

        function testAIService() {
            console.log('🟢 TRACE: testAIService called');
            if (window.teacherDashboard && window.teacherDashboard.testAIService) {
                window.teacherDashboard.testAIService();
            } else {
                console.error('❌ testAIService not available');
            }
        }

        function sendPrivateMessage() {
            if (window.teacherDashboard && window.teacherDashboard.sendPrivateMessage) {
                window.teacherDashboard.sendPrivateMessage();
            }
        }

        // בדיקת debug למצב המערכת
        function debugSystemState() {
            console.log('🔍 System Debug:');
            console.log('- window.teacherDashboard:', !!window.teacherDashboard);
            console.log('- teacherDashboard.sdk:', !!window.teacherDashboard?.sdk);
            console.log('- sdk.toggleAI:', !!window.teacherDashboard?.sdk?.toggleAI);
            console.log('- ClassroomSDK:', typeof ClassroomSDK);
            
            if (window.teacherDashboard?.sdk) {
                console.log('- SDK methods:', Object.getOwnPropertyNames(window.teacherDashboard.sdk));
            }
        }
        
        // קרא לבדיקה אחרי 3 שניות
        setTimeout(debugSystemState, 3000);
    </script>
</body>
</html>


=================================================================
FILE: student-app.html
FULL PATH: public\student-app.html
=================================================================

<!DOCTYPE html>
<!--
 * Copyright © 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
-->
<html lang="en" dir="ltr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Learning Space</title>
    <link rel="stylesheet" href="css/student-app.css">
</head>
<body>
    <div id="login-container" class="container">
        <div class="login-box">
            <h1>✏️ Classroom Learning Space</h1>
            <p>To join the lesson, please enter your name and room code</p>
            <form id="login-form">
                <input type="text" id="player-name" placeholder="Your name" required>
                <div class="input-group">
                    <label for="teacher-uid">🏫 Room Code:</label>
                    <input type="text" id="teacher-uid" placeholder="Enter 4-digit room code" maxlength="4" required>
                </div>
                <button type="submit">Join Lesson</button>
            </form>
        </div>
    </div>

    <main id="main-container" style="display: none;">
        <iframe id="content-frame" src="about:blank" title="Lesson Content"></iframe>
    </main>

    <div id="poll-interface" style="position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); z-index: 1001; background: rgba(30, 30, 50, 0.9); padding: 20px; border-radius: 12px; display: none; gap: 15px; border: 2px solid white; box-shadow: 0 0 20px rgba(0,0,0,0.5);">
    </div>

    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-functions-compat.js"></script>

    <script src="firebase-config.js"></script>

    <script>
      // Initialize the Firebase app using your configuration
      firebase.initializeApp(firebaseConfig);

      // Create global references to the services we will use
      const db = firebase.firestore();
      const auth = firebase.auth();
      const functions = firebase.functions();
    </script>

    <script src="js/ClassroomSDK.js"></script>
    <script src="js/student-app.js"></script>
</body>
</html>


=================================================================
FILE: css\student-app.css
FULL PATH: public\css\student-app.css
=================================================================

/*
 * Copyright © 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */

/* student-app.css - English LTR Version */

body, html {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    background-color: #f0f2f5;
    overflow: hidden;
    direction: ltr; /* Explicit LTR direction */
}

.container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
}

.login-box {
    background: white;
    padding: 40px;
    border-radius: 12px;
    box-shadow: 0 8px 30px rgba(0,0,0,0.12);
    text-align: center;
    width: 90%;
    max-width: 400px;
}

.login-box h1 {
    color: #333;
    margin-bottom: 10px;
}

.login-box p {
    color: #666;
    margin-bottom: 25px;
}

#player-name {
    width: 100%;
    padding: 12px;
    margin-bottom: 20px;
    border: 1px solid #ccc;
    border-radius: 8px;
    font-size: 16px;
    box-sizing: border-box;
    text-align: left; /* Explicit LTR alignment */
    direction: ltr;
}

.input-group {
    margin-bottom: 20px;
    text-align: left; /* Align labels to the left for LTR */
}

.input-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: #555;
}

#teacher-uid {
    width: 100%;
    padding: 12px;
    border: 1px solid #ccc;
    border-radius: 8px;
    font-size: 16px;
    box-sizing: border-box;
    text-align: left; /* Explicit LTR alignment */
    direction: ltr;
}

.login-box button {
    width: 100%;
    padding: 12px;
    border: none;
    background-color: #007bff;
    color: white;
    border-radius: 8px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s;
}

.login-box button:hover {
    background-color: #0056b3;
}

#main-container {
    width: 100%;
    height: 100%;
}

#content-frame {
    width: 100%;
    height: 100%;
    border: none;
}

/* Message and Poll Animations */
.new-message-indicator {
    animation: pulse 1.5s infinite;
}

@keyframes pulse {
    0% {
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.7);
    }
    70% {
        transform: scale(1.1);
        box-shadow: 0 0 10px 20px rgba(0, 123, 255, 0);
    }
    100% {
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0);
    }
}

/* Shake animation for notifications */
@keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-2px); }
    75% { transform: translateX(2px); }
}

.new-message-shake {
    animation: shake 0.5s ease-in-out 3;
}

/* Bounce animation for message badges */
@keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-10px); }
    60% { transform: translateY(-5px); }
}

.message-badge {
    position: absolute !important;
    top: -5px !important;
    right: -5px !important;
    background: #dc3545 !important;
    color: white !important;
    border-radius: 50% !important;
    width: 20px !important;
    height: 20px !important;
    font-size: 12px !important;
    font-weight: bold !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    animation: bounce 0.5s ease !important;
    z-index: 1001 !important;
}

/* Poll Interface Styles */
#poll-interface {
    display: flex;
    gap: 15px;
    align-items: center;
    justify-content: center;
    text-align: center;
    direction: ltr;
}

#poll-interface button {
    transition: all 0.3s ease;
    font-family: inherit;
}

#poll-interface button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

#poll-interface button:active {
    transform: translateY(0);
}

#poll-interface button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
}

#poll-interface textarea {
    text-align: left; /* LTR text input */
    direction: ltr;
}

/* Blinking animation for chat notifications */
.blinking {
    animation: blink-animation 0.5s infinite alternate;
}

@keyframes blink-animation {
    from {
        transform: scale(1);
        box-shadow: 0 0 10px #fff;
    }
    to {
        transform: scale(1.1);
        box-shadow: 0 0 20px #ffeb3b, 0 0 30px #ffeb3b;
    }
}

/* High Z-index for floating elements */
#classroom-ai-container {
    z-index: 10002 !important;
}

#classroom-chat-btn {
    z-index: 10000 !important;
}

#classroom-chat-container {
    z-index: 10001 !important;
}

/* Auto Chat Opening Animation - updated for LTR */
@keyframes chatSlideIn {
    from {
        transform: translateX(100%); /* Slide in from right for LTR */
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

/* Special visual effect for auto-opened chat */
.chat-auto-opened {
    border: 2px solid #007bff !important;
    box-shadow: 0 0 20px rgba(0, 123, 255, 0.5) !important;
}

/* Button pulse animation */
@keyframes chatButtonPulse {
    0% {
        transform: scale(1);
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }
    50% {
        transform: scale(1.1);
        box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
    }
    100% {
        transform: scale(1);
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }
}

.chat-button-pulse {
    animation: chatButtonPulse 0.6s ease-in-out;
}

/* Responsive adjustments for mobile */
@media (max-width: 768px) {
    .login-box {
        padding: 30px;
        margin: 20px;
    }
    
    #poll-interface {
        flex-direction: column;
        gap: 10px;
        padding: 15px;
    }
    
    #poll-interface button {
        width: 100%;
        max-width: 200px;
    }
}

/* Success notification styles */
.success-notification {
    background: #28a745;
    color: white;
    padding: 10px 15px;
    border-radius: 6px;
    margin: 10px 0;
    text-align: center;
    animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}


=================================================================
FILE: css\teacher-dashboard.css
FULL PATH: public\css\teacher-dashboard.css
=================================================================

/*
 * Copyright © 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */

/* teacher-dashboard.css - English LTR Version */

/* Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    color: #333;
}

/* Header & Navigation */
.header {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    box-shadow: 0 2px 20px rgba(0,0,0,0.1);
    position: sticky;
    top: 0;
    z-index: 1000;
}

.nav-container {
    max-width: 1400px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 20px;
    height: 70px;
}

.logo {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 24px;
    font-weight: bold;
    color: #2c3e50;
}

.nav-menu {
    display: flex;
    list-style: none;
    gap: 0;
}

.nav-item {
    position: relative;
}

.nav-link {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 15px 20px;
    text-decoration: none;
    color: #555;
    font-weight: 500;
    transition: all 0.3s ease;
    border-radius: 8px;
    margin: 0 2px;
}

.nav-link:hover {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    transform: translateY(-2px);
}

.nav-icon {
    font-size: 18px;
}

/* Dropdown Menu */
.dropdown {
    position: absolute;
    top: 100%;
    left: 0; /* Changed from right: 0 for LTR */
    background: white;
    min-width: 280px;
    border-radius: 12px;
    box-shadow: 0 10px 40px rgba(0,0,0,0.15);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    border: 1px solid #e1e5e9;
    overflow: hidden;
}

.nav-item:hover .dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
}

.dropdown-header {
    padding: 15px 20px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-bottom: 1px solid #dee2e6;
    font-weight: bold;
    color: #495057;
    font-size: 14px;
}

.dropdown-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 20px;
    text-decoration: none;
    color: #555;
    transition: all 0.2s ease;
    border-bottom: 1px solid #f8f9fa;
}

.dropdown-item:hover {
    background: #f8f9fa;
    color: #007bff;
    padding-left: 25px; /* Changed from padding-right for LTR */
}

.dropdown-item:last-child {
    border-bottom: none;
}

.dropdown-icon {
    font-size: 16px;
    width: 20px;
    text-align: center;
}

.dropdown-content {
    flex: 1;
}

.dropdown-title {
    font-weight: 600;
    margin-bottom: 2px;
}

.dropdown-desc {
    font-size: 12px;
    color: #6c757d;
}

/* Status Indicator */
.status-indicator {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    background: #28a745;
    color: white;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
}

.status-dot {
    width: 8px;
    height: 8px;
    background: white;
    border-radius: 50%;
    animation: pulse 2s infinite;
}

.connected {
    background: #27ae60;
    color: white;
}

.disconnected {
    background: #e74c3c;
    color: white;
}

/* Main Content */
.main-content {
    max-width: 1400px;
    margin: 30px auto;
    padding: 0 20px;
    display: grid;
    grid-template-columns: 1fr 1fr 400px;
    gap: 30px;
}

.section {
    background: white;
    border-radius: 15px;
    padding: 25px;
    box-shadow: 0 5px 25px rgba(0,0,0,0.1);
    backdrop-filter: blur(10px);
}

.section h2 {
    margin-bottom: 20px;
    color: #2c3e50;
    font-size: 20px;
    display: flex;
    align-items: center;
    gap: 10px;
    border-bottom: 2px solid #3498db;
    padding-bottom: 10px;
}

/* Students List */
.students-list {
    max-height: 300px;
    overflow-y: auto;
}

.student-item {
    background: white;
    margin: 10px 0;
    padding: 15px;
    border-radius: 8px;
    border-left: 4px solid #27ae60; /* Changed from border-right for LTR */
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.student-name {
    font-weight: bold;
    font-size: 1.2em;
    color: #2c3e50;
}

.student-status {
    font-size: 0.9em;
    color: #27ae60;
    margin-top: 5px;
}

.no-students {
    text-align: center;
    color: #666;
    font-style: italic;
    padding: 20px;
}

/* Messages Area */
.chat-messages, .messages-area {
    max-height: 400px;
    overflow-y: auto;
    border: 1px solid #ddd;
    border-radius: 8px;
    background: white;
    padding: 15px;
    margin-bottom: 15px;
}

.message-item {
    padding: 15px;
    border-bottom: 1px solid #eee;
    animation: slideInMessage 0.3s ease-out;
    text-align: left; /* Explicit LTR alignment */
    direction: ltr;
}

.message-item:last-child {
    border-bottom: none;
}

.message-sender {
    font-weight: bold;
    color: #3498db;
    margin-bottom: 5px;
}

.message-content {
    color: #555;
    margin-bottom: 5px;
}

.message-time {
    font-size: 0.8em;
    color: #999;
}

.no-messages {
    text-align: center;
    color: #666;
    font-style: italic;
    padding: 20px;
}

/* Chat Input */
.chat-input, .send-message-area {
    background: white;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    margin-top: 15px;
}

.chat-input textarea, .message-input {
    width: 100%;
    padding: 12px;
    border: 2px solid #ddd;
    border-radius: 20px;
    resize: none;
    font-family: inherit;
    font-size: 14px;
    line-height: 1.4;
    transition: all 0.3s ease;
    direction: ltr; /* Changed from rtl */
    text-align: left; /* Changed from right */
    min-height: 60px;
}

.chat-input textarea:focus, .message-input:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 10px rgba(52, 152, 219, 0.2);
}

.chat-input button, .send-button {
    width: 100%;
    margin-top: 10px;
    padding: 12px;
    background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
    color: white;
    border: none;
    border-radius: 20px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 16px;
}

.chat-input button:hover, .send-button:hover {
    background: linear-gradient(135deg, #2980b9 0%, #1f5f8b 100%);
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
}

.chat-input button:active, .send-button:active {
    transform: translateY(0);
}

/* Activity Log */
.activity-log {
    max-height: 300px;
    overflow-y: auto;
    padding: 10px;
}

.activity-item {
    background: white;
    margin: 8px 0;
    padding: 12px;
    border-radius: 6px;
    border-left: 3px solid #e74c3c; /* Changed from border-right for LTR */
    font-size: 0.9em;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    text-align: left; /* Explicit LTR alignment */
    direction: ltr;
}

.activity-time {
    font-size: 0.8em;
    color: #666;
    margin-bottom: 5px;
}

.activity-content {
    color: #333;
}

.no-activity {
    text-align: center;
    color: #666;
    font-style: italic;
    padding: 20px;
}

/* Stats */
.stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 15px;
    margin-bottom: 20px;
}

.stat-card {
    background: white;
    padding: 20px;
    border-radius: 10px;
    text-align: center;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.stat-number {
    font-size: 2em;
    font-weight: bold;
    color: #3498db;
}

.stat-label {
    color: #666;
    margin-top: 5px;
}

/* Special Buttons */
.danger-item:hover {
    background: #fff5f5 !important;
    color: #dc3545 !important;
}

.success-item:hover {
    background: #f0fff4 !important;
    color: #28a745 !important;
}

.warning-item:hover {
    background: #fffbf0 !important;
    color: #ffc107 !important;
}

.tool-button.danger {
    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
    color: white;
    border: 2px solid #c0392b;
}

.tool-button.danger:hover {
    background: linear-gradient(135deg, #c0392b 0%, #a93226 100%);
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
}

.tool-button.danger:active {
    transform: translateY(-1px);
}

.tool-button.danger .tool-icon {
    font-size: 24px;
}

.tool-button.danger .tool-label {
    font-weight: bold;
}

/* Quick Actions */
.quick-actions {
    margin-top: 20px;
}

.action-button {
    display: block;
    width: 100%;
    padding: 10px;
    margin: 8px 0;
    background: #27ae60;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    transition: background 0.3s;
}

.action-button:hover {
    background: #229954;
}

.action-button.secondary {
    background: #95a5a6;
}

.action-button.secondary:hover {
    background: #7f8c8d;
}

/* Debug Console */
.enhanced-debug-console {
    position: fixed;
    bottom: 10px;
    left: 10px;
    width: 500px;
    height: 200px;
    background: #1a1a1a;
    color: #00ff00;
    font-family: 'Courier New', monospace;
    font-size: 11px;
    padding: 10px;
    border-radius: 8px;
    overflow-y: auto;
    z-index: 9999;
    border: 2px solid #333;
    box-shadow: 0 4px 20px rgba(0,0,0,0.5);
    display: none;
    direction: ltr; /* Force LTR for debug console */
    text-align: left;
}

/* Animations */
@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}

@keyframes slideInMessage {
    from {
        transform: translateX(-100%); /* Changed direction for LTR */
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.pulse {
    animation: pulse 2s infinite;
}

/* Scrollbars */
.students-list::-webkit-scrollbar,
.chat-messages::-webkit-scrollbar,
.messages-area::-webkit-scrollbar,
.activity-log::-webkit-scrollbar {
    width: 6px;
}

.students-list::-webkit-scrollbar-track,
.chat-messages::-webkit-scrollbar-track,
.messages-area::-webkit-scrollbar-track,
.activity-log::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
}

.students-list::-webkit-scrollbar-thumb,
.chat-messages::-webkit-scrollbar-thumb,
.messages-area::-webkit-scrollbar-thumb,
.activity-log::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 3px;
}

.students-list::-webkit-scrollbar-thumb:hover,
.chat-messages::-webkit-scrollbar-thumb:hover,
.messages-area::-webkit-scrollbar-thumb:hover,
.activity-log::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

/* Responsive Design */
@media (max-width: 768px) {
    .nav-menu {
        display: none;
    }
    
    .main-content {
        grid-template-columns: 1fr;
        gap: 20px;
        margin: 20px auto;
    }
    
    .dropdown {
        position: fixed;
        top: 70px;
        left: 20px;
        right: 20px;
        min-width: auto;
    }
    
    .section {
        padding: 15px;
    }
    
    .nav-container {
        padding: 0 15px;
    }
}

/* Modal Styles */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9998 !important;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.modal-overlay.visible {
    opacity: 1;
    visibility: visible;
}

.modal-content {
    background: white;
    border-radius: 15px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow: hidden;
    transform: scale(0.9);
    transition: transform 0.3s ease;
}

.modal-overlay.visible .modal-content {
    transform: scale(1);
}

.modal-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-header h3 {
    margin: 0;
    font-size: 18px;
}

.modal-close {
    background: none;
    border: none;
    color: white;
    font-size: 24px;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background 0.2s ease;
}

.modal-close:hover {
    background: rgba(255, 255, 255, 0.2);
}

.modal-body {
    padding: 20px;
    text-align: left; /* Explicit LTR */
    direction: ltr;
}

.modal-body p {
    margin-bottom: 15px;
    color: #666;
    font-size: 14px;
}

.modal-body textarea {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 8px;
    resize: vertical;
    font-family: inherit;
    font-size: 14px;
    outline: none;
    transition: border-color 0.2s ease;
    direction: ltr; /* Explicit LTR */
    text-align: left;
}

.modal-body textarea:focus {
    border-color: #667eea;
}

.modal-footer {
    padding: 20px;
    display: flex;
    gap: 10px;
    justify-content: flex-end;
    border-top: 1px solid #eee;
}

.modal-footer button {
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.2s ease;
}

.modal-footer button:not(.primary) {
    background: #f8f9fa;
    color: #666;
}

.modal-footer button:not(.primary):hover {
    background: #e9ecef;
}

.modal-footer button.primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.modal-footer button.primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
}

/* Private Message Button */
.private-message-btn {
    background: linear-gradient(135deg, #43a047 0%, #388e3c 100%);
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.private-message-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(67, 160, 71, 0.4);
}

/* Student Item Styles */
.student-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    border: 1px solid #eee;
    border-radius: 8px;
    margin-bottom: 8px;
    background: #f8f9fa;
    transition: all 0.2s ease;
}

.student-item:hover {
    background: #e9ecef;
    border-color: #667eea;
}

.student-info {
    display: flex;
    align-items: center;
    gap: 10px;
    flex: 1;
}

.student-name {
    font-weight: 600;
    color: #333;
}

.student-actions {
    display: flex;
    gap: 8px;
}

/* Message Item Styles */
.message-item {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 12px;
    margin-bottom: 8px;
    border-left: 4px solid #667eea; /* Changed from border-right for LTR */
}

.message-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
}

.message-sender {
    font-weight: 600;
    color: #333;
}

.message-time {
    font-size: 12px;
    color: #666;
}

.message-content {
    color: #555;
    line-height: 1.4;
}

/* Room Code Section */
.room-code-section {
    grid-column: 1 / -1;
    margin-bottom: 20px;
}

/* AI Model Button Styles */
.ai-model-btn.active {
    background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%) !important;
    color: white !important;
}

.ai-model-btn.active .dropdown-title,
.ai-model-btn.active .dropdown-desc {
    color: white !important;
}

.current-ai-model {
    font-weight: bold;
    color: #4CAF50;
}

/* Header Room Display */
.header-room-display {
    display: flex;
    align-items: center;
    gap: 12px;
    background-color: rgba(255, 255, 255, 0.1);
    padding: 5px 15px;
    border-radius: 20px;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.room-code-label {
    font-size: 14px;
    font-weight: 500;
    color: #444;
}

.room-code-value {
    font-size: 20px;
    font-weight: bold;
    color: #3f51b5;
    letter-spacing: 2px;
}

.qr-code {
    width: 40px;
    height: 40px;
    border-radius: 4px;
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.qr-code:hover {
    transform: scale(3.5);
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    border: 2px solid white;
}

/* Loading Overlay */
#loading-overlay {
    position: fixed;
    inset: 0;
    background-color: rgba(94, 91, 204, 0.95);
    z-index: 10001;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: opacity 0.5s ease;
}

#loading-overlay.hidden {
    opacity: 0;
    pointer-events: none;
}

.spinner {
    width: 60px;
    height: 60px;
    border: 5px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: #ffffff;
    animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Poll Styles */
.poll-type-btn {
    padding: 15px 20px;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    background: white;
    color: #333;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: center;
}

.poll-type-btn:hover {
    border-color: #42a5f5;
    background: #f0f8ff;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(66, 165, 245, 0.2);
}

.poll-type-btn:active {
    transform: translateY(0);
}

#poll-results-container {
    margin-top: 20px;
}

#poll-results-container > div {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 10px;
    border-left: 4px solid #42a5f5; /* Changed from border-right for LTR */
}

#stop-poll-btn {
    background: #e74c3c;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    margin-top: 20px;
    font-weight: 500;
    transition: all 0.3s ease;
}

#stop-poll-btn:hover {
    background: #c0392b;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(231, 76, 60, 0.3);
}

/* Logo Styles */
.logo-icon {
  font-size: 1.3em;
  margin-right: 8px;
  vertical-align: middle;
}

.logo-text {
  vertical-align: middle;
}

/* High Z-index Elements */
#classroom-ai-btn {
    z-index: 10001 !important;
    position: fixed !important;
}

#classroom-ai-container {
    z-index: 10002 !important;
    position: fixed !important;
}

#poll-creation-modal,
#open-question-modal {
    z-index: 9998 !important;
}

#classroom-chat-btn {
    z-index: 10000 !important;
}

#classroom-chat-container {
    z-index: 10001 !important;
}

/* ================================================= */
/* ========== NEW HEADER STYLES - OVERHAUL ========= */
/* ================================================= */

/* 1. Fix Header Overflow & Layout */
.nav-container {
    justify-content: normal;
    gap: 15px; /* Reduced gap */
}

.header-left, .header-right {
    display: flex;
    align-items: center;
    gap: 15px; /* Reduced gap */
    flex-shrink: 0;
}

.header-center {
    flex-grow: 1;
    display: flex;
    justify-content: center;
    min-width: 0;
}

.nav-link {
    padding: 12px 15px; /* Reduced padding */
}

/* 2. Redesigned Connection Status Indicator */
.status-indicator {
    display: none;
}

#connectionStatus {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: #f39c12;
    transition: all 0.3s ease;
    cursor: help;
    animation: pulse 2s infinite;
}

#connectionStatus.connected {
    background-color: #27ae60;
    box-shadow: 0 0 10px #27ae60;
}

#connectionStatus.disconnected {
    background-color: #e74c3c;
    box-shadow: 0 0 10px #e74c3c;
}

/* 3. New Action Buttons */
#resetScreensBtn {
    display: none !important;
}

.dropdown-action-btn {
    position: relative;
}

.main-action-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    color: white;
    border: 2px solid white;
    font-size: 20px;
    font-weight: bold;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    box-shadow: 0 2px 10px rgba(0,0,0,0.2);
}

.main-action-icon.green {
    background: #27ae60; /* Green color for logout */
}

.main-action-icon.green:hover {
    background: #229954; /* Darker green */
    transform: scale(1.1);
}

.dropdown-action-btn .main-action-icon {
    background: #e74c3c;
}

.dropdown-action-btn:hover .main-action-icon {
    transform: scale(1.1) rotate(90deg);
    background: #c0392b;
}

.dropdown-action-btn .dropdown {
    left: auto;
    right: 0;
    top: 90%;
}

.dropdown-action-btn:hover .dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
}

/* ================================================= */
/* ============ NEW LOGIN SCREEN STYLES ============ */
/* ================================================= */

.login-overlay {
    display: flex; /* This will be controlled by JS */
    align-items: center;
    justify-content: center;
    text-align: center;
}
.login-box {
    background: rgba(255, 255, 255, 0.95);
    padding: 40px 50px;
    border-radius: 20px;
    box-shadow: 0 10px 40px rgba(0,0,0,0.2);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    max-width: 450px;
}
.login-box p {
    margin-top: 10px;
    color: #555;
}
.signin-options-title {
    margin: 30px 0 15px 0;
    color: #333;
    font-weight: 500;
    text-transform: uppercase;
    font-size: 14px;
    letter-spacing: 1px;
}
.signin-options {
    display: flex;
    justify-content: center;
    gap: 25px;
}
.signin-btn {
    width: 70px;
    height: 70px;
    border-radius: 50%;
    border: 1px solid #ddd;
    background: white;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 15px;
}
.signin-btn:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0,0,0,0.15);
    border-color: #aaa;
}
.signin-btn img {
    width: 100%;
    height: auto;
}

/* =========================================================== */
/* ========= CONTENT & PROMPT MANAGER MODAL STYLES =========== */
/* =========================================================== */

/* Tabs */
.tabs {
    display: flex;
    border-bottom: 1px solid #eee;
    background: #f8f9fa;
}
.tab-link {
    padding: 15px 20px;
    cursor: pointer;
    border: none;
    background: none;
    font-size: 16px;
    font-weight: 500;
    color: #555;
    border-bottom: 3px solid transparent;
    transition: all 0.2s ease;
}
.tab-link:hover {
    background: #e9ecef;
}
.tab-link.active {
    color: #007bff;
    border-bottom-color: #007bff;
}
.tab-content {
    display: none;
    padding: 25px;
}
.tab-content.active {
    display: block;
}

/* Content/Prompt List */
.content-list {
    max-height: 250px;
    overflow-y: auto;
    margin-bottom: 20px;
    border: 1px solid #eee;
    border-radius: 8px;
}
.list-item {
    display: flex;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid #eee;
}
.list-item:last-child {
    border-bottom: none;
}
.list-item-icon {
    font-size: 24px;
    margin-right: 15px;
}
.list-item-details {
    flex-grow: 1;
}
.list-item-title {
    font-weight: 600;
}
.list-item-desc {
    font-size: 13px;
    color: #666;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 400px;
}
.list-item-actions button {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 18px;
    margin-left: 10px;
    padding: 5px;
    transition: color 0.2s;
}
.list-item-actions .edit-btn:hover { color: #007bff; }
.list-item-actions .delete-btn:hover { color: #e74c3c; }

/* Forms */
.content-form-container, .prompt-wizard {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #eee;
}
#personal-content-form, #personal-prompt-form {
    display: grid;
    gap: 15px;
}
#personal-content-form { grid-template-columns: 1fr 1fr; }
#personal-content-form input[type="url"] { grid-column: 1 / -1; }

#content-manager-modal input[type="text"],
#content-manager-modal input[type="url"],
#content-manager-modal textarea,
#content-manager-modal select {
    width: 100%;
    padding: 12px;
    border: 1px solid #ccc;
    border-radius: 6px;
    font-size: 14px;
}
#content-manager-modal button {
    padding: 12px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    background: #007bff;
    color: white;
    transition: background 0.2s;
}
#content-manager-modal button:hover {
    background: #0056b3;
}
#content-manager-modal button.secondary {
    background: #6c757d;
}
#content-manager-modal button.secondary:hover {
    background: #5a6268;
}


=================================================================
FILE: js\ClassroomSDK.js
FULL PATH: public\js\ClassroomSDK.js
=================================================================

/*
 * Copyright © 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */

// SIMPLIFIED CLASSROOM SDK - 4-DIGIT ROOM CODES ONLY!

class ClassroomSDK {
    constructor() {
        try {
            this.db = firebase.firestore();
            this.auth = firebase.auth();
            this.functions = firebase.app().functions();
            console.log('✅ Firebase services initialized in constructor.');
        } catch (e) {
            console.error("❌ CRITICAL: Could not initialize Firebase services.", e);
            alert("Fatal Error: Could not connect to Firebase services. Please refresh.");
        } 
        

        this.playerName = null;
        this.roomCode = null; // 4-digit room code
        this.isTeacher = false;
        this.isInitialized = false;
        this.studentId = null;
        this.isAiActiveForClass = false;

        // UI components
        this.chatButton = null;
        this.chatContainer = null;
        this.chatMessages = null;
        this.chatInput = null;
        this.aiButton = null;
        this.aiContainer = null;
        this.aiMessages = null;
        this.aiInput = null;
        
        // Listeners
        this.studentsListener = null;
        this.messagesListener = null;
        this.roomListener = null;
    }

    // Generate unique 4-digit room code
    async generateUniqueRoomCode() {
        let attempts = 0;
        const maxAttempts = 20; // Maximum 20 attempts
        
        while (attempts < maxAttempts) {
            // Generate random 4-digit code
            const roomCode = Math.floor(1000 + Math.random() * 9000).toString();
            
            // Check that code doesn't exist
            const roomRef = this.db.collection('rooms').doc(roomCode);
            const doc = await roomRef.get();
            
            if (!doc.exists) {
                console.log(`✅ Found unique room code: ${roomCode}`);
                return roomCode;
            }
            
            console.log(`🔄 Room code ${roomCode} exists, trying next...`);
            attempts++;
        }
        
        // If not found after 20 attempts, return random code
        const randomCode = Math.floor(1000 + Math.random() * 9000).toString();
        console.log(`✅ Generated random room code: ${randomCode}`);
        return randomCode;
    }

    // SIMPLIFIED INIT - 4-digit room codes only!
    async init(appName, userOrStudentId, playerName, roomCode = null) {
        console.log(`🚀 Initializing ${appName}...`);
        this.appName = appName;
        this.playerName = playerName;

        if (appName === 'teacher-dashboard') {
            // תהליך האתחול של המורה
            this.isTeacher = true;
            this.playerName = "Teacher";
            this.roomCode = await this.generateUniqueRoomCode();
            await this.initializeRoom(userOrStudentId.uid); // Pass the teacher's UID

        } else if (appName === 'student-app' && roomCode) {
            // תהליך האתחול של התלמיד
            this.isTeacher = false;
            this.roomCode = roomCode;
            this.studentId = userOrStudentId; // This is the student's session ID

            // ודא שהחדר קיים לפני ניסיון הצטרפות
            const roomExists = await this.checkRoomExists(roomCode);
            if (!roomExists) {
                throw new Error(`Room with code ${roomCode} does not exist.`);
            }
            await this.joinRoom(this.studentId, this.playerName);

        } else {
            throw new Error('Invalid initialization parameters.');
        }

        this.isInitialized = true;
        console.log(`✅ ${appName} initialized successfully for room: ${this.roomCode}`);
    }

    // הוסף את שתי הפונקציות האלה לקלאס
    async checkRoomExists(roomCode) {
        const roomRef = this.db.collection('rooms').doc(roomCode);
        const doc = await roomRef.get();
        return doc.exists;
    }

    // עדכון קל לפונקציית initializeRoom
    async initializeRoom(teacherUid) {
        const roomRef = this.db.collection('rooms').doc(this.roomCode);
        await roomRef.set({
            room_code: this.roomCode,
            created_at: firebase.firestore.FieldValue.serverTimestamp(),
            teacher_uid: teacherUid,
            settings: {
                ai_active: false,
                ai_model: 'chatgpt',
                current_command: null,
                currentPoll: { isActive: false }
            }
        });
    }

    // עדכון קל לפונקציית joinRoom
    async joinRoom(studentId, playerName) {
        const studentRef = this.db.collection('rooms').doc(this.roomCode)
                                 .collection('students').doc(studentId);
        await studentRef.set({
            uid: studentId,
            name: playerName,
            joined_at: firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // Listen for students
    listenForStudents(callback) {
        if (!this.roomCode) return;
        
        const studentsCollection = this.db.collection('rooms').doc(this.roomCode)
                                         .collection('students');
        
        this.studentsListener = studentsCollection.onSnapshot(snapshot => {
            const students = [];
            snapshot.forEach(doc => {
                students.push(doc.data());
            });
            console.log('👨‍🎓 Students updated:', students.length);
            
            if (typeof callback === 'function') {
                callback(students);
            }
        }, error => {
            console.error("🔥 Error listening for students:", error);
        });
    }

    // Listen for messages
    listenForMessages(callback) {
        if (!this.roomCode) return;

        const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                         .collection('messages')
                                         .orderBy('timestamp');

        this.messagesListener = messagesCollection.onSnapshot(snapshot => {
            const newMessages = [];
            snapshot.docChanges().forEach(change => {
                if (change.type === "added") {
                    const msg = change.doc.data();
                    const currentUserId = this.isTeacher ? this.auth.currentUser?.uid : this.studentId;
                    const isPrivate = msg.is_private === true;
                    const isRecipient = msg.recipient_uid === currentUserId;
                    const isSender = msg.sender_uid === currentUserId;

                    if (!isPrivate || this.isTeacher || isRecipient || isSender) {
                        newMessages.push(msg);
                    }
                }
            });

            if (newMessages.length > 0 && typeof callback === 'function') {
                callback(newMessages);
            }
        }, error => {
            console.error("🔥 Error listening for messages:", error);
        });
    }

    // Listen for room updates (commands, AI, etc.)
    listenForRoomUpdates(callback) {
        if (!this.roomCode) return;
        const roomRef = this.db.collection('rooms').doc(this.roomCode);

        this.roomListener = roomRef.onSnapshot(doc => {
            if (doc.exists && typeof callback === 'function') {
                // שלב קריטי: שלח את כל אובייקט הנתונים, ותן לאפליקציה להחליט
                callback(doc.data());
            }
        }, error => {
            console.error("🔥 Error listening for room updates:", error);
        });
    }

    // Send message
    async sendMessage(content) {
        if (!content || !content.trim() || !this.roomCode) return;

        try {
            const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                             .collection('messages');
            await messagesCollection.add({
                sender: this.playerName || "Teacher",
                sender_uid: this.isTeacher ? this.auth.currentUser?.uid : this.studentId,
                content: content,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                is_teacher: this.isTeacher
            });
        } catch (error) {
            console.error('🔥 Error sending message:', error);
            throw error;
        }
    }

    // Send command (teacher only)
    async sendCommand(commandName, payload = {}) {
        const roomRef = this.db.collection('rooms').doc(this.roomCode);
        await roomRef.update({
            'settings.current_command': {
                command: commandName,
                payload: payload,
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            },
            'last_activity': firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // Toggle AI mode (teacher only)
    async toggleAI() {
        console.log('[DIAGNOSTIC] 1. toggleAI function started.');
        const roomRef = this.db.collection('rooms').doc(this.roomCode);

        try {
            const doc = await roomRef.get();
            const currentAI = doc.exists ? doc.data().settings?.ai_active : false;
            console.log(`[DIAGNOSTIC] 2. Read from DB. currentAI is: ${currentAI}`);

            const newValue = !currentAI;
            console.log(`[DIAGNOSTIC] 3. Value to be written to DB is: ${newValue}`);

            await roomRef.update({
                'settings.ai_active': newValue
            });

            console.log('[DIAGNOSTIC] 4. SUCCESS: roomRef.update command finished without error.');
            return newValue;

        } catch (error) {
            // אם תהיה שגיאה כלשהי בפעולת הכתיבה, נראה אותה כאן
            console.error('[DIAGNOSTIC] 5. CRITICAL FAILURE: Error during toggleAI process.', error);
            // זרוק את השגיאה הלאה כדי שהקוד שקרא לפונקציה ידע שהיא נכשלה
            throw error;
        }
    }

    // Cleanup
    cleanup() {
        if (this.studentsListener) {
            this.studentsListener();
            this.studentsListener = null;
        }
        if (this.messagesListener) {
            this.messagesListener();
            this.messagesListener = null;
        }
        if (this.roomListener) {
            this.roomListener();
            this.roomListener = null;
        }
        if (this.roomListener_Polls) {
            this.roomListener_Polls();
            this.roomListener_Polls = null;
        }
    }

    // Returns room code
    getRoomCode() {
        return this.roomCode;
    }

    // ========== CHAT INTERFACE ==========
    createChatInterface() {
        // Show chat interface only for students
        if (this.isTeacher) {
            console.log("Teacher view: Floating chat interface disabled.");
            return; 
        }

        if (document.getElementById('classroom-chat-btn')) return;
        
        this.chatButton = document.createElement('button');
        this.chatButton.id = 'classroom-chat-btn';
        this.chatButton.innerHTML = '💬';
        this.chatButton.style.cssText = 'position: fixed; bottom: 20px; right: 20px; width: 60px; height: 60px; border-radius: 50%; background: #007bff; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 1000;';
        this.chatButton.onclick = () => this.toggleChat();
        this.makeDraggable(this.chatButton);
        document.body.appendChild(this.chatButton);

        this.chatContainer = document.createElement('div');
        this.chatContainer.id = 'classroom-chat-container';
        this.chatContainer.style.cssText = 'position: fixed; bottom: 100px; right: 20px; width: 350px; height: 400px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;';
        
        const chatHeader = document.createElement('div');
        chatHeader.style.cssText = 'background: #007bff; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        chatHeader.innerHTML = `
            <span>💬 Class Chat</span>
            <button id="chat-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 5px;">−</button>
        `;
        
        this.makeDraggable(this.chatContainer, chatHeader);
        
        chatHeader.querySelector('#chat-minimize-btn').onclick = (e) => {
            e.stopPropagation();
            // Use App's close function to ensure state is updated
            if (window.App && window.App.closeChat) {
                window.App.closeChat();
            } else {
                this.toggleChat();
            }
        };
        
        this.chatContainer.appendChild(chatHeader);
        
        const chatContent = document.createElement('div');
        chatContent.style.cssText = 'height: calc(100% - 60px); display: flex; flex-direction: column;';
        
        this.chatMessages = document.createElement('div');
        this.chatMessages.id = 'classroom-chat-messages';
        this.chatMessages.style.cssText = 'flex: 1; padding: 15px; overflow-y: auto; background: #f8f9fa;';
        this.chatMessages.innerHTML = '<div style="text-align: center; color: #999; font-style: italic;">No messages sent yet</div>';
        
        const chatInputArea = document.createElement('div');
        chatInputArea.style.cssText = 'padding: 15px; border-top: 1px solid #eee; background: white;';
        
        this.chatInput = document.createElement('input');
        this.chatInput.type = 'text';
        this.chatInput.placeholder = 'Type a message...';
        this.chatInput.style.cssText = 'width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 20px; outline: none; font-size: 14px;';
        
        this.chatInput.onkeypress = (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const messageContent = this.chatInput.value.trim();
                if (messageContent) {
                    this.sendMessage(messageContent);
                    this.chatInput.value = '';
                }
            }
        };
        
        chatInputArea.appendChild(this.chatInput);
        chatContent.appendChild(this.chatMessages);
        chatContent.appendChild(chatInputArea);
        this.chatContainer.appendChild(chatContent);
        document.body.appendChild(this.chatContainer);
    }

    enableChat() {
        if (this.chatButton) {
            this.chatButton.style.display = 'block';
        }
    }

    toggleChat() {
        if (!this.chatContainer) return;
        
        // Use the App's state management functions
        if (window.App) {
            if (window.App.isChatOpen) {
                window.App.closeChat();
            } else {
                window.App.openChat();
                if (this.chatInput) {
                    this.chatInput.focus();
                }
            }
        } else {
            // Fallback for direct usage
            const isVisible = this.chatContainer.style.display !== 'none';
            this.chatContainer.style.display = isVisible ? 'none' : 'block';
            
            if (!isVisible && this.chatInput) {
                this.chatInput.focus();
            }
        }
    }

    addChatMessage(sender, content, messageObj) {
        if (!this.chatMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.style.cssText = 'margin-bottom: 10px; padding: 8px 12px; background: white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);';
        
        const senderSpan = document.createElement('div');
        senderSpan.style.cssText = 'font-weight: bold; color: #007bff; font-size: 12px; margin-bottom: 4px;';
        senderSpan.textContent = sender;
        
        const contentSpan = document.createElement('div');
        contentSpan.style.cssText = 'color: #333; line-height: 1.4;';
        contentSpan.textContent = content;
        
        messageDiv.appendChild(senderSpan);
        messageDiv.appendChild(contentSpan);
        
        // Remove first message if it's "No messages sent yet"
        if (this.chatMessages.children.length === 1 && 
            this.chatMessages.children[0].textContent.includes('No messages sent yet')) {
            this.chatMessages.innerHTML = '';
        }
        
        this.chatMessages.appendChild(messageDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    // ========== AI INTERFACE ==========
    createAIInterface() {
        if (document.getElementById('classroom-ai-btn')) return;

        this.aiButton = document.createElement('button');
        this.aiButton.id = 'classroom-ai-btn';
        this.aiButton.innerHTML = '🤖';
        // Button is now always visible
        this.aiButton.style.cssText = `position: fixed; bottom: 20px; right: 90px; width: 60px; height: 60px; border-radius: 50%; background: #4caf50; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10000; display: block;`;

        this.aiButton.onclick = () => this.toggleAI();
        this.makeDraggable(this.aiButton);
        document.body.appendChild(this.aiButton);

        // The rest of the function remains the same for creating the container...
        this.aiContainer = document.createElement('div');
        this.aiContainer.id = 'classroom-ai-container';
        this.aiContainer.style.cssText = 'position: fixed; bottom: 100px; right: 20px; width: 400px; height: 500px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;';

        const aiHeader = document.createElement('div');
        aiHeader.style.cssText = 'background: #4caf50; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        aiHeader.innerHTML = `<span>🤖 AI Assistant</span><button style="background:none;border:none;color:white;font-size:18px;cursor:pointer;">−</button>`;

        this.makeDraggable(this.aiContainer, aiHeader);

        aiHeader.querySelector('button').onclick = (e) => {
            e.stopPropagation();
            this.toggleAI();
        };

        this.aiContainer.appendChild(aiHeader);

        const aiContent = document.createElement('div');
        aiContent.style.cssText = 'height: calc(100% - 60px); display: flex; flex-direction: column;';

        this.aiMessages = document.createElement('div');
        this.aiMessages.id = 'classroom-ai-messages';
        this.aiMessages.style.cssText = 'flex: 1; padding: 15px; overflow-y: auto; background: #f8f9fa;';
        this.aiMessages.innerHTML = '<div style="text-align: center; color: #999; font-style: italic;">Ask the AI assistant...</div>';

        const aiInputArea = document.createElement('div');
        aiInputArea.style.cssText = 'padding: 15px; border-top: 1px solid #eee; background: white;';

        this.aiInput = document.createElement('input');
        this.aiInput.type = 'text';
        this.aiInput.placeholder = 'Ask a question...';
        this.aiInput.style.cssText = 'width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 20px; outline: none; font-size: 14px;';
        this.aiInput.onkeypress = (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const prompt = this.aiInput.value.trim();
                if (prompt) {
                    const lang = document.documentElement.lang || 'en';
                    this.sendAIMessage(prompt, lang);
                    this.aiInput.value = '';
                }
            }
        };

        aiInputArea.appendChild(this.aiInput);
        aiContent.appendChild(this.aiMessages);
        aiContent.appendChild(aiInputArea);
        this.aiContainer.appendChild(aiContent);
        document.body.appendChild(this.aiContainer);
    }

    toggleAI() {
        if (!this.aiContainer) return;
        
        const isVisible = this.aiContainer.style.display !== 'none';
        this.aiContainer.style.display = isVisible ? 'none' : 'block';
        
        if (!isVisible && this.aiInput) {
            this.aiInput.focus();
        }
    }

    getInterfaceLanguage() {
        return document.documentElement.lang || 'en';
    }

    async sendAIMessage(prompt, language, bypassContext = false) {
        if (!this.isTeacher && !this.isAiActiveForClass) {
            this.addAIMessage("🤖", "AI is not available at the moment.", false);
            return;
        }
        if (!language) language = this.getInterfaceLanguage();
        if (!this.functions) {
            this.addAIMessage("🤖", "Error: AI service not initialized", false);
            return;
        }
        this.addAIMessage(this.playerName || "You", prompt, true);

        try {
            const askAIFunction = this.functions.httpsCallable('askAI');
            const result = await askAIFunction({ 
                prompt, 
                roomCode: this.roomCode, 
                language,
                bypassContext // New parameter
            });
            const senderName = result.data.model ? `🤖 (${result.data.model})` : "🤖";
            this.addAIMessage(senderName, result.data.result, false);
            return result.data; // Return the full result object
        } catch (error) {
            console.error("🔥 Error calling askAI:", error);
            this.addAIMessage("🤖", `Error: ${error.message}`, false);
            return null;
        }
    }

    addAIMessage(sender, content, isUser) {
        if (!this.aiMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.style.cssText = `margin-bottom: 10px; padding: 8px 12px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); ${isUser ? 'background: #007bff; color: white; margin-left: 20px;' : 'background: white; color: #333; margin-right: 20px;'}`;
        
        const senderSpan = document.createElement('div');
        senderSpan.style.cssText = `font-weight: bold; font-size: 12px; margin-bottom: 4px; ${isUser ? 'color: rgba(255,255,255,0.8);' : 'color: #28a745;'}`;
        senderSpan.textContent = sender;
        
        const contentSpan = document.createElement('div');
        contentSpan.style.cssText = 'line-height: 1.4;';
        contentSpan.textContent = content;
        
        messageDiv.appendChild(senderSpan);
        messageDiv.appendChild(contentSpan);
        
        // Remove first message if it's "Ask the AI assistant..."
        if (this.aiMessages.children.length === 1 && 
            this.aiMessages.children[0].textContent.includes('Ask the AI assistant')) {
            this.aiMessages.innerHTML = '';
        }
        
        this.aiMessages.appendChild(messageDiv);
        this.aiMessages.scrollTop = this.aiMessages.scrollHeight;
    }

    // ========== UTILITY FUNCTIONS ==========
    makeDraggable(element, dragHandle = null) {
        const handle = dragHandle || element;
        handle.addEventListener('mousedown', (e) => {
            e.preventDefault();
            let startX = e.clientX - element.offsetLeft;
            let startY = e.clientY - element.offsetTop;
            if (element.style.right) {
                element.style.left = element.offsetLeft + 'px';
                element.style.right = ''; 
            }
            const handleMouseMove = (me) => {
                element.style.left = (me.clientX - startX) + 'px';
                element.style.top = (me.clientY - startY) + 'px';
            };
            const handleMouseUp = () => {
                document.removeEventListener('mousemove', handleMouseMove);
                document.removeEventListener('mouseup', handleMouseUp);
            };
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
        });
    }

    showGameNotification(message) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; left: 50%; transform: translateX(-50%);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; padding: 15px 25px; border-radius: 25px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2); z-index: 10000;
            font-weight: bold; font-size: 16px; animation: slideDown 0.3s ease;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideUp 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
        
        // Add CSS for animations
        if (!document.getElementById('notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                @keyframes slideDown { from { transform: translateX(-50%) translateY(-100%); opacity: 0; } to { transform: translateX(-50%) translateY(0); opacity: 1; } }
                @keyframes slideUp { from { transform: translateX(-50%) translateY(0); opacity: 1; } to { transform: translateX(-50%) translateY(-100%); opacity: 0; } }
            `;
            document.head.appendChild(style);
        }
    }

    // Send private message (teacher only)
    async sendPrivateMessage(content, recipientUid) {
        if (!content || !content.trim() || !this.roomCode || !recipientUid) return;

        try {
            const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                             .collection('messages');
            await messagesCollection.add({
                sender: this.playerName || "Teacher",
                sender_uid: this.isTeacher ? this.auth.currentUser?.uid : this.studentId,
                recipient_uid: recipientUid,
                content: content,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                is_teacher: this.isTeacher,
                is_private: true
            });
        } catch (error) {
            console.error('🔥 Error sending private message:', error);
            throw error;
        }
    }

    // Test AI service availability
    async testAIService() {
        if (!this.functions) {
            return { available: false, error: "Firebase Functions not initialized", code: "functions/not-initialized" };
        }

        // Ensure user is authenticated before calling cloud function
        let user = this.auth.currentUser;
        if (!user) {
            try {
                const userCredential = await this.auth.signInAnonymously();
                user = userCredential.user;
            } catch (authError) {
                return { available: false, error: "Authentication failed", code: "auth-failed" };
            }
        }

        if (!user || !user.uid) {
            return { available: false, error: "User not authenticated", code: "auth-missing" };
        }
        
        try {
            const askChatGPTFunction = this.functions.httpsCallable('askChatGPT');
            const result = await askChatGPTFunction({ prompt: "Hello" });

            return { available: true, result: result.data.result, code: "success" };
        } catch (error) {
            return { available: false, error: error.message, code: error.code || "unknown" };
        }
    }

    // Poll management functions
    async startPoll(pollConfig) {
        if (!this.isTeacher) return;
        
        console.log("📊 Starting poll", pollConfig);
        
        const newPoll = {
            id: Date.now() + '_' + Math.random().toString(36).substr(2, 9), // New unique ID
            type: pollConfig.type,
            question: pollConfig.question || '', // Add question field
            options: pollConfig.options,
            isActive: true,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            responses: {}
        };

        await this.db.collection('rooms').doc(this.roomCode).update({
            'settings.currentPoll': newPoll
        });
        
        console.log("✅ Poll started successfully");
    }

    async stopPoll() {
        if (!this.isTeacher) return;
        
        console.log("📊 Stopping poll");
        
        await this.db.collection('rooms').doc(this.roomCode).update({
            'settings.currentPoll.isActive': false
        });
        
        console.log("✅ Poll stopped successfully");
    }

    async submitPollAnswer(answer) {
        if (!this.functions) {
            console.error("Firebase Functions is not initialized.");
            return;
        }
        try {
            const submitAnswerFunction = this.functions.httpsCallable('submitPollAnswer');
            await submitAnswerFunction({
                roomCode: this.roomCode,
                studentId: this.studentId,
                playerName: this.playerName,
                answer: answer
            });
            console.log("✅ Poll answer successfully sent via Cloud Function.");
        } catch (error) {
            console.error("🔥 Error calling submitPollAnswer cloud function:", error);
        }
    }

    listenForPollUpdates(callback) {
        this.roomListener_Polls = this.db.collection('rooms').doc(this.roomCode)
            .onSnapshot(doc => {
                const pollData = doc.data()?.settings?.currentPoll;
                this.lastKnownPollData = pollData;
                console.log("📊 Poll update received", pollData);
                if (typeof callback === 'function') {
                    callback(pollData);
                }
            });
    }

    getCurrentPollData() {
        return this.lastKnownPollData;
    }

    getStudentId() {
        return this.studentId;
    }

    // Function to save question history
    async saveQuestionToHistory(pollData) {
        if (!this.isTeacher || !pollData) return;
        const historyRef = this.db.collection('rooms').doc(this.roomCode)
            .collection('questionHistory').doc(pollData.id);
        await historyRef.set({
            ...pollData,
            closedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // ========== POLL INTERFACE ==========
    createPollInterface() {
        if (this.isTeacher || document.getElementById('classroom-poll-btn')) return;

        // 1. Create the permanent floating button
        this.pollButton = document.createElement('button');
        this.pollButton.id = 'classroom-poll-btn';
        this.pollButton.innerHTML = '📊<div id="poll-badge" style="position:absolute; top:-2px; right:-2px; width:12px; height:12px; border-radius:50%; background:red; display:none; border: 2px solid white;"></div>';
        this.pollButton.style.cssText = 'position: fixed; bottom: 20px; right: 160px; width: 60px; height: 60px; border-radius: 50%; background: #607d8b; color: white; border: none; font-size: 24px; cursor: pointer; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10000; display: block;'; // Always visible

        this.pollButton.onclick = () => {
            if (this.pollContainer && this.pollContainer.dataset.active === 'true') {
                const isVisible = this.pollContainer.style.display !== 'none';
                this.pollContainer.style.display = isVisible ? 'none' : 'block';
            }
        };

        // *** ADD THIS LINE TO MAKE THE BUTTON DRAGGABLE ***
        this.makeDraggable(this.pollButton);

        document.body.appendChild(this.pollButton);

        // 2. Create the draggable container
        this.pollContainer = document.createElement('div');
        this.pollContainer.id = 'classroom-poll-container';
        this.pollContainer.dataset.active = 'false'; // Custom attribute to track state
        this.pollContainer.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 450px; min-height: 200px; background: white; border-radius: 15px; box-shadow: 0 8px 40px rgba(0,0,0,0.25); z-index: 10001; display: none; overflow: hidden;';

        const pollHeader = document.createElement('div');
        pollHeader.style.cssText = 'background: #ff9800; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        pollHeader.innerHTML = '<span>📊 Poll / Question</span><button id="poll-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 5px;">−</button>';

        this.makeDraggable(this.pollContainer, pollHeader);

        pollHeader.querySelector('#poll-minimize-btn').onclick = (e) => {
            e.stopPropagation();
            this.pollContainer.style.display = 'none';
        };

        const pollContentArea = document.createElement('div');
        pollContentArea.id = 'classroom-poll-content-area';
        pollContentArea.style.cssText = 'padding: 20px;';

        this.pollContainer.appendChild(pollHeader);
        this.pollContainer.appendChild(pollContentArea);
        document.body.appendChild(this.pollContainer);
    }
}


=================================================================
FILE: js\student-app.js
FULL PATH: public\js\student-app.js
=================================================================

/*
 * Copyright © 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */
// ================== START OF FILE: public/js/student-app.js (COMPLETE AND FIXED) ==================
const App = {
    classroom: null,
    currentPollId: null, // Variable to track the currently displayed poll

    getOrCreateStudentId: function() {
        let studentId = sessionStorage.getItem('studentId');
        if (!studentId) {
            studentId = 'student_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('studentId', studentId);
        }
        return studentId;
    },

    init: function() {
        this.loadRoomCodeFromURL();
        document.getElementById('login-form')?.addEventListener('submit', this.handleLogin.bind(this));
    },

    loadRoomCodeFromURL: function() {
        const params = new URLSearchParams(window.location.search);
        const roomCode = params.get('classroom');
        if (roomCode) {
            const input = document.getElementById('teacher-uid');
            if(input) input.value = roomCode;
        }
    },

    handleLogin: async function(event) {
        event.preventDefault();
        const playerName = document.getElementById('player-name').value.trim();
        const roomCode = document.getElementById('teacher-uid').value.trim();
        const loginButton = event.target.querySelector('button');
        if (!playerName || !/^\d{4}$/.test(roomCode)) {
            alert('Name and a 4-digit room code are required!');
            return;
        }

        loginButton.textContent = 'Joining...';
        loginButton.disabled = true;

        try {
            this.classroom = new ClassroomSDK();
            const studentId = this.getOrCreateStudentId();
            await this.classroom.init('student-app', studentId, playerName, roomCode);

            document.getElementById('login-container').style.display = 'none';
            document.getElementById('main-container').style.display = 'block';

            this.classroom.createChatInterface();
            this.classroom.createAIInterface();
            this.classroom.createPollInterface();
            this.classroom.listenForRoomUpdates(this.stateManager.bind(this));

            this.classroom.listenForMessages((messages) => {
                const chatContainer = document.getElementById('classroom-chat-container');
                const isChatHidden = !chatContainer || chatContainer.style.display === 'none';

                messages.forEach(msg => {
                    this.classroom.addChatMessage(msg.sender, msg.content, msg);

                    if (isChatHidden && msg.is_teacher) {
                        this.classroom.toggleChat();
                    }
                });
            });

        } catch (error) {
            console.error("❌ Failed to initialize student app:", error);
            alert(`Failed to join the room: ${error.message}\nPlease check the room code and try again.`);
            loginButton.textContent = 'Join Lesson';
            loginButton.disabled = false;
        }
    },

    // The new central State Manager function
    stateManager: function(roomData) {
        if (!roomData || !roomData.settings) return;

        const settings = roomData.settings;
        const pollData = settings.currentPoll;
        const command = settings.current_command;

        // --- AI State Management ---
        // ** THE MAIN FIX IS HERE **
        // We no longer hide the AI button. Instead, we update the SDK's internal state.
        // The SDK's sendAIMessage function will now handle the logic of checking if AI is active.
        this.classroom.isAiActiveForClass = settings.ai_active === true;

        // --- Poll State Management ---
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollBadge = document.getElementById('poll-badge');
        const pollIsActive = pollData && pollData.isActive;

        if (pollBadge && pollContainer) {
            pollContainer.dataset.active = pollIsActive ? 'true' : 'false';
            pollBadge.style.display = pollIsActive ? 'block' : 'none';
        }

        if (pollIsActive) {
            // If a new poll has arrived, render its content and OPEN the window
            if (this.currentPollId !== pollData.id) {
                this.currentPollId = pollData.id;
                this.renderPollInterface(pollData); // This function will also make the window visible
            }
        } else {
            // If the poll has been stopped by the teacher, force-close the window
            if (this.currentPollId !== null) {
                this.clearPollInterface(); // This function now closes the window
                this.currentPollId = null;
            }
        }

        // --- Content Command Management ---
        if (command && command.command === 'LOAD_CONTENT') {
            const iframe = document.getElementById('content-frame');
            const newUrl = command.payload.url || 'about:blank';
            if (iframe && iframe.src !== newUrl) {
                iframe.src = newUrl;
            }
        }
    },

    renderPollInterface: function(pollData) {
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollContentArea = document.getElementById('classroom-poll-content-area');
        if (!pollContainer || !pollContentArea) return;

        // Show the poll window and render content inside it
        pollContainer.style.display = 'block';

        // Build the poll UI based on its type
        if (pollData.type === 'open_text') {
            pollContentArea.innerHTML = `
                <p style="margin-top:0; margin-bottom:15px; font-weight:500;">The teacher is asking a question. Please type your answer below.</p>
                <textarea id="open-answer-input" placeholder="Write your answer here..." style="width: 100%; height: 80px; padding: 10px; border-radius: 6px; border: 1px solid #ccc; box-sizing: border-box;"></textarea>
                <button id="submit-open-answer" style="width: 100%; padding: 12px; margin-top: 10px; border: none; background: #007bff; color: white; border-radius: 6px; cursor: pointer;">Submit Answer</button>
            `;
            document.getElementById('submit-open-answer').onclick = (event) => {
                const answerInput = document.getElementById('open-answer-input');
                const answer = answerInput.value.trim();
                const submitBtn = event.currentTarget;

                if (answer) {
                    this.classroom.submitPollAnswer(answer);
                    answerInput.value = '';
                    submitBtn.textContent = '✅ Answer Sent!';
                    submitBtn.disabled = true;

                    setTimeout(() => {
                        submitBtn.textContent = 'Submit Answer';
                        submitBtn.disabled = false;
                    }, 2000);
                }
            };
        } else { 
            const labels = (pollData.type === 'yes_no') ? ['Yes', 'No'] : ['1', '2', '3', '4'];
            pollContentArea.innerHTML = `<p style="margin-top:0; margin-bottom:15px; font-weight:500;">The teacher is asking a quick question:</p>`;

            const buttonsWrapper = document.createElement('div');
            buttonsWrapper.style.cssText = 'display: flex; gap: 10px; flex-wrap: wrap;';

            for (let i = 1; i <= pollData.options; i++) {
                const button = document.createElement('button');
                button.textContent = labels[i-1];
                button.style.cssText = 'flex-grow: 1; padding: 12px; border: 1px solid #ccc; background: #f0f0f0; border-radius: 6px; cursor: pointer;';
                button.onclick = () => {
                    this.classroom.submitPollAnswer(i);
                    pollContentArea.innerHTML = '<p style="text-align:center; font-weight: bold; color: #28a745;">Thank you for your answer!</p>';
                };
                buttonsWrapper.appendChild(button);
            }
            pollContentArea.appendChild(buttonsWrapper);
        }
    },

    clearPollInterface: function() {
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollContentArea = document.getElementById('classroom-poll-content-area');

        if (pollContainer) {
            pollContainer.style.display = 'none'; // Hide the window
            pollContainer.dataset.active = 'false';
        }
        if (pollContentArea) {
            pollContentArea.innerHTML = ''; // Clear its content for the next poll
        }
    }
};

document.addEventListener('DOMContentLoaded', () => {
    App.init();
});
// ================== END OF FILE ==================


=================================================================
FILE: js\teacher-dashboard.js
FULL PATH: public\js\teacher-dashboard.js
=================================================================

/*
 * Copyright © 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */
// teacher-dashboard.js - English version with advanced AI selection menu

class TeacherDashboard {
    constructor() {
        console.log('🟢 TRACE: TeacherDashboard constructor called');
        this.sdk = null;
        this.students = [];
        this.activities = [];
        this.isAiActive = false; // Track AI status
        this.isAiActiveForStudents = false; // Add new variable for tracking
        this.currentAiModel = 'chatgpt';
        this.aiWarningShown = false; // Prevent repeated messages
        this.config = {}; // 🎯 Change here
        this.debugMode = false;
        this.currentQuestionResponses = {}; // Stores { studentName: [answers] }
        
        // 🔧 English locale fix - set locale
        this.locale = 'en-US';
        this.rtlSupport = false;
    }

    // Debugging utility with English support
    debugLog(message, data = null) {
        const debugEnabled = true;
        if (!debugEnabled) return;
        
        const debugConsoleContent = document.querySelector('.enhanced-debug-console .debug-content');
        if(debugConsoleContent) {
            const logEntry = document.createElement('div');
            logEntry.style.direction = 'ltr';
            logEntry.style.textAlign = 'left';
            logEntry.innerHTML = `<div>[${new Date().toLocaleTimeString(this.locale)}] ${message}</div>`;
            if (data) {
                const dataPre = document.createElement('pre');
                dataPre.style.cssText = 'margin-left: 20px; color: #ffaa00; direction: ltr; text-align: left;';
                dataPre.textContent = JSON.stringify(data, null, 2);
                logEntry.appendChild(dataPre);
            }
            debugConsoleContent.appendChild(logEntry);
            debugConsoleContent.scrollTop = debugConsoleContent.scrollHeight;
        }
        console.log(`[TEACHER DEBUG] ${message}`, data);
    }

    async init() {
        console.log('🟢 TRACE: TeacherDashboard.init called');
        const loadingOverlay = document.getElementById('loading-overlay');
        try {
            this.debugLog("🚀 Initializing teacher dashboard...");
            await this.loadConfigData();

            // צור SDK ותמתין שהוא יהיה מוכן לחלוטין
            this.sdk = new ClassroomSDK();
            console.log('🔍 SDK created:', !!this.sdk);
            console.log('🔍 SDK toggleAI method:', !!this.sdk.toggleAI);
            
            await this.handleSuccessfulLogin(this.sdk.auth.currentUser);
            
            // וודא שה-SDK מוכן לפני יצירת AI
            console.log('🔍 Final SDK check before AI init:');
            console.log('- SDK exists:', !!this.sdk);
            console.log('- toggleAI exists:', !!this.sdk.toggleAI);
            console.log('- DB exists:', !!this.sdk.db);
            console.log('- roomCode exists:', !!this.sdk.roomCode);

            // רק אז צור את ממשק ה-AI
            this.sdk.createAIInterface();
            this.initializeTeacherAI();
            
            // המשך כרגיל...
            this.sdk.listenForStudents(this.updateStudentsList.bind(this));
            this.sdk.listenForMessages((messages) => {
                if (messages && messages.length > 0) {
                    this.addMessage(messages);
                }
            });
            this.sdk.listenForRoomUpdates((roomData) => {
                if (!roomData || !roomData.settings) return;

                if (roomData.settings.currentPoll) {
                    this.displayPollResults(roomData.settings.currentPoll);
                }

                const aiIsActiveInDB = roomData.settings.ai_active === true;
                if (this.isAiActive !== aiIsActiveInDB) {
                    console.log(`🔄 Syncing teacher UI. AI status changed to: ${aiIsActiveInDB}`);
                    this.isAiActive = aiIsActiveInDB;
                    this.updateAIButton();
                }
            });

            this.updateConnectionStatus(true);
            this.setupEventListeners();
            this.updateRoomDisplay();
            
            // אחרי שהכל מוכן, בדוק שוב את ה-AI
            setTimeout(() => {
                if (this.checkSDKReady()) {
                    this.showTeacherAIButton();
                    this.checkAIStatus();
                    console.log('✅ Teacher AI button initialized and shown');
                } else {
                    console.error('❌ SDK not ready even after timeout');
                }
            }, 2000); // תן יותר זמן

            this.debugLog("✅ Teacher dashboard initialized successfully.");

        } catch (error) {
            console.error("🔥 Critical initialization error:", error);
            console.error("🔍 Error stack:", error.stack);
            this.updateConnectionStatus(false);
        } finally {
            if(loadingOverlay) loadingOverlay.classList.add('hidden');
        }
    }

    // 🆕 New function to activate AI for teacher
    async initializeTeacherAI() {
        this.debugLog("🤖 Initializing AI for teacher...");
        
        try {
            // 1. Check AI service availability
            const aiStatus = await this.testAIService();
            if (!aiStatus) {
                this.debugLog("⚠️ AI service not available, but continuing...");
            }
            
            // 2. Show AI button in any case (even if service is not available)
            this.showTeacherAIButton();
            
            // 3. Update AI status in interface
            await this.checkAIStatus();
            
            // 4. Add activity message
            this.addActivity("🤖 AI interface enabled for teacher");
            
            this.debugLog("✅ Teacher AI initialized successfully");
            
        } catch (error) {
            console.error("🔥 Error initializing teacher AI:", error);
            this.debugLog("❌ Teacher AI initialization failed", error);
            
            // Even in case of error - show the button
            this.showTeacherAIButton();
            this.addActivity("⚠️ AI available but with limitations");
        }
    }

    // 🆕 Function to show AI button for teacher
    showTeacherAIButton() {
        // 🔧 FIX: Ensure AI button is created and visible
        let aiBtn = document.getElementById('classroom-ai-btn');
        
        if (!aiBtn) {
            // Create the button if it doesn't exist
            console.log('🔧 Creating missing AI button for teacher');
            if (this.sdk && this.sdk.createAIInterface) {
                this.sdk.createAIInterface();
                aiBtn = document.getElementById('classroom-ai-btn');
            }
        }
        
        if (aiBtn) {
            aiBtn.style.display = 'block';
            aiBtn.style.opacity = '1';
            aiBtn.style.visibility = 'visible';
            
            // Add teacher indicator
            const teacherIndicator = document.createElement('div');
            teacherIndicator.className = 'teacher-ai-indicator';
            teacherIndicator.innerHTML = '🎓';
            teacherIndicator.style.cssText = `
                position: absolute; top: -5px; left: -5px;
                background: #28a745; color: white;
                border-radius: 50%; width: 20px; height: 20px;
                font-size: 12px; display: flex;
                align-items: center; justify-content: center;
                z-index: 10003;
            `;
            
            if (!aiBtn.querySelector('.teacher-ai-indicator')) {
                aiBtn.style.position = 'relative';
                aiBtn.appendChild(teacherIndicator);
            }
            
            this.debugLog("🤖 AI button displayed for teacher");
            console.log('✅ Teacher AI button is now visible and functional');
        } else {
            console.error('❌ Could not create or find AI button for teacher');
        }
    }

    // Check AI status and read current model
    async checkAIStatus() {
        console.log('🔍 checkAIStatus called');
        if (!this.sdk || !this.sdk.db) {
            console.log('❌ SDK or DB not ready');
            this.debugLog("❌ Cannot check AI status - SDK/DB not ready");
            return;
        }
        
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            const doc = await roomRef.get();
            
            console.log('🔍 Room document exists:', doc.exists);
            
            if (doc.exists) {
                const roomData = doc.data();
                console.log('🔍 Room data:', roomData);
                console.log('🔍 AI settings:', roomData.settings);
                
                this.isAiActive = roomData.settings?.ai_active === true;
                this.currentAiModel = roomData.settings?.ai_model || 'chatgpt';
                
                console.log('🔍 Set isAiActive to:', this.isAiActive);
                
                this.updateAIButton();
                this.updateAIModelDisplay();
                
                this.debugLog(`🤖 AI Status: ${this.isAiActive ? 'Active' : 'Disabled'}, Model: ${this.currentAiModel}`);
            } else {
                console.log('⚠️ Room document not found');
                this.debugLog("⚠️ Room document not found for AI status check");
            }
        } catch (error) {
            console.error("🔥 Error checking AI status:", error);
            this.debugLog("❌ AI status check failed", error);
        }
    }

    // Update AI button display
    updateAIButton() {
        const aiStatusIcon = document.getElementById('aiStatusIcon');
        const aiStatusText = document.getElementById('aiStatusText');
        const aiStatusDesc = document.querySelector('#toggleAI .dropdown-desc');

        if (this.isAiActive) {
            if (aiStatusIcon) aiStatusIcon.textContent = '🟢';
            if (aiStatusText) aiStatusText.textContent = 'AI Active for Students';
            if (aiStatusDesc) aiStatusDesc.textContent = 'Click to disable';
        } else {
            if (aiStatusIcon) aiStatusIcon.textContent = '🔴';
            if (aiStatusText) aiStatusText.textContent = 'AI Disabled for Students';
            if (aiStatusDesc) aiStatusDesc.textContent = 'Click to enable';
        }
    }

    // Update current model display
    updateAIModelDisplay() {
        // Update current model text
        const modelDisplays = document.querySelectorAll('.current-ai-model');
        modelDisplays.forEach(display => {
            display.textContent = this.getModelDisplayName(this.currentAiModel);
        });

        // Highlight active button
        document.querySelectorAll('.dropdown-item.ai-model-btn').forEach(btn => {
            if (btn.dataset.model === this.currentAiModel) {
                btn.style.backgroundColor = '#e8f5e9';
                btn.style.fontWeight = 'bold';
            } else {
                btn.style.backgroundColor = '';
                btn.style.fontWeight = 'normal';
            }
        });
    }

    // Get display name for model
    getModelDisplayName(model) {
        const modelNames = {
            'chatgpt': 'ChatGPT',
            'claude': 'Claude',
            'gemini': 'Gemini'
        };
        return modelNames[model] || model;
    }

    // Toggle AI mode (enable/disable)
    async toggleAIForClass() {
        console.log('--- Starting toggleAIForClass ---');
        if (!this.sdk || !this.sdk.db || !this.sdk.roomCode) {
            console.error('SDK not ready. Cannot update Firestore.');
            alert('SDK not ready. Please refresh.');
            return;
        }

        const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.roomCode);
        
        try {
            // קודם קוראים כדי לדעת מה המצב הנוכחי
            const doc = await roomRef.get();
            if (!doc.exists) {
                console.error('Document does not exist!');
                return;
            }

            const currentState = doc.data().settings.ai_active;
            const newState = !currentState;

            // מבצעים את העדכון במסד הנתונים
            await roomRef.update({
                'settings.ai_active': newState
            });

            console.log(`SUCCESS: Firestore updated. New state is: ${newState}`);

            // ======================================================
            // === החלק החסר: עדכון ממשק המשתמש לאחר ההצלחה ===
            // ======================================================

            // 1. עדכון המשתנה המקומי שמחזיק את הסטטוס
            this.isAiActive = newState;
            
            // 2. עדכון מראה הכפתור (צבע וטקסט)
            this.updateAIButton();
            
            // 3. הוספת שורה ליומן האירועים
            if (newState) {
                this.addActivity('🤖 AI enabled for class.');
            } else {
                this.addActivity('🔴 AI disabled for class.');
            }
            
        } catch (error) {
            console.error('FAILURE: Could not update Firestore.', error);
            alert('Failed to update the AI status. See console for error details.');
        }
    }

    checkSDKReady() {
        if (!this.sdk) {
            console.error('❌ SDK not initialized');
            return false;
        }
        
        if (!this.sdk.toggleAI) {
            console.error('❌ toggleAI method missing from SDK');
            console.log('🔍 Available methods:', Object.getOwnPropertyNames(this.sdk));
            return false;
        }
        
        if (!this.sdk.db) {
            console.error('❌ Firebase DB not ready');
            return false;
        }
        
        if (!this.sdk.roomCode) {
            console.error('❌ Room code not set');
            return false;
        }
        
        console.log('✅ SDK ready for AI operations');
        return true;
    }

    // Switch AI model (without turning off/on)
    async switchAIModel(model) {
        if (!this.sdk) return;
        
        this.debugLog(`🔄 Switching AI model to: ${model}`);
        
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.update({
                'settings.ai_model': model,
                'last_activity': firebase.firestore.FieldValue.serverTimestamp()
            });
            
            this.currentAiModel = model;
            this.updateAIButton();
            this.updateAIModelDisplay();
            
            const modelName = this.getModelDisplayName(model);
            this.addActivity(`🔄 AI model switched to: ${modelName}`);
            this.debugLog(`✅ AI model switched to: ${model}`);
            
            // Message to students
            if (this.isAiActive) {
                this.showModelSwitchMessage(modelName);
            }
            
        } catch (error) {
            console.error("🔥 Error switching AI model:", error);
            this.debugLog("❌ AI model switch failed", error);
            alert("Error switching AI model: " + error.message);
        }
    }

    // Model switch message
    showModelSwitchMessage(modelName) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 10000;
            background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
            color: white; padding: 15px 20px; border-radius: 8px;
            box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);
            font-weight: bold; max-width: 300px;
            animation: slideInRight 0.5s ease;
            direction: ltr; text-align: left;
        `;
        
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 24px;">🔄</span>
                <div>
                    <div>AI Model Switched!</div>
                    <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">
                        Now using: ${modelName}
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease';
            setTimeout(() => notification.remove(), 500);
        }, 3000);
    }

    // Test AI service - updated to work with askAI
    async testAIService() {
        // Comprehensive check of all required components
        if (!this.sdk) {
            this.debugLog("❌ SDK not available for AI test");
            return false;
        }
        
        if (!this.sdk.auth?.currentUser) {
            this.debugLog("❌ User not authenticated for AI test");
            return false;
        }
        
        if (!this.sdk.functions) {
            this.debugLog("❌ Firebase Functions not initialized");
            return false;
        }
            
        this.debugLog("🔍 Testing AI service availability...");
        
        try {
            // Check if SDK has testAIService method, if not use fallback
            if (this.sdk.testAIService) {
                const result = await this.sdk.testAIService();
                
                if (result.available) {
                    this.debugLog("✅ AI service available and working", result);
                    return true;
                } else {
                    this.debugLog("❌ AI service not available", result);
                    
                    // Show detailed message to teacher
                    let errorDetails = "AI service not available";
                    if (result.code === 'functions/failed-precondition') {
                        errorDetails = "AI service not configured (missing API key)";
                    } else if (result.code === 'functions/unauthenticated') {
                        errorDetails = "Authentication error in system";
                    } else if (result.code === 'functions/not-initialized') {
                        errorDetails = "Firebase Functions not initialized";
                    }
                    
                    // Show one-time alert
                    if (!this.aiWarningShown) {
                        this.aiWarningShown = true;
                        setTimeout(() => {
                            if (confirm(`⚠️ ${errorDetails}\n\nWould you like to try again?`)) {
                                this.testAIService();
                            }
                        }, 1000);
                    }
                    
                    return false;
                }
            } else {
                // Fallback if SDK doesn't have testAIService
                this.debugLog("⚠️ SDK testAIService method not found, assuming available");
                return true;
            }
        } catch (error) {
            this.debugLog("🔥 AI service test failed with error", error);
            console.error("AI test error:", error);
            // Don't fail completely, just log and continue
            return true;
        }
    }

    updateConnectionStatus(isConnected) {
        const statusDiv = document.getElementById('connectionStatus');
        if (!statusDiv) return;

        // Remove old classes and stop animation
        statusDiv.className = '';
        statusDiv.style.animation = 'none';

        if (isConnected) {
            statusDiv.classList.add('connected');
            statusDiv.setAttribute('title', 'Connected to Firebase');
        } else {
            statusDiv.classList.add('disconnected');
            statusDiv.setAttribute('title', 'Not Connected');
        }
        // Force restart animation for visual feedback
        void statusDiv.offsetWidth;
        statusDiv.style.animation = 'pulse 2s infinite';
    }

    addActivity(activityText) {
        const activitiesArea = document.getElementById('activitiesArea');
        if (!activitiesArea) return;

        const activityDiv = document.createElement('div');
        activityDiv.className = 'activity-item';
        activityDiv.style.direction = 'ltr';
        activityDiv.style.textAlign = 'left';
        activityDiv.innerHTML = `
            <span class="activity-time">${new Date().toLocaleTimeString(this.locale)}</span>
            <span class="activity-text">${activityText}</span>
        `;
        activitiesArea.appendChild(activityDiv);
        activitiesArea.scrollTop = activitiesArea.scrollHeight;
    }

    updateStudentsList(studentsData) {
        this.students = studentsData;
        const studentsListDiv = document.getElementById('studentsList');
        const studentsCountSpan = document.getElementById('studentsCount');
        if (!studentsListDiv || !studentsCountSpan) return;

        // Clear existing list
        studentsListDiv.innerHTML = '';
        studentsCountSpan.textContent = this.students.length;

        if (this.students.length === 0) {
            studentsListDiv.innerHTML = '<div class="no-students">No students connected currently</div>';
            return;
        }
        
        const template = document.getElementById('studentTemplate');
        
        // Process ALL students in the array
        this.students.forEach(student => {
            const studentName = student.name || 'Unknown Student';
            const studentElement = document.importNode(template.content, true);
            
            const nameSpan = studentElement.querySelector('.student-name');
            if(nameSpan) nameSpan.textContent = studentName;

            const actionsDiv = studentElement.querySelector('.student-actions');
            if (actionsDiv) {
                const privateMsgBtn = document.createElement('button');
                privateMsgBtn.textContent = 'Private Message';
                privateMsgBtn.className = 'private-message-btn';
                privateMsgBtn.onclick = () => this.openPrivateMessageModal(student);
                actionsDiv.appendChild(privateMsgBtn);
            }
            
            studentsListDiv.appendChild(studentElement);
        });
        
        this.addActivity(`Student list updated. ${this.students.length} students connected.`);
        console.log(`✅ Updated student list: ${this.students.length} students displayed`);
    }

    // 🔧 Fix #1: undefined messages - complete and fixed function
    addMessage(messages) {
        // If it's an array of messages - iterate through each one
        if (Array.isArray(messages)) {
            messages.forEach(message => this.addSingleMessage(message));
            return;
        }
        
        // If it's a single message
        this.addSingleMessage(messages);
    }

    addSingleMessage(message) {
        const messagesArea = document.getElementById('messagesArea');
        const messagesCountSpan = document.getElementById('messagesCount');
        if (!messagesArea) return;

        // 🔧 FIX: Prevent duplicate messages by checking if already exists
        const messageId = message.timestamp?.seconds + '_' + message.sender_uid + '_' + message.content.substring(0, 20);
        const existingMessage = messagesArea.querySelector(`[data-message-id="${messageId}"]`);
        if (existingMessage) {
            console.log('⚠️ Duplicate message prevented:', message.content.substring(0, 30));
            return;
        }

        // Validation and message creation code...
        const sender = message?.sender || 'Unknown User';
        const content = message?.content || 'Empty Message';
        const timestamp = message?.timestamp;
        const isTeacher = message?.is_teacher === true;
        const isPrivate = message?.is_private === true;

        // Remove "no messages" placeholder
        const noMessages = messagesArea.querySelector('.no-messages');
        if (noMessages) {
            noMessages.remove();
        }

        // Update message count
        if (messagesCountSpan) {
            const currentCount = parseInt(messagesCountSpan.textContent) || 0;
            messagesCountSpan.textContent = currentCount + 1;
        }

        // Create message element
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-item';
        messageDiv.setAttribute('data-message-id', messageId); // 🔧 FIX: Add unique identifier
        messageDiv.style.direction = 'ltr';
        messageDiv.style.textAlign = 'left';
        
        // Icon and time formatting...
        let senderIcon = '';
        if (isTeacher) {
            senderIcon = '🎓 ';
        } else if (isPrivate) {
            senderIcon = '🔒 ';
        }

        let timeString = 'Unknown Time';
        if (timestamp) {
            try {
                const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
                timeString = date.toLocaleTimeString(this.locale);
            } catch (e) {
                console.warn('Cannot parse timestamp:', timestamp);
                timeString = new Date().toLocaleTimeString(this.locale);
            }
        }

        messageDiv.innerHTML = `
            <div class="message-header">
                <span class="message-sender">${senderIcon}${sender}</span>
                <span class="message-time">${timeString}</span>
            </div>
            <div class="message-content">${content}</div>
            ${isPrivate ? '<div class="message-private-indicator">Private Message</div>' : ''}
        `;

        if (isPrivate) {
            messageDiv.style.borderLeft = '4px solid #ffc107';
            messageDiv.style.background = '#fff9c4';
        }

        messagesArea.appendChild(messageDiv);
        messagesArea.scrollTop = messagesArea.scrollHeight;

        console.log(`✅ Message added: ${content.substring(0, 30)}...`);
    }

    sendCommand(command, payload = {}) {
        if (!this.sdk) return;
        this.sdk.sendCommand(command, payload);
        this.addActivity(`📤 Command sent: ${command}`);
    }

    sendMessageToClass(content) {
        if (!content || !content.trim()) return;
        
        if (this.sdk) {
            this.sdk.sendMessage(content);
            this.addActivity(`💬 Message sent to class: ${content}`);
        }
    }

    // 🆕 AI activation encouragement message with English support
    showAIActivationMessage() {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 10000;
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white; padding: 15px 20px; border-radius: 8px;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
            font-weight: bold; max-width: 300px;
            animation: slideInRight 0.5s ease;
            direction: ltr; text-align: left;
        `;
        
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 24px;">🤖</span>
                <div>
                    <div>AI Enabled Successfully!</div>
                    <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">
                        Students can now ask questions
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // Remove after 4 seconds
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease';
            setTimeout(() => notification.remove(), 500);
        }, 4000);
        
        // Add CSS for animations if not exists
        if (!document.getElementById('ai-notification-styles')) {
            const style = document.createElement('style');
            style.id = 'ai-notification-styles';
            style.textContent = `
                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOutRight {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(style);
        }
    }

    setupEventListeners() {
        // Modal handling
        const openModal = (modalId) => document.getElementById(modalId)?.classList.add('visible');
        const closeModal = (modal) => modal.closest('.modal-overlay')?.classList.remove('visible');

        // 🎯 Fix: Single block handling model buttons
        document.querySelectorAll('.dropdown-item.ai-model-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                const model = btn.dataset.model;
                if (model) {
                    this.switchAIModel(model);
                }
            });
        });

        // Modal close buttons
        document.querySelectorAll('.modal-close').forEach(btn => {
            btn.addEventListener('click', (e) => {
                closeModal(e.target);
            });
        });

        // Private message form submit
        const privateMessageForm = document.getElementById('privateMessageForm');
        if (privateMessageForm) {
            privateMessageForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.sendPrivateMessage();
            });
        }

        // 🎯 Add the following code block within the function
        const customUrlForm = document.getElementById('customUrlForm');
        if (customUrlForm) {
            customUrlForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const urlInput = document.getElementById('customUrlInput');
                const url = urlInput.value.trim();
                if (url) {
                    this.sendSelectedGame(url); // Reuse function for sending and closing
                    urlInput.value = '';
                }
            });
        }

        // 🎯 Add poll handling
        document.querySelectorAll('.poll-type-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const pollType = btn.dataset.type;
                this.startPoll(pollType);
            });
        });

        const stopPollBtn = document.getElementById('stop-poll-btn');
        if(stopPollBtn) {
            stopPollBtn.addEventListener('click', () => this.stopPoll());
        }

        // 🎯 Handle general chat form
        const chatForm = document.getElementById('chat-form');
        if (chatForm) {
            chatForm.addEventListener('submit', (e) => {
                e.preventDefault(); // Prevents page refresh - the critical fix!
                const input = document.getElementById('chat-input');
                const message = input.value.trim();
                if (message) {
                    this.sdk.sendMessage(message);
                    input.value = '';
                }
            });
        }

        document.getElementById('ai-summarize-btn')?.addEventListener('click', () => this.handleAiAnalysis('summarize'));
        document.getElementById('ai-keywords-btn')?.addEventListener('click', () => this.handleAiAnalysis('keywords'));

        // Handle closing the open question modal and stopping the poll
        document.getElementById('close-open-question-btn')?.addEventListener('click', () => this.closeOpenEndedQuestion());
        document.querySelector('#open-question-modal .modal-close')?.addEventListener('click', () => this.closeOpenEndedQuestion());

        // הוספת האזנה לכפתור איפוס מסכים
        document.getElementById('resetScreensBtn')?.addEventListener('click', () => {
            if (confirm('Are you sure you want to reset all student screens? This will stop any active poll or content.')) {
                this.resetStudentScreens();
            }
        });

        document.getElementById('reset-screens-action')?.addEventListener('click', (e) => {
            e.preventDefault();
            if (confirm('Are you sure you want to reset all student screens?')) {
                this.resetStudentScreens();
            }
        });

        // Logout button
        document.getElementById('logout-action-btn')?.addEventListener('click', (e) => {
            e.preventDefault();
            this.logout();
        });

        // === הוספת קריאה ל-initContentManager ב-setupEventListeners ===
        this.initContentManager();
    }

    openPrivateMessageModal(student) {
        const modal = document.getElementById('privateMessageModal');
        if (modal) {
            document.getElementById('privateMessageRecipient').textContent = student.name;
            modal.dataset.studentUid = student.uid;
            modal.classList.add('visible');
        }
    }

    async sendPrivateMessage() {
        const modal = document.getElementById('privateMessageModal');
        const content = document.getElementById('privateMessageText').value.trim();
        const studentUid = modal.dataset.studentUid;
        
        if (!content || !studentUid) return;
        
        try {
            await this.sdk.sendPrivateMessage(content, studentUid);
            this.addActivity(`✉️ Private message sent to ${document.getElementById('privateMessageRecipient').textContent}`);
            document.getElementById('privateMessageText').value = '';
            modal.classList.remove('visible');
        } catch (error) {
            console.error("🔥 Error sending private message:", error);
            alert("Error sending private message");
        }
    }

    async resetClassroomData() {
        if (!this.sdk || !confirm('Are you sure you want to reset the classroom? This action will delete all data.')) {
            return;
        }
        
        try {
            // Delete room from cloud
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.delete();
            
            // Create new room
            await this.sdk.initializeRoom();
            
            this.addActivity('🔄 Classroom reset successfully');
            alert('Classroom reset successfully!');
        } catch (error) {
            console.error("🔥 Error resetting classroom:", error);
            alert("Error resetting classroom");
        }
    }

    updateRoomDisplay() {
        const roomCode = this.sdk ? this.sdk.getRoomCode() : null;
        if (!roomCode) return;

        // Update text display in header
        const roomCodeSpan = document.getElementById('header-room-code');
        if (roomCodeSpan) {
            roomCodeSpan.textContent = roomCode;
        }

        // Create and display QR code
        const qrImage = document.getElementById('qr-code-image');
        if (qrImage) {
            const studentUrl = `${window.location.origin}/${this.config.studentAppUrl}?classroom=${roomCode}`;
            const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(studentUrl)}`;
            
            qrImage.src = qrApiUrl;

            // Add copy functionality on click
            qrImage.onclick = () => {
                navigator.clipboard.writeText(studentUrl).then(() => {
                    this.addActivity(`✅ Student link copied`);
                    // Can add small visual notification here if desired
                }).catch(err => {
                    console.error('Failed to copy URL: ', err);
                });
            };
        }
    }

    async loadConfigData() {
        try {
            const response = await fetch('config.json');
            if (!response.ok) throw new Error('Network response was not ok');
            this.config = await response.json();
            this.debugLog('✅ Config file loaded successfully', this.config);
        } catch (error) {
            console.error('🔥 Error loading config file:', error);
            this.config = { studentAppUrl: 'student-app.html', games: [] }; // Fallback
        }
    }

    openContentModal() {
        document.getElementById('customContentModal')?.classList.add('visible');
        this.populateGamesList();
    }

    // === החלפת populateGamesList בפונקציה חדשה ===
    populateGamesList() {
        const container = document.getElementById('game-list-container');
        if (!container) return;

        const content = this.personalContent || [];
        container.innerHTML = '';

        if (content.length === 0) {
            container.innerHTML = '<p style="padding: 15px; text-align: center;">You haven\'t added any personal content yet. Go to Tools > Manage Content & AI to add some.</p>';
            return;
        }

        content.forEach(item => {
            const element = document.createElement('a');
            element.href = '#';
            element.className = 'dropdown-item';
            element.onclick = (e) => {
                e.preventDefault();
                this.sendSelectedGame(item.url);
            };
            element.innerHTML = `<span class="dropdown-icon">${item.icon || '🔗'}</span><div class="dropdown-content"><div class="dropdown-title">${item.title}</div><div class="dropdown-desc">${item.description}</div></div>`;
            container.appendChild(element);
        });
    }

    sendSelectedGame(url) {
        if (!url) return;
        this.sendCommand('LOAD_CONTENT', { url });

        // Close window after sending
        const modal = document.getElementById('customContentModal');
        if (modal) {
            modal.querySelector('.modal-close').click();
        }
    }

    // 🎯 Functions for poll management
    openPollCreationModal() {
        this.debugLog("📊 Opening poll creation window");
        document.getElementById('poll-creation-modal')?.classList.add('visible');
    }

    // החלף את כל הפונקציה startPoll בזו:
    async startPoll(pollType) {
        this.debugLog(`📊 Starting a new poll of type: ${pollType}`);

        try {
            // שלב 1: בדיקה וארכוב של הסקר הפעיל הקודם (אם קיים)
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.roomCode);
            const roomDoc = await roomRef.get();
            const existingPoll = roomDoc.data()?.settings?.currentPoll;

            if (existingPoll && existingPoll.isActive) {
                this.debugLog('Archiving previous active poll...', existingPoll.id);
                await this.sdk.saveQuestionToHistory(existingPoll);
                this.addActivity(`📝 Previous poll (${existingPoll.id.substring(0,5)}) archived.`);
            }

            // שלב 2: יצירת אובייקט הסקר החדש עם מאגר תשובות ריק
            const pollOptions = {
                'yes_no': 2,
                'multiple_choice': 4,
                'open_text': 0
            };

            const newPoll = {
                id: "poll_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9),
                type: pollType,
                question: '', // ניתן להרחבה בעתיד
                options: pollOptions[pollType],
                isActive: true,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                responses: {} // התחלה עם מאגר נקי
            };

            // שלב 3: עדכון ה-Firestore עם הסקר החדש
            await roomRef.update({
                'settings.currentPoll': newPoll
            });

            // שלב 4: עדכון ממשק המשתמש בהתאם לסוג הסקר החדש
            if (pollType === 'open_text') {
                this.currentQuestionResponses = {}; // איפוס הקאש המקומי
                document.getElementById('open-question-modal')?.classList.add('visible');
            } else {
                document.getElementById('poll-section').style.display = 'block';
            }

            this.addActivity(`📊 Started new poll of type: ${pollType}`);
            document.getElementById('poll-creation-modal')?.classList.remove('visible');
            this.debugLog(`✅ New poll ${newPoll.id} started successfully.`);

        } catch (error) {
            console.error("🔥 Failed to start a new poll:", error);
            this.debugLog("❌ Error during startPoll", error);
            this.addActivity("❌ Error starting new poll.");
        }
    }

    stopPoll() {
        this.debugLog("📊 Stopping poll");
        this.sdk.stopPoll();
        document.getElementById('poll-section').style.display = 'none';
        this.addActivity(`⏹️ Poll ended`);
    }

    displayPollResults(pollData) {
        // Handle Open Text Polls
        if (pollData && pollData.type === 'open_text' && pollData.isActive) {
            const container = document.getElementById('open-question-results');
            if (!container) return;
            container.innerHTML = ''; // Clear previous results to re-render

            const responses = pollData.responses || {};
            this.currentQuestionResponses = responses; // Update local memory

            // Correctly iterate over the responses object
            for (const studentName in responses) {
                if (Object.hasOwnProperty.call(responses, studentName)) {
                    const answers = responses[studentName];
                    if (Array.isArray(answers) && answers.length > 0) {
                        const lastAnswer = answers[answers.length - 1];
                        const answerDiv = document.createElement('div');
                        answerDiv.innerHTML = `<strong>${studentName} (${answers.length} versions):</strong><p style="margin: 5px 0 0 0; color: #333;">${lastAnswer}</p>`;
                        answerDiv.style.borderBottom = '1px solid #eee';
                        answerDiv.style.padding = '10px 0';
                        container.appendChild(answerDiv);
                    }
                }
            }
        } 
        // Handle Multiple Choice and Yes/No Polls
        else if (pollData && (pollData.type === 'multiple_choice' || pollData.type === 'yes_no')) {
            const container = document.getElementById('poll-results-container');
            const section = document.getElementById('poll-section');
            if (!container || !section) return;

            section.style.display = 'block';
            container.innerHTML = '';

            const responses = pollData.responses || {};
            const totalVotes = Object.keys(responses).length;
            const voteCounts = {};

            // Count votes for each option
            for (let i = 1; i <= pollData.options; i++) {
                voteCounts[i] = 0;
            }
            Object.values(responses).forEach(vote => {
                if (voteCounts[vote] !== undefined) {
                    voteCounts[vote]++;
                }
            });

            // Display results
            for (let i = 1; i <= pollData.options; i++) {
                const votes = voteCounts[i];
                const percentage = totalVotes > 0 ? ((votes / totalVotes) * 100).toFixed(1) : 0;
                const label = pollData.type === 'yes_no' ? (i === 1 ? 'Yes' : 'No') : `Option ${i}`;

                const barHtml = `
                    <div style="margin-bottom: 12px;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                            <strong>${label}</strong>
                            <span>${votes} votes (${percentage}%)</span>
                        </div>
                        <div style="background: #e0e0e0; border-radius: 4px; overflow: hidden;">
                            <div style="width: ${percentage}%; background: #42a5f5; height: 20px; transition: width 0.3s ease;"></div>
                        </div>
                    </div>
                `;
                container.innerHTML += barHtml;
            }
        }
    }

    async handleAiAnalysis(type) {
        // 1. Open the teacher's AI window immediately
        if (this.sdk && this.sdk.aiContainer.style.display === 'none') {
            this.sdk.toggleAI();
        }

        // 2. Collect current responses from local memory
        if (Object.keys(this.currentQuestionResponses).length === 0) {
            this.sdk.addAIMessage("🤖", "No responses to analyze currently.", false);
            return;
        }

        const allAnswers = JSON.stringify(this.currentQuestionResponses, null, 2);
        const lang = this.sdk.getInterfaceLanguage();
        let prompt;

        // 3. Create language-aware prompt
        if (type === 'summarize') {
            prompt = (lang === 'he')
                ? `לפניך תשובות של תלמידים לשאלה. כל שם תלמיד ממופה למערך של התשובות שלו (מהראשונה לאחרונה). סכם את רמת ההבנה הכיתתית, זהה תלמידים שתשובותיהם מצביעות על קושי, וציין תלמידים שהראו שיפור משמעותי בין הגרסאות:\n\n${allAnswers}`
                : `Here are student responses to a question. Each student name maps to an array of their answers (from first to last). Summarize the class's understanding, identify students whose answers indicate difficulty, and point out students who showed significant improvement across versions:\n\n${allAnswers}`;
        } else { // keywords
            prompt = (lang === 'he')
                ? `זהה את 10 מילות המפתח הנפוצות והמשמעותיות ביותר מהתשובות הבאות:\n\n${allAnswers}`
                : `Extract the 10 most frequent and significant keywords from the following text:\n\n${allAnswers}`;
        }

        // 4. Send prompt to AI
        this.sdk.sendAIMessage(prompt, lang);
        this.addActivity(`📈 Sent "situation analysis" to AI.`);

        // 5. Reset responses in Firestore for a new round
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.update({ 'settings.currentPoll.responses': {} });
            this.addActivity(`🔄 Response repository in Firestore reset and ready for next round.`);
        } catch (error) {
            console.error("Error resetting poll responses:", error);
        }
    }

    async generateLessonSummary() {
        this.addActivity('📊 Preparing comprehensive summary report...');
        if (this.sdk && this.sdk.aiContainer) {
            if (this.sdk.aiContainer.style.display === 'none') {
                this.sdk.toggleAI();
            }
        }
        try {
            const historySnapshot = await this.sdk.db.collection('rooms')
                .doc(this.sdk.getRoomCode())
                .collection('questionHistory')
                .orderBy('createdAt')
                .get();
            let fullLessonData = [];
            historySnapshot.forEach(doc => {
                fullLessonData.push(doc.data());
            });
            const summaryPrompt = this.buildLessonSummaryPrompt(fullLessonData);
            const language = this.sdk.getInterfaceLanguage();
            await this.sdk.sendAIMessage(summaryPrompt, language);
            this.addActivity('✅ Summary report sent to AI');
            document.getElementById('end-lesson-modal')?.classList.remove('visible');
        } catch (error) {
            console.error('🔥 Error creating summary report:', error);
            this.addActivity('❌ Error creating summary report');
        }
    }

    buildLessonSummaryPrompt(lessonData) {
        const language = this.sdk.getInterfaceLanguage();
        if (language === 'he') {
            let prompt = `דוח סיכום מקיף לשיעור\n\n`;
            prompt += `מספר שאלות שנשאלו: ${lessonData.length}\n\n`;
            lessonData.forEach((question, index) => {
                prompt += `שאלה ${index + 1}: ${question.question || 'שאלה ללא כותרת'}\n`;
                prompt += `תשובות התלמידים:\n`;
                Object.entries(question.responses || {}).forEach(([student, answers]) => {
                    if (Array.isArray(answers)) {
                        prompt += `  ${student}: ${answers.join(' → ')}\n`;
                    } else {
                        prompt += `  ${student}: ${answers}\n`;
                    }
                });
                prompt += `\n`;
            });
            prompt += `אנא סכם:\n`;
            prompt += `1. התקדמות כללית של הכיתה\n`;
            prompt += `2. תלמידים שהראו שיפור משמעותי\n`;
            prompt += `3. תלמידים שנזקקים לתשומת לב נוספת\n`;
            prompt += `4. נושאים שנותרו לא ברורים\n`;
            prompt += `5. המלצות לשיעור הבא\n`;
            return prompt;
        } else {
            let prompt = `Comprehensive Lesson Summary Report\n\n`;
            prompt += `Number of questions asked: ${lessonData.length}\n\n`;
            lessonData.forEach((question, index) => {
                prompt += `Question ${index + 1}: ${question.question || 'Untitled question'}\n`;
                prompt += `Student responses:\n`;
                Object.entries(question.responses || {}).forEach(([student, answers]) => {
                    if (Array.isArray(answers)) {
                        prompt += `  ${student}: ${answers.join(' → ')}\n`;
                    } else {
                        prompt += `  ${student}: ${answers}\n`;
                    }
                });
                prompt += `\n`;
            });
            prompt += `Please summarize:\n`;
            prompt += `1. Overall class progress\n`;
            prompt += `2. Students who showed significant improvement\n`;
            prompt += `3. Students who need additional attention\n`;
            prompt += `4. Topics that remain unclear\n`;
            prompt += `5. Recommendations for next lesson\n`;
            return prompt;
        }
    }

    async closeOpenEndedQuestion() {
        if (!this.sdk) return;
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            const roomDoc = await roomRef.get();
            const currentPoll = roomDoc.data()?.settings?.currentPoll;
            if (currentPoll && currentPoll.isActive) {
                await this.sdk.saveQuestionToHistory(currentPoll);
                await roomRef.update({ 'settings.currentPoll.isActive': false });
                this.addActivity('📝 Open question closed - student modal closed');
            }
            document.getElementById('open-question-modal')?.classList.remove('visible');
        } catch (error) {
            console.error('🔥 Error closing open question:', error);
            this.addActivity('❌ Error closing question');
        }
    }

    // הוספת מתודה למחלקה TeacherDashboard
    async resetStudentScreens() {
        if (!this.sdk) return;
        console.log("🔄 Resetting all student screens...");
        try {
            // שלח פקודה לנקות את ה-iframe
            await this.sdk.sendCommand('LOAD_CONTENT', { url: 'about:blank' });
            // עצור כל סקר פעיל
            await this.sdk.stopPoll();
            this.addActivity('⏹️ All student screens have been cleared.');
        } catch (error) {
            console.error("Error resetting student screens:", error);
        }
    }

// =======================================================
// ========= CONTENT & PROMPT MANAGEMENT LOGIC ===========
// =======================================================

async loadPersonalData() {
    if (!this.sdk || !this.sdk.auth.currentUser) return;
    const teacherUid = this.sdk.auth.currentUser.uid;

    // Load personal content
    try {
        const contentRef = this.sdk.db.collection('teachers').doc(teacherUid).collection('personal_links');
        const contentSnapshot = await contentRef.get();
        this.personalContent = contentSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
        console.error("Error loading personal content:", error);
        this.personalContent = [];
    }

    // Load personal prompts
    try {
        const promptsRef = this.sdk.db.collection('teachers').doc(teacherUid).collection('personal_prompts');
        const promptsSnapshot = await promptsRef.get();
        this.personalPrompts = promptsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
        console.error("Error loading personal prompts:", error);
        this.personalPrompts = [];
    }

    this.debugLog('✅ Personal content and prompts loaded', {
        content: this.personalContent,
        prompts: this.personalPrompts
    });
}

initContentManager() {
    // Tab switching logic
    const modal = document.getElementById('content-manager-modal');
    modal.querySelectorAll('.tab-link').forEach(button => {
        button.addEventListener('click', () => {
            modal.querySelectorAll('.tab-link, .tab-content').forEach(el => el.classList.remove('active'));
            button.classList.add('active');
            document.getElementById(button.dataset.tab).classList.add('active');
        });
    });

    // Open modal button
    document.getElementById('open-content-manager-btn').addEventListener('click', () => {
        this.renderPersonalContentList();
        this.renderPersonalPromptsList();
        this.populateActivePromptSelector();
        modal.classList.add('visible');
    });

    // Close modal button
    modal.querySelector('.modal-close').addEventListener('click', () => modal.classList.remove('visible'));

    // === Content Management ===
    document.getElementById('personal-content-form').addEventListener('submit', this.handleSavePersonalContent.bind(this));
    document.getElementById('cancel-content-edit').addEventListener('click', this.resetContentForm.bind(this));

    // === Prompt Management ===
    document.getElementById('personal-prompt-form').addEventListener('submit', this.handleSavePersonalPrompt.bind(this));
    document.getElementById('cancel-prompt-edit').addEventListener('click', this.resetPromptForm.bind(this));
    document.getElementById('generate-prompt-suggestion-btn').addEventListener('click', this.generatePromptSuggestion.bind(this));
    document.getElementById('active-prompt-selector').addEventListener('change', this.setActivePrompt.bind(this));
}

// --- RENDER FUNCTIONS ---
renderPersonalContentList() {
    const list = document.getElementById('personal-content-list');
    list.innerHTML = '';
    (this.personalContent || []).forEach(item => {
        const el = document.createElement('div');
        el.className = 'list-item';
        el.innerHTML = `
            <span class="list-item-icon">${item.icon}</span>
            <div class="list-item-details">
                <div class="list-item-title">${item.title}</div>
                <div class="list-item-desc">${item.description}</div>
            </div>
            <div class="list-item-actions">
                <button class="edit-btn" data-id="${item.id}">✏️</button>
                <button class="delete-btn" data-id="${item.id}">🗑️</button>
            </div>
        `;
        el.querySelector('.edit-btn').addEventListener('click', () => this.editContentItem(item.id));
        el.querySelector('.delete-btn').addEventListener('click', () => this.deleteContentItem(item.id));
        list.appendChild(el);
    });
}

renderPersonalPromptsList() {
    const list = document.getElementById('personal-prompts-list');
    list.innerHTML = '';
    (this.personalPrompts || []).forEach(prompt => {
        const el = document.createElement('div');
        el.className = 'list-item';
        el.innerHTML = `
            <span class="list-item-icon">🎯</span>
            <div class="list-item-details">
                <div class="list-item-title">${prompt.title}</div>
                <div class="list-item-desc">${prompt.prompt}</div>
            </div>
            <div class="list-item-actions">
                <button class="edit-btn" data-id="${prompt.id}">✏️</button>
                <button class="delete-btn" data-id="${prompt.id}">🗑️</button>
            </div>
        `;
        el.querySelector('.edit-btn').addEventListener('click', () => this.editPromptItem(prompt.id));
        el.querySelector('.delete-btn').addEventListener('click', () => this.deletePromptItem(prompt.id));
        list.appendChild(el);
    });
}

populateActivePromptSelector() {
    const selector = document.getElementById('active-prompt-selector');
    selector.innerHTML = '<option value="general">General (Open Context)</option>';
    (this.personalPrompts || []).forEach(prompt => {
        const option = document.createElement('option');
        option.value = prompt.id;
        option.textContent = prompt.title;
        selector.appendChild(option);
    });
    // You might want to get the active prompt from room settings and set it here
}

// --- CRUD & LOGIC FUNCTIONS ---
async handleSavePersonalContent(e) {
    e.preventDefault();
    const teacherUid = this.sdk.auth.currentUser.uid;
    const form = e.target;
    const contentId = form.querySelector('#content-id').value;
    const data = {
        title: form.querySelector('#content-title').value,
        description: form.querySelector('#content-desc').value,
        icon: form.querySelector('#content-icon').value,
        url: form.querySelector('#content-url').value,
    };

    const collectionRef = this.sdk.db.collection('teachers').doc(teacherUid).collection('personal_links');
    if (contentId) { // Update
        await collectionRef.doc(contentId).update(data);
    } else { // Create
        await collectionRef.add(data);
    }
    await this.loadPersonalData();
    this.renderPersonalContentList();
    this.resetContentForm();
}

editContentItem(id) {
    const item = this.personalContent.find(c => c.id === id);
    const form = document.getElementById('personal-content-form');
    form.querySelector('#content-id').value = item.id;
    form.querySelector('#content-title').value = item.title;
    form.querySelector('#content-desc').value = item.description;
    form.querySelector('#content-icon').value = item.icon;
    form.querySelector('#content-url').value = item.url;
    document.getElementById('cancel-content-edit').style.display = 'inline-block';
}

resetContentForm() {
    document.getElementById('personal-content-form').reset();
    document.getElementById('content-id').value = '';
    document.getElementById('cancel-content-edit').style.display = 'none';
}

async deleteContentItem(id) {
    if (!confirm('Are you sure you want to delete this content?')) return;
    const teacherUid = this.sdk.auth.currentUser.uid;
    await this.sdk.db.collection('teachers').doc(teacherUid).collection('personal_links').doc(id).delete();
    await this.loadPersonalData();
    this.renderPersonalContentList();
}

async generatePromptSuggestion() {
    const goal = document.getElementById('prompt-goal-input').value;
    if (!goal) {
        alert('Please describe your lesson goal first.');
        return;
    }
    const metaPrompt = `You are an expert in pedagogical prompt engineering. A teacher described their lesson goal as: "${goal}". Based on this, write an effective system prompt in English. The prompt should instruct an AI to act as a helpful teaching assistant, answer only questions directly related to the specified topic, and politely decline off-topic questions by reminding the student to focus on the lesson.`;

    this.addActivity('🤖 Asking AI for a prompt suggestion...');
    const result = await this.sdk.sendAIMessage(metaPrompt, 'en', true); // true to bypass context
    if (result && result.text) {
        document.getElementById('prompt-content').value = result.text;
        document.getElementById('prompt-editing-area').style.display = 'block';
    } else {
        alert('The AI could not generate a suggestion. Please try again.');
    }
}

async handleSavePersonalPrompt(e) {
    e.preventDefault();
    const teacherUid = this.sdk.auth.currentUser.uid;
    const form = e.target;
    const promptId = form.querySelector('#prompt-id').value;
    const data = {
        title: form.querySelector('#prompt-title').value,
        prompt: form.querySelector('#prompt-content').value,
    };

    const collectionRef = this.sdk.db.collection('teachers').doc(teacherUid).collection('personal_prompts');
    if (promptId) { // Update
        await collectionRef.doc(promptId).update(data);
    } else { // Create
        await collectionRef.add(data);
    }
    await this.loadPersonalData();
    this.renderPersonalPromptsList();
    this.populateActivePromptSelector();
    this.resetPromptForm();
}

editPromptItem(id) {
    const item = this.personalPrompts.find(p => p.id === id);
    const form = document.getElementById('personal-prompt-form');
    document.getElementById('prompt-editing-area').style.display = 'block';
    form.querySelector('#prompt-id').value = item.id;
    form.querySelector('#prompt-title').value = item.title;
    form.querySelector('#prompt-content').value = item.prompt;
    document.getElementById('cancel-prompt-edit').style.display = 'inline-block';
}

resetPromptForm() {
    document.getElementById('personal-prompt-form').reset();
    document.getElementById('prompt-id').value = '';
    document.getElementById('prompt-editing-area').style.display = 'none';
    document.getElementById('cancel-prompt-edit').style.display = 'none';
    document.getElementById('prompt-goal-input').value = '';
}

async deletePromptItem(id) {
    if (!confirm('Are you sure you want to delete this prompt?')) return;
    const teacherUid = this.sdk.auth.currentUser.uid;
    await this.sdk.db.collection('teachers').doc(teacherUid).collection('personal_prompts').doc(id).delete();
    await this.loadPersonalData();
    this.renderPersonalPromptsList();
    this.populateActivePromptSelector();
}

async setActivePrompt(e) {
    const promptId = e.target.value;
    const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
    await roomRef.update({ 'settings.active_prompt_id': promptId === 'general' ? null : promptId });
    this.addActivity(`✅ AI context set to: ${e.target.options[e.target.selectedIndex].text}`);
}

    // ========== AUTHENTICATION METHODS ==========

    async handleSuccessfulLogin(user) {
        console.log("🚀 Handling successful login...");
        this.sdk = new ClassroomSDK();

        // 1. Get or create teacher profile
        await this.getOrCreateTeacherProfile(user);

        // 2. Initialize SDK
        await this.sdk.init('teacher-dashboard', user);
        this.debugLog(`✅ Teacher dashboard initialized with room: ${this.sdk.getRoomCode()}`);

        // 3. Setup UI and Listeners
        this.sdk.createAIInterface();
        this.initializeTeacherAI();
        this.sdk.listenForStudents(this.updateStudentsList.bind(this));
        this.sdk.listenForMessages(this.addMessage.bind(this));
        this.sdk.listenForRoomUpdates(this.handleRoomUpdates.bind(this)); // Use a dedicated handler

        this.updateConnectionStatus(true);
        this.setupEventListeners(); // Re-run to attach listeners to new elements
        this.updateRoomDisplay();

        // 4. טען תכנים והנחיות אישיות
        await this.loadPersonalData();

        // 5. Show the main app UI
        document.querySelector('.header').style.display = 'block';
        document.querySelector('.main-content').style.display = 'flex';
        document.getElementById('login-container').style.display = 'none';
        document.getElementById('loading-overlay').classList.add('hidden');
        console.log("🎉 Dashboard is ready and visible.");
    }

    async getOrCreateTeacherProfile(user) {
        const teacherRef = this.sdk.db.collection('teachers').doc(user.uid);
        const doc = await teacherRef.get();

        if (!doc.exists) {
            console.log(`Creating new teacher profile for: ${user.displayName}`);
            await teacherRef.set({
                displayName: user.displayName,
                email: user.email,
                photoURL: user.photoURL,
                created_at: firebase.firestore.FieldValue.serverTimestamp(),
                last_login: firebase.firestore.FieldValue.serverTimestamp()
            });
        } else {
            console.log(`Teacher ${user.displayName} exists. Updating last login.`);
            await teacherRef.update({
                last_login: firebase.firestore.FieldValue.serverTimestamp()
            });
        }
    }

    showLoginScreen() {
        document.querySelector('.header').style.display = 'none';
        document.querySelector('.main-content').style.display = 'none';
        document.getElementById('loading-overlay').classList.add('hidden');
        const loginContainer = document.getElementById('login-container');
        loginContainer.style.display = 'flex';

        document.getElementById('google-signin-btn').onclick = () => this.signInWithProvider('google');
        document.getElementById('microsoft-signin-btn').onclick = () => this.signInWithProvider('microsoft');
    }

    async signInWithProvider(providerName) {
        let provider;
        if (providerName === 'google') {
            provider = new firebase.auth.GoogleAuthProvider();
        } else if (providerName === 'microsoft') {
            provider = new firebase.auth.OAuthProvider('microsoft.com');
        } else {
            return;
        }

        try {
            await firebase.auth().signInWithPopup(provider);
        } catch (error) {
            console.error(`${providerName} Sign-In Error:`, error);
            alert(`Failed to sign in with ${providerName}.`);
        }
    }

    logout() {
        firebase.auth().signOut();
    }

    // Helper to prevent code duplication
    handleRoomUpdates(roomData) {
        if (!roomData || !roomData.settings) return;

        if (roomData.settings.currentPoll) {
            this.displayPollResults(roomData.settings.currentPoll);
        }

        const aiIsActiveInDB = roomData.settings.ai_active === true;
        if (this.isAiActive !== aiIsActiveInDB) {
            this.isAiActive = aiIsActiveInDB;
            this.updateAIButton();
        }
    }
}

// Global functions for HTML buttons with English support
function sendQuickMessage(message) {
    if (window.teacherDashboard) {
        window.teacherDashboard.sendMessageToClass(message);
    }
}

function sendGameContent(url) {
    if (window.teacherDashboard) {
        window.teacherDashboard.sendCommand('LOAD_CONTENT', { url });
    }
}

function sendCustomContent() {
    document.getElementById('customContentModal').classList.add('visible');
}

// Global functions - updated
function toggleAIForClass() {
    if (window.teacherDashboard) {
        window.teacherDashboard.toggleAIForClass();
    }
}

function switchAIModel(model) {
    if (window.teacherDashboard) {
        window.teacherDashboard.switchAIModel(model);
    }
}

function resetClassroomData() {
    if (window.teacherDashboard) {
        window.teacherDashboard.resetClassroomData();
    }
}

function toggleDebug() {
    const debugConsole = document.querySelector('.enhanced-debug-console');
    if (debugConsole) {
        debugConsole.classList.toggle('visible');
    }
}

function sendMessage() {
    document.getElementById('messageModal').classList.add('visible');
}

function exportData() {
    if (!window.teacherDashboard) return;
    
    const data = {
        students: window.teacherDashboard.students,
        activities: window.teacherDashboard.activities,
        timestamp: new Date().toISOString(),
        roomCode: window.teacherDashboard.sdk?.getRoomCode()
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `classroom-data-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
}

function updateAIMenuStatus(isActive) {
    const aiMenuItems = document.querySelectorAll('.ai-menu-item');
    aiMenuItems.forEach(item => {
        item.style.opacity = isActive ? '1' : '0.5';
        item.style.pointerEvents = isActive ? 'auto' : 'none';
    });
}

// Function to copy classroom ID to clipboard with English support
function copyClassroomId() {
    if (!window.teacherDashboard || !window.teacherDashboard.sdk) {
        alert('System is not ready yet');
        return;
    }
    
    const roomCode = window.teacherDashboard.sdk.getRoomCode();
    
    // Copy to clipboard
    navigator.clipboard.writeText(roomCode).then(() => {
        // Change button text temporarily
        const copyBtn = document.getElementById('copyClassroomIdBtn');
        if (copyBtn) {
            const originalText = copyBtn.textContent;
            copyBtn.textContent = '✅ Copied!';
            copyBtn.style.background = 'rgba(76, 175, 80, 0.3)';
            
            setTimeout(() => {
                copyBtn.textContent = originalText;
                copyBtn.style.background = 'rgba(255,255,255,0.2)';
            }, 2000);
        }
        
        // User notification
        if (window.teacherDashboard) {
            window.teacherDashboard.addActivity('📋 Classroom ID copied to clipboard');
        }
    }).catch(err => {
        console.error('Copy error:', err);
        alert('Error copying ID. Try copying manually.');
    });
}

// Function to test AI status with English messages
function testAIService() {
    if (window.teacherDashboard) {
        window.teacherDashboard.testAIService().then(result => {
            if (result) {
                alert('✅ AI service is available and working properly!');
            } else {
                alert('❌ AI service is currently unavailable. Check settings.');
            }
        });
    }
}

// 🔧 Add English support for the entire system
document.addEventListener('DOMContentLoaded', function() {
    // Set text direction for all relevant elements
    const ltrElements = document.querySelectorAll('.message-item, .activity-item, .student-item');
    ltrElements.forEach(element => {
        element.style.direction = 'ltr';
        element.style.textAlign = 'left';
    });
    
    // Set font that supports English
    const style = document.createElement('style');
    style.textContent = `
        body, * {
            font-family: 'Segoe UI', Tahoma, Arial, 'Roboto', 'Open Sans', sans-serif !important;
        }
        
        .message-content, .activity-text, .student-name {
            direction: ltr !important;
            text-align: left !important;
            unicode-bidi: embed !important;
        }
        
        .debug-log, .debug-content {
            direction: ltr !important;
            text-align: left !important;
        }
        
        /* Fix English texts in interface */
        .dropdown-title, .dropdown-desc, .tool-label, .tool-desc {
            direction: ltr !important;
            text-align: left !important;
        }
    `;
    document.head.appendChild(style);
});

// Debug function with English logs
function debugClassroom() {
    if (!window.teacherDashboard) {
        console.log('Teacher dashboard not initialized');
        return;
    }
    
    const debug = {
        'Room': window.teacherDashboard.sdk?.getRoomCode(),
        'Students': window.teacherDashboard.students.length,
        'AI Active': window.teacherDashboard.isAiActive,
        'AI Model': window.teacherDashboard.currentAiModel,
        'SDK Connected': !!window.teacherDashboard.sdk,
        'Init Time': new Date().toLocaleTimeString('en-US')
    };
    
    console.table(debug);
    return debug;
}


=================================================================
FILE: locales\ar\common.json
FULL PATH: public\locales\ar\common.json
=================================================================

{
  "loading": "[ar] Loading...",
  "error": "[ar] Error",
  "success": "[ar] Success"
}


=================================================================
FILE: locales\ar\student.json
FULL PATH: public\locales\ar\student.json
=================================================================

{
  "join": "[ar] Join Lesson",
  "name": "[ar] Your name",
  "roomCode": "[ar] Room Code"
}


=================================================================
FILE: locales\ar\teacher.json
FULL PATH: public\locales\ar\teacher.json
=================================================================

{
  "dashboard": "[ar] Teacher Dashboard",
  "students": "[ar] Students",
  "messages": "[ar] Messages"
}


=================================================================
FILE: locales\en\common.json
FULL PATH: public\locales\en\common.json
=================================================================

{
  "loading": "Loading...",
  "error": "Error",
  "success": "Success"
}


=================================================================
FILE: locales\en\student.json
FULL PATH: public\locales\en\student.json
=================================================================

{
  "join": "Join Lesson",
  "name": "Your name",
  "roomCode": "Room Code"
}


=================================================================
FILE: locales\en\teacher.json
FULL PATH: public\locales\en\teacher.json
=================================================================

{
  "dashboard": "Teacher Dashboard",
  "students": "Students",
  "messages": "Messages"
}


=================================================================
FILE: locales\es\common.json
FULL PATH: public\locales\es\common.json
=================================================================

{
  "loading": "[es] Loading...",
  "error": "[es] Error",
  "success": "[es] Success"
}


=================================================================
FILE: locales\es\student.json
FULL PATH: public\locales\es\student.json
=================================================================

{
  "join": "[es] Join Lesson",
  "name": "[es] Your name",
  "roomCode": "[es] Room Code"
}


=================================================================
FILE: locales\es\teacher.json
FULL PATH: public\locales\es\teacher.json
=================================================================

{
  "dashboard": "[es] Teacher Dashboard",
  "students": "[es] Students",
  "messages": "[es] Messages"
}


=================================================================
FILE: locales\fr\common.json
FULL PATH: public\locales\fr\common.json
=================================================================

{
  "loading": "[fr] Loading...",
  "error": "[fr] Error",
  "success": "[fr] Success"
}


=================================================================
FILE: locales\fr\student.json
FULL PATH: public\locales\fr\student.json
=================================================================

{
  "join": "[fr] Join Lesson",
  "name": "[fr] Your name",
  "roomCode": "[fr] Room Code"
}


=================================================================
FILE: locales\fr\teacher.json
FULL PATH: public\locales\fr\teacher.json
=================================================================

{
  "dashboard": "[fr] Teacher Dashboard",
  "students": "[fr] Students",
  "messages": "[fr] Messages"
}


=================================================================
FILE: locales\he\common.json
FULL PATH: public\locales\he\common.json
=================================================================

{
  "loading": "[he] Loading...",
  "error": "[he] Error",
  "success": "[he] Success"
}


=================================================================
FILE: locales\he\student.json
FULL PATH: public\locales\he\student.json
=================================================================

{
  "join": "[he] Join Lesson",
  "name": "[he] Your name",
  "roomCode": "[he] Room Code"
}


=================================================================
FILE: locales\he\teacher.json
FULL PATH: public\locales\he\teacher.json
=================================================================

{
  "dashboard": "[he] Teacher Dashboard",
  "students": "[he] Students",
  "messages": "[he] Messages"
}


=================================================================
END OF PROJECT FILES
Total files processed: 25
Total files skipped: 0
Generated: 2025-07-17 18:24:41
=================================================================
