================================================================================
COLLECTED MCP FILES - FIRECLASS PROJECT
================================================================================

================================================================================
File 1/11: fireClass-documentation\updated_specs.md
================================================================================

# fireClass Control - Digital Classroom Management System
## Architecture Documentation Based on Existing Codebase

**Version:** 4.1 (Authentication Upgrade & Race Condition Fix)  
**Last Updated:** July 17, 2025

---

## 1. Overview

Teachers invest significant time creating high-quality presentations in PowerPoint or Google Slides. These presentations are rich with knowledge and thought-provoking questions, but often result in a passive, one-way lecture. Key questions are asked to the room, but the teacher has no real-time, data-driven way to know who understands, who is struggling, or what the class is truly thinking at that moment.

**fireClass Control transforms existing presentations from monologues into interactive dialogues.**

It is a real-time digital classroom management system that "wraps" any web-based content‚Äîwhether it's an external simulation from **PhET**, a tool like **Google's Teachable Machine**, or a custom-built application‚Äîwith a layer of classroom infrastructure. With a single button click from within their existing PowerPoint slide, a teacher can launch the fireClass Dashboard, turning any slide into a live, interactive, and measurable learning experience without changing their original materials.

### Recent Architectural Evolution (v4.1)

The system has evolved from a centralized configuration model to a teacher-centric personalization platform. Each teacher now manages their own library of content and custom-tailors the AI's behavior to fit their specific pedagogical goals for each lesson, granting unprecedented flexibility and control.

**Critical v4.1 Update**: The authentication system has been completely overhauled to replace anonymous authentication with identified provider-based authentication (Google/Microsoft), implementing a Gatekeeper pattern that resolves Race Condition issues in the login process.

---

## 2. Technical Architecture

### 2.1 System Structure Diagram

```mermaid
flowchart TD
    subgraph "Client Applications"
        Teacher["üñ•Ô∏è Teacher Dashboard<br/>(index.html)"]
        Student["üì± Student App<br/>(student-app.html)"]
        PPT["PowerPoint Integration<br/>(VBA Macro)"]
    end

    subgraph "Core JavaScript Layer"
        SDK["ClassroomSDK.js<br/>(Shared Logic)"]
        TeacherJS["teacher-dashboard.js<br/>(Teacher Logic)"]
        StudentJS["student-app.js<br/>(Student Logic)"]
    end

    subgraph "Firebase Backend (europe-west1)"
        Firestore[(Firestore Database)]
        Functions[Cloud Functions]
        Auth[Provider Authentication<br/>(Google/Microsoft)]
        Hosting[Static Hosting]
    end

    subgraph "Authentication Layer (v4.1)"
        Gatekeeper["Gatekeeper Pattern<br/>(HTML Level)"]
        AuthState["onAuthStateChanged<br/>(Single Source of Truth)"]
    end

    subgraph "Data Models"
        TeacherData["/teachers/{uid}<br/>(Authenticated Profile)"]
        RoomData["/rooms/{roomCode}<br/>(Ephemeral Class Data)"]
    end

    Teacher --> TeacherJS
    Student --> StudentJS
    TeacherJS --> SDK
    StudentJS --> SDK
    
    SDK --> Firestore
    SDK --> Functions
    SDK --> Auth
    
    Auth --> Gatekeeper
    Gatekeeper --> AuthState
    
    Firestore --> TeacherData
    Firestore --> RoomData
    
    Hosting --> Teacher
    Hosting --> Student
    
    PPT -.-> Teacher
```

### 2.2 Communication Components

#### a) ClassroomSDK.js - Core Engine
- **Room Creation** - `generateUniqueRoomCode()` generates unique 4-digit codes
- **Initialization** - `init()` handles teacher vs student differentiation
- **Real-time Communication** - Firestore snapshot listeners
- **UI Interfaces** - Creates floating chat and AI interfaces
- **Authentication** - Google/Microsoft OAuth integration (v4.1)

#### b) User Authentication (Major Update in v4.1)

**Critical Race Condition Fix**: The authentication system suffered from a Race Condition where the application would check authentication status before Firebase had processed redirect results, causing infinite login loops.

**Solution - Gatekeeper Pattern**: Complete separation of authentication logic from application logic.

```javascript
// HTML-Level Gatekeeper (index.html)
auth.onAuthStateChanged(async (user) => {
    if (user) {
        // User authenticated - show dashboard and initialize app
        if (!window.teacherDashboard) {
            window.teacherDashboard = new TeacherDashboard();
            await window.teacherDashboard.init(user); 
        }
    } else {
        // User not authenticated - show login interface
        await auth.getRedirectResult();
        showLoginInterface();
    }
});
```

**Teacher Authentication - Complete Overhaul**:
```javascript
// Google/Microsoft OAuth Implementation
async loginWithGoogle() {
    try {
        const provider = new firebase.auth.GoogleAuthProvider();
        const result = await this.auth.signInWithPopup(provider);
        return result.user;
    } catch (error) {
        console.error('üî• Google login failed:', error);
        throw error;
    }
}

// Teacher Profile Creation (v4.1)
async createTeacherProfile(user) {
    const teacherRef = this.db.collection('teachers').doc(user.uid);
    const teacherDoc = await teacherRef.get();
    
    if (!teacherDoc.exists) {
        // Create new teacher profile
        await teacherRef.set({
            profile: {
                name: user.displayName || 'Unknown Teacher',
                email: user.email,
                photoURL: user.photoURL || null,
                created_at: firebase.firestore.FieldValue.serverTimestamp(),
                last_login: firebase.firestore.FieldValue.serverTimestamp()
            },
            config: {
                apps: [
                    {
                        name: "AI Model Training",
                        description: "Visual Recognition training",
                        icon: "üìö",
                        url: "https://meir.world/face-recognition/"
                    },
                    {
                        name: "Teachable Machine",
                        description: "Google Teachable Machines",
                        icon: "üéØ",
                        url: "https://teachablemachine.withgoogle.com/train"
                    },
                    {
                        name: "PhET",
                        description: "Projectile Data Lab",
                        icon: "üéØ",
                        url: "https://phet.colorado.edu/sims/html/projectile-data-lab/latest/projectile-data-lab_all.html"
                    }
                ],
                settings: {
                    default_ai_model: 'gemini',
                    auto_enable_ai: true
                }
            }
        });
    } else {
        // Update existing teacher
        await teacherRef.update({
            'profile.last_login': firebase.firestore.FieldValue.serverTimestamp()
        });
    }
}
```

**Student Authentication - Unchanged**:
```javascript
// Student: Session-based ID generation (no Firebase Auth)
getOrCreateStudentId() {
    let studentId = sessionStorage.getItem('studentId');
    if (!studentId) {
        studentId = 'student_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        sessionStorage.setItem('studentId', studentId);
    }
    return studentId;
}
```

**Teacher**: Uses Firebase Provider Authentication (Google/Microsoft) to obtain a stable, unique UID for creating and managing the classroom.

**Student**: **NO Firebase Authentication.** Upon joining, the student app generates a temporary, unique session ID (studentId) stored in sessionStorage. This ID is unique per browser tab and allows for multiple students to be simulated from a single device for testing purposes.

#### b.1) Dual-Listener Architecture (Critical for Message Flow)

The system employs a dual-listener architecture to handle different types of real-time updates:

**Room Updates Listener** (`listenForRoomUpdates`)
- Monitors: `/rooms/{roomCode}` document changes
- Handles: AI settings, poll data, content commands, general room state
- Used by: Both teacher and student apps
- Purpose: System-level state synchronization

**Messages Listener** (`listenForMessages`) 
- Monitors: `/rooms/{roomCode}/messages` subcollection
- Handles: Chat messages (public and private), message filtering
- Used by: Both teacher and student apps  
- Purpose: Real-time communication stream

**Critical Implementation Note:** Student apps MUST initialize both listeners. Missing the messages listener results in students not receiving any messages from teachers, which was a common implementation oversight.

```javascript
// Required initialization for students:
this.classroom.listenForRoomUpdates(this.stateManager.bind(this));  // For AI/polls/commands
this.classroom.listenForMessages(this.messageHandler.bind(this));   // For actual messages
```

#### c) Room Management (Updated for v4.1)

```javascript
// Room structure in Firestore
/rooms/{4-digit-code}/
‚îú‚îÄ‚îÄ room_code: string
‚îú‚îÄ‚îÄ created_at: timestamp
‚îú‚îÄ‚îÄ teacher_uid: string               // NOW: Authenticated Teacher UID
‚îú‚îÄ‚îÄ lesson_orientation: string
‚îú‚îÄ‚îÄ settings/
‚îÇ   ‚îú‚îÄ‚îÄ ai_active: boolean
‚îÇ   ‚îú‚îÄ‚îÄ ai_model: string
‚îÇ   ‚îú‚îÄ‚îÄ active_prompt_id: string      // Personal AI prompt reference
‚îÇ   ‚îú‚îÄ‚îÄ current_command: object
‚îÇ   ‚îî‚îÄ‚îÄ currentPoll: {
‚îÇ       ‚îú‚îÄ‚îÄ id: string
‚îÇ       ‚îú‚îÄ‚îÄ type: string
‚îÇ       ‚îú‚îÄ‚îÄ question: string
‚îÇ       ‚îú‚îÄ‚îÄ isActive: boolean
‚îÇ       ‚îî‚îÄ‚îÄ responses: {
‚îÇ           // Key: student name (open_text) or studentId (choice)
‚îÇ           // Value: array of strings (open_text) or number (choice)
‚îÇ           }
‚îÇ       }
‚îú‚îÄ‚îÄ students/{studentId}        // Uses session-based ID (NOT Firebase UID)
‚îî‚îÄ‚îÄ messages/{messageId}
```

---

## 3. Case Study: Interactive AI Lesson ("Homer Face Recognition")

This example demonstrates how the platform transforms a standard lesson into an interactive, hands-on experience.

**The Lesson Goal:** Teach middle school students the basic principles of AI face recognition.
**The Teacher's Material:** A PowerPoint slide with pictures of Homer Simpson.

#### **The "Before" Scenario (Without fireClass):**
The teacher shows a slide and asks, "How do you think a computer knows this is Homer?" The discussion is verbal, and engagement is hard to track.

#### **The "After" Scenario (With fireClass v4.1):**
1. **Secure Authentication:** Teacher signs in with Google/Microsoft account
2. **Personal Profile Loading:** System recognizes returning teacher and loads their personalized dashboard
3. **Room Creation:** System creates room associated with teacher's authenticated UID
4. **Personal Content Selection:** From the dashboard, the teacher selects "AI Model Training" from their personal content library
5. **AI Context Application:** Teacher applies a custom "Face Recognition Learning" AI prompt to focus student interactions
6. **Active, Measurable Learning:**
    * **Training Phase:** Students are prompted to measure key geometric ratios on a base image of Homer.
    * **Testing Phase:** They test their "trained" model on other images of Homer with different expressions and angles.
    * **Analysis:** A results table shows them a similarity score for each test image, demonstrating why the AI succeeds or fails.
7. **Real-time Teacher Insights:** The teacher's dashboard shows each student's results and allows for private chat with contextual AI assistance.
8. **Data-Driven Discussion:** The teacher pauses the activity and says, "I see many of you found the AI failed when Homer was surprised. Let's discuss why a change in expression breaks a measurement-based model."
9. **Persistent Analytics:** All lesson data is saved to the teacher's authenticated profile for future analysis and improvement.

The platform didn't just show a game; it created a hands-on lab for understanding AI, all launched from the teacher's original presentation with full authentication security and personalized content management.

---

## 4. Performance and Data Management Considerations

The system's architecture was deliberately designed for real-time responsiveness and efficiency, based on two key principles:

### 4.1 Data Structure: Embedded Map vs. Subcollection

For poll responses, the system stores answers in an **embedded map field** (`responses`) within the `currentPoll` object, rather than in a separate subcollection. For a typical classroom size (30-50 students), this approach is significantly more performant:
* **Efficiency**: The teacher's dashboard receives all poll data (the question and all its answers) in a **single document read** from Firestore. A subcollection model would have required one read for the poll metadata plus dozens of individual reads for each answer, increasing latency and cost.
* **Simplicity**: Managing a single real-time listener that receives a complete, self-contained object simplifies the client-side state management logic enormously.

While a subcollection offers greater scalability for millions of entries, the embedded map approach is optimized for the specific use case of a live classroom, where the number of responses is bounded and real-time aggregation is critical.

### 4.2 Local Cache for Immediate Actions

The teacher's dashboard maintains a local, in-memory copy of the current poll's responses (`this.currentQuestionResponses`).
* **Synchronization**: This local cache is kept perfectly in sync with Firestore via the real-time `onSnapshot` listener.
* **Responsiveness**: When the teacher requests an immediate action, such as an AI analysis (`handleAiAnalysis`), the system uses this local cache instead of making a new, asynchronous database query. This ensures that UI actions feel instantaneous, providing a fluid and responsive user experience.

---

## 5. File Structure and Code Organization

### 5.1 Directory Structure
```
public/
‚îú‚îÄ‚îÄ index.html                 # Teacher Dashboard with Gatekeeper
‚îú‚îÄ‚îÄ student-app.html           # Student Interface  
‚îú‚îÄ‚îÄ firebase-config.js         # Firebase Configuration
‚îú‚îÄ‚îÄ config.json               # Legacy Configuration (deprecated v4.1)
‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îú‚îÄ‚îÄ teacher-dashboard.css  # Teacher Styling (English LTR)
‚îÇ   ‚îî‚îÄ‚îÄ student-app.css       # Student Styling (English LTR)
‚îî‚îÄ‚îÄ js/
    ‚îú‚îÄ‚îÄ ClassroomSDK.js       # Core SDK with OAuth
    ‚îú‚îÄ‚îÄ teacher-dashboard.js  # Teacher Logic (Simplified Init)
    ‚îî‚îÄ‚îÄ student-app.js        # Student Logic
```

### 5.2 ClassroomSDK.js - Core Functionality

#### Room Creation (Teacher) - Updated for v4.1
```javascript
async generateUniqueRoomCode() {
    // 20 attempts to find unique 4-digit code
    let attempts = 0;
    const maxAttempts = 20;
    
    while (attempts < maxAttempts) {
        const roomCode = Math.floor(1000 + Math.random() * 9000).toString();
        const roomRef = this.db.collection('rooms').doc(roomCode);
        const doc = await roomRef.get();
        
        if (!doc.exists) {
            return roomCode;
        }
        attempts++;
    }
    
    // Fallback to random code
    return Math.floor(1000 + Math.random() * 9000).toString();
}

// Initialize room with authenticated teacher UID
async initializeRoom(teacherUid) {
    const roomRef = this.db.collection('rooms').doc(this.roomCode);
    await roomRef.set({
        room_code: this.roomCode,
        created_at: firebase.firestore.FieldValue.serverTimestamp(),
        teacher_uid: teacherUid,  // Authenticated teacher UID
        lesson_orientation: 'general',
        settings: {
            ai_active: true,
            ai_model: 'gemini',
            current_command: null,
            currentPoll: { isActive: false }
        }
    });
}
```

#### Room Joining (Student) - Unchanged
```javascript
async joinRoom(studentId, playerName) {
    const studentRef = this.db.collection('rooms').doc(this.roomCode)
                             .collection('students').doc(studentId);
    await studentRef.set({
        uid: studentId,  // This is the session-based ID, NOT Firebase UID
        name: playerName,
        joined_at: firebase.firestore.FieldValue.serverTimestamp()
    });
}
```

#### Real-time Communication Interfaces
```javascript
// Listen for students (Teacher)
listenForStudents(callback) {
    const studentsCollection = this.db.collection('rooms').doc(this.roomCode)
                                     .collection('students');
    
    this.studentsListener = studentsCollection.onSnapshot(snapshot => {
        const students = [];
        snapshot.forEach(doc => students.push(doc.data()));
        callback(students);
    });
}

// Listen for messages (Everyone)
listenForMessages(callback) {
    const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                     .collection('messages')
                                     .orderBy('timestamp');
    
    this.messagesListener = messagesCollection.onSnapshot(snapshot => {
        const newMessages = [];
        snapshot.docChanges().forEach(change => {
            if (change.type === "added") {
                const msg = change.doc.data();
                const currentUserId = this.isTeacher ? this.auth.currentUser?.uid : this.studentId;
                const isPrivate = msg.is_private === true;
                const isRecipient = msg.recipient_uid === currentUserId;
                const isSender = msg.sender_uid === currentUserId;

                if (!isPrivate || this.isTeacher || isRecipient || isSender) {
                    newMessages.push(msg);
                }
            }
        });

        if (newMessages.length > 0 && typeof callback === 'function') {
            callback(newMessages);
        }
    });
}
```

### 5.3 Command System
```javascript
// Send command (Teacher)
async sendCommand(commandName, payload = {}) {
    const roomRef = this.db.collection('rooms').doc(this.roomCode);
    await roomRef.update({
        'settings.current_command': {
            command: commandName,
            payload: payload,
            timestamp: firebase.firestore.FieldValue.serverTimestamp()
        }
    });
}

// Listen for commands (Student) - Central State Manager
stateManager: function(roomData) {
    if (!roomData || !roomData.settings) return;

    const settings = roomData.settings;
    const pollData = settings.currentPoll;
    const command = settings.current_command;
    const isAiActive = settings.ai_active === true;

    // 1. Update UI components (like AI button) on every update
    const aiButton = document.getElementById('classroom-ai-btn');
    if (aiButton) {
        aiButton.style.display = isAiActive ? 'block' : 'none';
    }

    // 2. Handle polls with priority
    if (pollData && pollData.isActive) {
        if (this.currentPollId !== pollData.id) {
            this.currentPollId = pollData.id;
            this.renderPollInterface(pollData);
        }
        return;
    }

    // 3. Handle content commands
    if (command && command.command === 'LOAD_CONTENT') {
        const iframe = document.getElementById('content-frame');
        const newUrl = command.payload.url || 'about:blank';
        if (iframe && iframe.src !== newUrl) {
            iframe.src = newUrl;
        }
        return;
    }
}
```

---

## 6. User Interfaces

### 6.1 Teacher Dashboard (index.html + teacher-dashboard.js)

#### Authentication Interface (New v4.1)
```html
<!-- Teacher Login Screen -->
<div id="teacher-login-container" class="login-container" style="display: none;">
    <div class="login-card">
        <div class="login-header">
            <h1>üéì Teacher Login</h1>
            <p>Please sign in to access your classroom dashboard</p>
        </div>
        
        <div class="login-buttons">
            <button id="google-login-btn" class="login-btn google-btn" onclick="startGoogleLogin()">
                <span class="login-icon">üîç</span>
                <span>Sign in with Google</span>
            </button>
            
            <button id="microsoft-login-btn" class="login-btn microsoft-btn" onclick="startMicrosoftLogin()">
                <span class="login-icon">üè¢</span>
                <span>Sign in with Microsoft</span>
            </button>
        </div>
        
        <div class="login-footer">
            <p>Secure authentication ‚Ä¢ Your data stays private</p>
        </div>
    </div>
</div>
```

#### Top Navigation Menu
- **Quick Actions** - Pre-made messages for class, including "End Lesson" workflow
- **Games & Content** - Load URLs from personal content library (updated v4.1)
- **AI Management** - Enable/disable + model selection (ChatGPT/Claude/Gemini)
- **Tools** - Debug console, data export, and **Manage Content & AI** (new v4.1)
- **Polls** - Create quick polls for class
- **Reports** - Advanced reporting and analytics

#### Main Content Areas
```javascript
// Student list with private messaging
updateStudentsList(studentsData) {
    this.students = studentsData;
    const studentsListDiv = document.getElementById('studentsList');
    
    studentsListDiv.innerHTML = '';
    
    this.students.forEach(student => {
        const studentElement = document.importNode(template.content, true);
        const nameSpan = studentElement.querySelector('.student-name');
        nameSpan.textContent = student.name;

        const actionsDiv = studentElement.querySelector('.student-actions');
        const privateMsgBtn = document.createElement('button');
        privateMsgBtn.textContent = 'Private Message';
        privateMsgBtn.className = 'private-message-btn';
        privateMsgBtn.onclick = () => this.openPrivateMessageModal(student);
        actionsDiv.appendChild(privateMsgBtn);
        
        studentsListDiv.appendChild(studentElement);
    });
}

// Messages with full validation and private message support
addSingleMessage(message) {
    const sender = message?.sender || 'Unknown User';
    const content = message?.content || 'Empty Message';
    const isPrivate = message?.is_private === true;
    
    // Prevent duplicate messages
    const messageId = message.timestamp?.seconds + '_' + message.sender_uid + '_' + message.content.substring(0, 20);
    const existingMessage = messagesArea.querySelector(`[data-message-id="${messageId}"]`);
    if (existingMessage) return;
    
    // Create message with proper validation...
}
```

#### Advanced AI System
```javascript
// Teacher AI initialization
async initializeTeacherAI() {
    try {
        // 1. Check AI service availability
        const aiStatus = await this.testAIService();
        
        // 2. Show AI button (even if service not available)
        this.showTeacherAIButton();
        
        // 3. Update AI status
        await this.checkAIStatus();
        
        this.debugLog("‚úÖ Teacher AI initialized successfully");
    } catch (error) {
        console.error("üî• Error initializing teacher AI:", error);
        this.showTeacherAIButton(); // Show button anyway
    }
}

// AI model switching
async switchAIModel(model) {
    const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
    await roomRef.update({
        'settings.ai_model': model
    });
    
    this.currentAiModel = model;
    this.updateAIModelDisplay();
    this.addActivity(`üîÑ AI model switched to: ${this.getModelDisplayName(model)}`);
}
```

### 6.2 Student App (student-app.html + student-app.js)

The student application is designed for simplicity and consistency. Its primary role is to act as a container for variable content while providing a fixed set of communication and interaction tools.

#### **UI Architecture: The Three Permanent Tools**
Upon successful login, the student interface is enhanced with three permanent, floating, and draggable buttons. These buttons are **always visible** and do not appear or disappear.

* **üí¨ Chat Button**: Always available for student-initiated communication.
* **ü§ñ AI Button**: Always visible. Its *functionality* is controlled by the teacher.
* **üìä Poll Button**: Always visible. Becomes active with a visual indicator when a poll is launched by the teacher.

#### **State Management: Teacher Control vs. Student Control**
The core of the architecture is a clear separation of concerns, managed by the `stateManager` function which listens to real-time updates from Firestore.

* **Teacher Controls FUNCTIONALITY**:
    * **AI**: The teacher enables or disables the AI service. If disabled, the student's attempt to use it will result in an "AI not available" message inside the AI window. The button itself is never hidden.
    * **Polls**: The teacher starts and stops polls. Stopping a poll automatically closes the poll window on the student's screen.

* **Student Controls VISIBILITY**:
    * The student can click any of the three buttons at any time to open or close (minimize) the corresponding window.
    * The student can drag any of the buttons or windows to organize their workspace.

#### **Automatic UI Actions (Attention Hooks)**
To ensure students do not miss important events, the system automatically opens windows in specific scenarios:

1.  **Teacher Message Received**: If the student's chat window is closed, it will **automatically open** to display the new message from the teacher.
2.  **New Poll Launched**: When the teacher starts a new poll, the student's poll window will **automatically open** with the question.

This architecture provides a predictable and powerful user experience, where the tools are consistently available but intelligently respond to the teacher's pedagogical actions.

```javascript
// The updated stateManager logic reflecting the new architecture
stateManager: function(roomData) {
    if (!roomData || !roomData.settings) return;

    const settings = roomData.settings;
    const pollData = settings.currentPoll;

    // 1. AI State Management: Update the SDK's internal state. Do NOT hide the button.
    this.classroom.isAiActiveForClass = settings.ai_active === true;

    // 2. Poll State Management: Control badge and auto-open/close the window
    const pollIsActive = pollData && pollData.isActive;
    const pollContainer = document.getElementById('classroom-poll-container');

    if (pollIsActive) {
        // If a new poll arrives, render it and force the window open
        if (this.currentPollId !== pollData.id) {
            this.currentPollId = pollData.id;
            this.renderPollInterface(pollData); // This function now ensures the window is visible
        }
    } else {
        // If teacher stops the poll, force the window to close
        if (this.currentPollId !== null) {
            this.clearPollInterface();
            this.currentPollId = null;
        }
    }
    // ... (Content command logic remains the same)
}
```

---

## 7. Polling System (Enhanced)

### 7.1 Poll Types and Data Structure
```javascript
// Poll configuration in Firestore
currentPoll: {
    id: "poll_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9),
    type: "yes_no" | "multiple_choice" | "open_text",
    question: "What is your understanding of...?", // Added in latest version
    options: 2 | 4 | 0, // Number of choices for yes_no/multiple_choice
    isActive: true,
    createdAt: timestamp,
    responses: {
        // For open_text: student name -> array of answers
        "student_name": ["first answer", "revised answer", "final answer"],
        // For choice-based: studentId -> choice number
        "student_session_id": 1
    }
}
```

### 7.2 Poll Creation and Management

The polling system is designed for real-time interaction while ensuring data integrity and security.

#### Teacher: Poll Creation (`startPoll`)
When a teacher starts a poll, the `startPoll` function on the teacher's dashboard creates a new poll object. This object includes a unique ID, the poll type, and an empty `responses` map. It then overwrites the `settings.currentPoll` field in the room's Firestore document. This "reset" action ensures that each poll starts with a clean slate.

#### Student: Poll Submission (`submitPollAnswer`)
To overcome Firestore security rules that prevent unauthenticated users from writing to the main room document, student answers are not sent directly to the database from the client. Instead, the process is as follows:
1.  The student's client (`ClassroomSDK.js`) calls a dedicated Cloud Function named `submitPollAnswer`.
2.  This function receives the student's answer, name, and room code.
3.  Running with administrative privileges on the server, the Cloud Function securely validates the data and updates the `responses` map within the `settings.currentPoll` object in Firestore.

This architecture is secure, robust, and ensures that the teacher's real-time listener is reliably triggered upon every new answer.

```javascript
// Client-side call from ClassroomSDK.js
async submitPollAnswer(answer) {
    try {
        const submitAnswerFunction = this.functions.httpsCallable('submitPollAnswer');
        await submitAnswerFunction({
            roomCode: this.roomCode,
            studentId: this.studentId,
            playerName: this.playerName,
            answer: answer
        });
    } catch (error) {
        console.error("Error calling submitPollAnswer cloud function:", error);
    }
}
```

### 7.3 Real-time Results Display
```javascript
// Display poll results on teacher dashboard
displayPollResults(pollData) {
    if (pollData && pollData.type === 'open_text' && pollData.isActive) {
        const container = document.getElementById('open-question-results');
        container.innerHTML = '';

        // Update local memory with latest responses
        this.currentQuestionResponses = pollData.responses || {};

        for (const [studentName, answers] of Object.entries(this.currentQuestionResponses)) {
            const lastAnswer = answers[answers.length - 1];
            const answerDiv = document.createElement('div');
            answerDiv.innerHTML = `<strong>${studentName} (${answers.length} versions):</strong><p>${lastAnswer}</p>`;
            container.appendChild(answerDiv);
        }
    } else if (pollData && (pollData.type === 'multiple_choice' || pollData.type === 'yes_no')) {
        const container = document.getElementById('poll-results-container');
        container.innerHTML = '';
        
        const responses = pollData.responses || {};
        let totalVotes = Object.keys(responses).length;
        
        for (let i = 1; i <= pollData.options; i++) {
            const votes = Object.values(responses).filter(vote => vote === i).length;
            const percentage = totalVotes > 0 ? ((votes / totalVotes) * 100).toFixed(1) : 0;
            const label = pollData.type === 'yes_no' ? (i === 1 ? 'Yes' : 'No') : `Option ${i}`;
            
            const barHtml = `
                <div style="margin-bottom: 12px;">
                    <div style="display: flex; justify-content: space-between;">
                        <strong>${label}</strong>
                        <span>${votes} votes (${percentage}%)</span>
                    </div>
                    <div style="background: #e0e0e0; border-radius: 4px; overflow: hidden;">
                        <div style="width: ${percentage}%; background: #42a5f5; height: 20px;"></div>
                    </div>
                </div>
            `;
            container.innerHTML += barHtml;
        }
    }
}
```

---

## 8. Configuration System (Personal Content Libraries - v4.1)

### 8.1 Evolution from Global to Personal Configuration

**v3.2 and Earlier**: Single global `config.json` file with predefined content for all teachers.

**v4.1**: Personal content libraries stored in Firestore per authenticated teacher.

### 8.2 Personal Content Management

```javascript
// Teacher's personal content structure in Firestore
/teachers/{teacherUid}/
‚îú‚îÄ‚îÄ profile: { name, email, photoURL, created_at, last_login }
‚îú‚îÄ‚îÄ config: { apps: [], settings: {} }
‚îú‚îÄ‚îÄ /personal_links/{linkId}/
‚îÇ   ‚îú‚îÄ‚îÄ title: string
‚îÇ   ‚îú‚îÄ‚îÄ description: string
‚îÇ   ‚îú‚îÄ‚îÄ icon: string
‚îÇ   ‚îî‚îÄ‚îÄ url: string
‚îî‚îÄ‚îÄ /personal_prompts/{promptId}/
    ‚îú‚îÄ‚îÄ title: string
    ‚îî‚îÄ‚îÄ prompt: string
```

### 8.3 Content Management Interface

```javascript
// Teacher manages personal content library
async managePersonalContent() {
    // Load teacher's personal links
    const linksSnapshot = await this.sdk.db.collection('teachers')
        .doc(this.auth.currentUser.uid)
        .collection('personal_links')
        .get();
    
    const personalLinks = [];
    linksSnapshot.forEach(doc => {
        personalLinks.push({ id: doc.id, ...doc.data() });
    });
    
    // Populate content management interface
    this.populatePersonalContentList(personalLinks);
}

// Dynamic content loading in Games & Content menu
populateGamesList() {
    const container = document.getElementById('game-list-container');
    
    // Load from teacher's personal library instead of config.json
    this.loadPersonalLinks().then(links => {
        container.innerHTML = '';
        
        links.forEach(link => {
            const linkElement = document.createElement('a');
            linkElement.href = '#';
            linkElement.className = 'dropdown-item';
            linkElement.onclick = (e) => {
                e.preventDefault();
                this.sendSelectedGame(link.url);
            };

            linkElement.innerHTML = `
                <span class="dropdown-icon">${link.icon || 'üîó'}</span>
                <div class="dropdown-content">
                    <div class="dropdown-title">${link.title}</div>
                    <div class="dropdown-desc">${link.description}</div>
                </div>
            `;
            container.appendChild(linkElement);
        });
    });
}
```

---

## 9. Database Structure (Firestore) - v4.1

### 9.1 Complete Schema

```javascript
// Persistent teacher data (NEW v4.1)
/teachers/{teacherUid}/
‚îú‚îÄ‚îÄ profile: {
‚îÇ   ‚îú‚îÄ‚îÄ name: string
‚îÇ   ‚îú‚îÄ‚îÄ email: string
‚îÇ   ‚îú‚îÄ‚îÄ photoURL: string
‚îÇ   ‚îú‚îÄ‚îÄ created_at: timestamp
‚îÇ   ‚îî‚îÄ‚îÄ last_login: timestamp
‚îÇ   }
‚îú‚îÄ‚îÄ config: {
‚îÇ   ‚îú‚îÄ‚îÄ apps: array (default content from createTeacherProfile)
‚îÇ   ‚îî‚îÄ‚îÄ settings: {
‚îÇ       ‚îú‚îÄ‚îÄ default_ai_model: string
‚îÇ       ‚îî‚îÄ‚îÄ auto_enable_ai: boolean
‚îÇ       }
‚îÇ   }
‚îú‚îÄ‚îÄ /personal_links/{linkId}/
‚îÇ   ‚îú‚îÄ‚îÄ title: string
‚îÇ   ‚îú‚îÄ‚îÄ description: string
‚îÇ   ‚îú‚îÄ‚îÄ icon: string
‚îÇ   ‚îî‚îÄ‚îÄ url: string
‚îî‚îÄ‚îÄ /personal_prompts/{promptId}/
    ‚îú‚îÄ‚îÄ title: string
    ‚îî‚îÄ‚îÄ prompt: string

// Ephemeral classroom sessions (UPDATED v4.1)
/rooms/{roomCode}/
‚îú‚îÄ‚îÄ room_code: string
‚îú‚îÄ‚îÄ created_at: timestamp
‚îú‚îÄ‚îÄ teacher_uid: string (authenticated teacher UID)
‚îú‚îÄ‚îÄ lesson_orientation: string
‚îú‚îÄ‚îÄ settings: {
‚îÇ   ‚îú‚îÄ‚îÄ ai_active: boolean
‚îÇ   ‚îú‚îÄ‚îÄ ai_model: string ('gemini'|'chatgpt'|'claude')
‚îÇ   ‚îú‚îÄ‚îÄ active_prompt_id: string (links to teacher's personal prompt)
‚îÇ   ‚îú‚îÄ‚îÄ current_command: {
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ command: string
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ payload: object
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ timestamp: timestamp
‚îÇ   ‚îÇ   }
‚îÇ   ‚îî‚îÄ‚îÄ currentPoll: {
‚îÇ       ‚îú‚îÄ‚îÄ id: string (unique poll identifier)
‚îÇ       ‚îú‚îÄ‚îÄ type: string ('yes_no'|'multiple_choice'|'open_text')
‚îÇ       ‚îú‚îÄ‚îÄ question: string
‚îÇ       ‚îú‚îÄ‚îÄ isActive: boolean
‚îÇ       ‚îî‚îÄ‚îÄ responses: {
‚îÇ           // For open_text: sanitized student name -> array of answers
‚îÇ           "student_name_sanitized": ["answer1", "answer2", "answer3"],
‚îÇ           // For choice-based: studentId (session-based) -> choice number
‚îÇ           "student_session_id": 1
‚îÇ           }
‚îÇ       }
‚îÇ   }
‚îú‚îÄ‚îÄ /students/{studentId}            // studentId is session-based, NOT Firebase UID
‚îÇ   ‚îú‚îÄ‚îÄ uid: string (the session-based studentId)
‚îÇ   ‚îú‚îÄ‚îÄ name: string
‚îÇ   ‚îî‚îÄ‚îÄ joined_at: timestamp
‚îú‚îÄ‚îÄ /questionHistory/{questionId}     // Historical questions for end-of-lesson reports
‚îÇ   ‚îú‚îÄ‚îÄ id: string
‚îÇ   ‚îú‚îÄ‚îÄ type: string
‚îÇ   ‚îú‚îÄ‚îÄ question: string
‚îÇ   ‚îú‚îÄ‚îÄ isActive: boolean (false for completed)
‚îÇ   ‚îú‚îÄ‚îÄ createdAt: timestamp
‚îÇ   ‚îú‚îÄ‚îÄ closedAt: timestamp
‚îÇ   ‚îî‚îÄ‚îÄ responses: object (complete response history)
‚îî‚îÄ‚îÄ /messages/{messageId}
    ‚îú‚îÄ‚îÄ sender: string (display name)
    ‚îú‚îÄ‚îÄ sender_uid: string (teacher Firebase UID or student session ID)
    ‚îú‚îÄ‚îÄ content: string
    ‚îú‚îÄ‚îÄ timestamp: timestamp
    ‚îú‚îÄ‚îÄ is_teacher: boolean
    ‚îú‚îÄ‚îÄ is_private: boolean
    ‚îî‚îÄ‚îÄ recipient_uid?: string (student session ID for private messages)
```

---

## 10. Security and Privacy Model (Updated v4.1)

### 10.1 Authentication Architecture

**Teacher**: Uses Firebase Provider Authentication (Google/Microsoft) to get a stable UID for room management and administrative operations.

**Student**: **No Firebase Authentication whatsoever.** Uses browser sessionStorage-based unique IDs that persist only for the session.

### 10.2 Firestore Security Rules (Updated v4.1)

```javascript
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Teachers Collection - Personal data protection
    match /teachers/{teacherId} {
      // A teacher can read and write ONLY to their own document and subcollections
      allow read, write: if request.auth != null && request.auth.uid == teacherId;

      match /personal_links/{linkId} {
        allow read, write: if request.auth != null && request.auth.uid == teacherId;
      }
      
      match /personal_prompts/{promptId} {
        allow read, write: if request.auth != null && request.auth.uid == teacherId;
      }
    }

    // Global Rooms Collection - Class interaction
    match /rooms/{roomCode} {
      allow create: if request.auth != null; // Any authenticated teacher can create
      allow read: if true; // Anyone can read room data to join
      // Only the teacher who created the room can update or delete it
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.teacher_uid;
      
      // Subcollections are open for real-time class interaction
      match /students/{studentId} {
        allow create, read: if true;
        allow delete: if request.auth != null && 
          request.auth.uid == get(/databases/$(database)/documents/rooms/$(roomCode)).data.teacher_uid;
      }
      
      match /messages/{messageId} {
        allow create, read: if true;
        allow delete: if request.auth != null && 
          request.auth.uid == get(/databases/$(database)/documents/rooms/$(roomCode)).data.teacher_uid;
      }
      
      match /questionHistory/{questionId} {
        allow read, write: if request.auth != null && 
          request.auth.uid == get(/databases/$(database)/documents/rooms/$(roomCode)).data.teacher_uid;
      }
    }
  }
}
```

### 10.3 Privacy Protection

```javascript
// Private message filtering (client-side)
listenForMessages(callback) {
    this.messagesListener = messagesCollection.onSnapshot(snapshot => {
        const newMessages = [];
        snapshot.docChanges().forEach(change => {
            if (change.type === "added") {
                const msg = change.doc.data();
                const currentUserId = this.isTeacher ? this.auth.currentUser?.uid : this.studentId;
                const isPrivate = msg.is_private === true;
                const isRecipient = msg.recipient_uid === currentUserId;
                const isSender = msg.sender_uid === currentUserId;

                // Show message if: public OR user is teacher OR user is recipient/sender
                if (!isPrivate || this.isTeacher || isRecipient || isSender) {
                    newMessages.push(msg);
                }
            }
        });
        
        if (newMessages.length > 0 && typeof callback === 'function') {
            callback(newMessages);
        }
    });
}
```

---

## 11. Typical Workflow (Updated v4.1)

### 11.1 Class Setup

1. **Teacher Authentication** - Teacher opens `index.html`, Gatekeeper prompts for Google/Microsoft login
2. **Profile Loading** - System loads or creates teacher profile with personal settings
3. **Room Creation** - System auto-generates 4-digit room code associated with teacher UID
4. **Student Access** - Teacher shares code with students (QR code displayed in header)
5. **Student Joining** - Students navigate to `student-app.html?classroom={code}` (auto-populates room code)
6. **Session Creation** - Students enter name, system generates session-based `studentId`
7. **Real-time Connection** - Connection established, teacher sees students appear

### 11.2 Content Delivery (Updated v4.1)

```javascript
// Teacher selects content from personal library
sendSelectedGame(url) {
    this.sendCommand('LOAD_CONTENT', { url });
    // Closes modal automatically
    document.getElementById('customContentModal').querySelector('.modal-close').click();
}

// Student receives and loads content
stateManager: function(roomData) {
    const command = roomData.settings?.current_command;
    if (command && command.command === 'LOAD_CONTENT') {
        const iframe = document.getElementById('content-frame');
        iframe.src = command.payload.url || 'about:blank';
    }
}
```

### 11.3 AI Context Management (New v4.1)

```javascript
// Teacher applies personal AI prompt to classroom
async setClassroomAIContext(promptId) {
    const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
    await roomRef.update({
        'settings.active_prompt_id': promptId,
        'last_activity': firebase.firestore.FieldValue.serverTimestamp()
    });
    
    this.addActivity(`ü§ñ AI context updated: ${promptTitle}`);
}

// Cloud Function applies context to student AI requests
exports.askAI = functions.https.onCall(async (data, context) => {
    const { prompt, roomCode, language } = data;
    
    // Get room data to check for active prompt
    const roomDoc = await admin.firestore().collection('rooms').doc(roomCode).get();
    const roomData = roomDoc.data();
    
    let contextualPrompt = prompt;
    
    // Apply teacher's selected context if available
    if (roomData.settings?.active_prompt_id) {
        const promptDoc = await admin.firestore()
            .collection('teachers').doc(roomData.teacher_uid)
            .collection('personal_prompts').doc(roomData.settings.active_prompt_id)
            .get();
        
        if (promptDoc.exists) {
            const systemPrompt = promptDoc.data().prompt;
            contextualPrompt = `${systemPrompt}\n\nStudent question: ${prompt}`;
        }
    }
    
    // Send to AI service with context
    const aiResponse = await callAIService(contextualPrompt, language);
    return { result: aiResponse, model: 'gemini' };
});
```

### 11.4 Real-time Polling Workflow

1. **Teacher** creates poll through dashboard menu
2. **System** assigns unique poll ID and sets `isActive: true`
3. **Students** automatically see poll interface via `stateManager`
4. **Students** submit answers (multiple submissions allowed for open-text)
5. **Teacher** sees real-time results and can request AI analysis
6. **Teacher** stops poll when ready, system saves to question history

### 11.5 Enhanced Communication Flow

#### Real-time Message Architecture
The system uses a dual-stream approach for optimal performance:

**Stream 1: Room State Changes**
```javascript
// Teacher toggles AI, starts polls, sends content
this.classroom.listenForRoomUpdates((roomData) => {
    // Handles: AI settings, polls, content commands
    this.stateManager(roomData);
});
```

**Stream 2: Message Communication**  
```javascript
// Teacher/student chat messages
this.classroom.listenForMessages((messages) => {
    // Handles: Public messages, private messages, auto-chat opening
    messages.forEach(msg => {
        this.classroom.addChatMessage(msg.sender, msg.content, msg);
        
        // Auto-open chat for teacher messages (student-side)
        if (isChatHidden && msg.is_teacher) {
            this.classroom.toggleChat();
        }
    });
});
```

#### Message Flow Sequence
1. **Teacher sends message** ‚Üí Firestore `/rooms/{code}/messages/` subcollection
2. **Student receives via `listenForMessages`** ‚Üí Real-time message stream
3. **Message filtering** ‚Üí Private messages shown only to intended recipients
4. **Auto-UI updates** ‚Üí Chat window opens automatically for teacher messages
5. **State synchronization** ‚Üí Both teacher and student UIs reflect message delivery

#### Critical Implementation Requirements
- **Students MUST initialize both listeners** during login process
- **Teachers rely on Firebase Auth UID** for message attribution  
- **Students use session-based ID** for message attribution
- **Private message filtering** handled client-side via recipient_uid matching

This architecture ensures **complete separation** between system commands and human communication while maintaining real-time responsiveness.

---

## 12. Advanced Features

### 12.1 AI Analysis System

```javascript
// Teacher requests AI analysis of current poll responses
async handleAiAnalysis(type) {
    // Open teacher's AI window
    if (this.sdk.aiContainer.style.display === 'none') {
        this.sdk.toggleAI();
    }

    // Collect responses from local memory
    const allAnswers = JSON.stringify(this.currentQuestionResponses, null, 2);
    const lang = this.sdk.getInterfaceLanguage();
    
    let prompt;
    if (type === 'summarize') {
        prompt = `Here are student responses to a question. Each student name maps to an array of their answers (from first to last). Summarize the class's understanding, identify students whose answers indicate difficulty, and point out students who showed significant improvement across versions:\n\n${allAnswers}`;
    } else { // keywords
        prompt = `Extract the 10 most frequent and significant keywords from the following text:\n\n${allAnswers}`;
    }

    // Send to AI and reset responses for next round
    this.sdk.sendAIMessage(prompt, lang);
    
    try {
        const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
        await roomRef.update({ 'settings.currentPoll.responses': {} });
        this.addActivity(`üîÑ Response repository reset for next round.`);
    } catch (error) {
        console.error("Error resetting poll responses:", error);
    }
}
```

### 12.2 End-of-Lesson Reporting

```javascript
// Generate comprehensive lesson summary
async generateLessonSummary() {
    try {
        const historySnapshot = await this.sdk.db.collection('rooms')
            .doc(this.sdk.getRoomCode())
            .collection('questionHistory')
            .orderBy('createdAt')
            .get();
        
        let fullLessonData = [];
        historySnapshot.forEach(doc => {
            fullLessonData.push(doc.data());
        });
        
        const summaryPrompt = this.buildLessonSummaryPrompt(fullLessonData);
        await this.sdk.sendAIMessage(summaryPrompt, 'en');
        
        this.addActivity('‚úÖ Comprehensive lesson summary generated');
    } catch (error) {
        console.error('üî• Error creating summary report:', error);
    }
}

buildLessonSummaryPrompt(lessonData) {
    let prompt = `Comprehensive Lesson Summary Report\n\n`;
    prompt += `Number of questions asked: ${lessonData.length}\n\n`;
    
    lessonData.forEach((question, index) => {
        prompt += `Question ${index + 1}: ${question.question || 'Untitled question'}\n`;
        prompt += `Student responses:\n`;
        Object.entries(question.responses || {}).forEach(([student, answers]) => {
            if (Array.isArray(answers)) {
                prompt += `  ${student}: ${answers.join(' ‚Üí ')}\n`;
            } else {
                prompt += `  ${student}: ${answers}\n`;
            }
        });
        prompt += `\n`;
    });
    
    prompt += `Please summarize:\n`;
    prompt += `1. Overall class progress\n`;
    prompt += `2. Students who showed significant improvement\n`;
    prompt += `3. Students who need additional attention\n`;
    prompt += `4. Topics that remain unclear\n`;
    prompt += `5. Recommendations for next lesson\n`;
    
    return prompt;
}
```

### 12.3 Private Messaging System

```javascript
// Teacher sends private message to specific student
async sendPrivateMessage() {
    const modal = document.getElementById('privateMessageModal');
    const content = document.getElementById('privateMessageText').value.trim();
    const studentUid = modal.dataset.studentUid; // This is the session-based studentId
    
    if (!content || !studentUid) return;
    
    try {
        await this.sdk.sendPrivateMessage(content, studentUid);
        this.addActivity(`‚úâÔ∏è Private message sent to ${document.getElementById('privateMessageRecipient').textContent}`);
        modal.classList.remove('visible');
    } catch (error) {
        console.error("üî• Error sending private message:", error);
    }
}

// SDK handles private message sending
async sendPrivateMessage(content, recipientUid) {
    const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                     .collection('messages');
    await messagesCollection.add({
        sender: this.playerName,
        sender_uid: this.auth.currentUser?.uid || this.studentId,
        recipient_uid: recipientUid, // Session-based student ID
        content: content,
        timestamp: firebase.firestore.FieldValue.serverTimestamp(),
        is_teacher: this.isTeacher,
        is_private: true
    });
}
```

### 12.4 Floating UI Components (Student)

```javascript
// Create draggable chat interface for students
createChatInterface() {
    if (this.isTeacher) return; // Only for students
    
    // Create floating chat button
    this.chatButton = document.createElement('button');
    this.chatButton.id = 'classroom-chat-btn';
    this.chatButton.innerHTML = 'üí¨';
    this.chatButton.style.cssText = 'position: fixed; bottom: 20px; right: 20px; width: 60px; height: 60px; border-radius: 50%; background: #007bff; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 1000;';
    this.chatButton.onclick = () => this.toggleChat();
    this.makeDraggable(this.chatButton);
    document.body.appendChild(this.chatButton);

    // Create chat container
    this.chatContainer = document.createElement('div');
    this.chatContainer.id = 'classroom-chat-container';
    this.chatContainer.style.cssText = 'position: fixed; bottom: 100px; right: 20px; width: 350px; height: 400px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;';
    
    // Chat header with drag functionality
    const chatHeader = document.createElement('div');
    chatHeader.style.cssText = 'background: #007bff; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
    chatHeader.innerHTML = `
        <span>üí¨ Class Chat</span>
        <button id="chat-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer;">‚àí</button>
    `;
    
    this.makeDraggable(this.chatContainer, chatHeader);
    // ... rest of chat interface setup
}

// Make UI elements draggable
makeDraggable(element, dragHandle = null) {
    const handle = dragHandle || element;
    handle.addEventListener('mousedown', (e) => {
        e.preventDefault();
        let startX = e.clientX - element.offsetLeft;
        let startY = e.clientY - element.offsetTop;
        
        const handleMouseMove = (me) => {
            element.style.left = (me.clientX - startX) + 'px';
            element.style.top = (me.clientY - startY) + 'px';
        };
        
        const handleMouseUp = () => {
            document.removeEventListener('mousemove', handleMouseMove);
            document.removeEventListener('mouseup', handleMouseUp);
        };
        
        document.addEventListener('mousemove', handleMouseMove);
        document.addEventListener('mouseup', handleMouseUp);
    });
}
```

---

## 13. Code Quality and Error Handling

### 13.1 Message Deduplication

```javascript
// Prevent duplicate message display
addSingleMessage(message) {
    // Create unique message ID for deduplication
    const messageId = message.timestamp?.seconds + '_' + message.sender_uid + '_' + message.content.substring(0, 20);
    const existingMessage = messagesArea.querySelector(`[data-message-id="${messageId}"]`);
    if (existingMessage) {
        console.log('‚ö†Ô∏è Duplicate message prevented:', message.content.substring(0, 30));
        return;
    }

    // Create message element with unique identifier
    const messageDiv = document.createElement('div');
    messageDiv.setAttribute('data-message-id', messageId);
    // ... rest of message creation
}
```

### 13.2 Room Validation

```javascript
// Validate room exists before joining (Student)
async checkRoomExists(roomCode) {
    const roomRef = this.db.collection('rooms').doc(roomCode);
    const doc = await roomRef.get();
    return doc.exists;
}

// Enhanced error handling in student login
handleLogin: async function(event) {
    event.preventDefault();
    const loginButton = event.target.querySelector('button');
    
    loginButton.textContent = 'Joining...';
    loginButton.disabled = true;

    try {
        this.classroom = new ClassroomSDK();
        const studentId = this.getOrCreateStudentId();
        await this.classroom.init('student-app', studentId, playerName, roomCode);
        
        // Success - switch to main interface
        document.getElementById('login-container').style.display = 'none';
        document.getElementById('main-container').style.display = 'block';
        
    } catch (error) {
        // Clear error feedback and restore button
        alert(`Failed to join the room: ${error.message}\nPlease check the room code and try again.`);
        loginButton.textContent = 'Join Lesson';
        loginButton.disabled = false;
    }
}
```

### 13.3 Configuration Fallbacks

```javascript
// Robust config loading with fallbacks (Legacy support)
async loadConfigData() {
    try {
        const response = await fetch('config.json');
        if (!response.ok) throw new Error('Network response was not ok');
        this.config = await response.json();
        this.debugLog('‚úÖ Config file loaded successfully', this.config);
    } catch (error) {
        console.error('üî• Error loading config file:', error);
        // Fallback configuration
        this.config = { 
            studentAppUrl: 'student-app.html', 
            games: [] 
        };
    }
}
```

### 13.4 Authentication State Management (v4.1)

```javascript
// Simplified teacher dashboard initialization
async init(user) {
    if (!user) {
        console.error("‚ùå CRITICAL: TeacherDashboard.init called without a user.");
        return;
    }
    
    console.log(`üöÄ Initializing dashboard for confirmed user: ${user.uid}`);
    
    try {
        // Core initialization with authenticated user
        this.sdk = new ClassroomSDK();
        await this.loadConfigData();
        await this.sdk.createTeacherProfile(user);
        await this.sdk.init('teacher-dashboard', user);
        
        // Setup UI and listeners
        this.setupEventListeners();
        this.sdk.createAIInterface();
        this.initializeTeacherAI();
        
        // Real-time listeners
        this.sdk.listenForStudents(this.updateStudentsList.bind(this));
        this.sdk.listenForMessages(this.addMessage.bind(this));
        this.sdk.listenForRoomUpdates(this.handleRoomUpdates.bind(this));
        
        this.updateConnectionStatus(true);
        this.updateRoomDisplay();
        
    } catch (error) {
        console.error("üî• Critical initialization error:", error);
        this.updateConnectionStatus(false);
    }
}
```

---

## 14. Technologies and Dependencies

### 14.1 Frontend Stack
- **HTML5 + CSS3** - Responsive interface with LTR English layout
- **Vanilla JavaScript ES6+** - No external frameworks, modern JS features
- **Firebase SDK v9 (compat)** - Real-time database and authentication
- **CSS Grid + Flexbox** - Advanced responsive layouts

### 14.2 Backend Services
- **Firebase Firestore** - Real-time NoSQL database with offline support
- **Firebase Cloud Functions** - AI services (`askAI`, `askChatGPT`) in europe-west1
- **Firebase Authentication** - Google/Microsoft OAuth providers (v4.1)
- **Firebase Hosting** - Static file serving with CDN

### 14.3 External Integrations
- **QR Code API** - `https://api.qrserver.com/v1/create-qr-code/`
- **Multiple AI Providers** - ChatGPT, Claude, Gemini via Cloud Functions
- **Educational Content** - Any web-based content via iframe embedding

---

## 15. Development and Deployment

### 15.1 Build Process

```python
# build.py - Production minification
SOURCE_DIR = 'public'
BUILD_DIR = 'BUILD'

def main():
    # Clean and setup
    if os.path.exists(BUILD_DIR):
        shutil.rmtree(BUILD_DIR)
    os.makedirs(BUILD_DIR, exist_ok=True)
    
    # Process files
    for root, _, files in os.walk(SOURCE_DIR):
        for filename in files:
            if filename.endswith('.js'):
                # Minify JavaScript with Terser
                run_command([TERSER_CMD, source_path, '-o', dest_path, '-c', '-m'])
            elif filename.endswith(('.css', '.html')):
                # Minify CSS and HTML with Minify
                # ... minification process
            else:
                # Copy other files as-is
                shutil.copy2(source_path, dest_path)
```

### 15.2 File Collection for Development

```powershell
# collect2txt.ps1 - Collect all project files for analysis
$filesToCollect = @(
    "public/index.html",
    "public/student-app.html",
    "public/firebase-config.js",
    "public/config.json",
    "public/js/teacher-dashboard.js",
    "public/js/student-app.js", 
    "public/js/ClassroomSDK.js",
    "public/css/teacher-dashboard.css",
    "public/css/student-app.css"
)

# Creates single text file with all project code
foreach ($file in $filesToCollect) {
    if (Test-Path $file) {
        $content = Get-Content -Path $file -Raw -Encoding UTF8
        Add-Content -Path $outputFile -Value $content -Encoding UTF8
    }
}
```

### 15.3 Authentication Setup (v4.1)

```javascript
// Firebase Console Configuration
// 1. Enable Google and Microsoft OAuth providers
// 2. Add authorized domains: localhost, 127.0.0.1, production domain
// 3. Configure OAuth consent screen
// 4. Deploy updated security rules

// Firebase Security Rules Deployment
firebase deploy --only firestore:rules

// Authentication Flow Testing
// 1. Test Google OAuth flow
// 2. Test Microsoft OAuth flow  
// 3. Verify teacher profile creation
// 4. Test session persistence
// 5. Verify room association with teacher UID
```

---

## 16. Summary and Key Insights

### 16.1 Core Architecture Principles
1. **Authenticated Teacher System** - Provider-based authentication with permanent profiles
2. **Session-Based Student Access** - No Firebase authentication required for students
3. **Real-Time State Synchronization** - Centralized state management via Firestore
4. **Content Agnostic** - Any web content can be classroom-enabled via iframe
5. **Teacher-Centric Control** - All administrative functions require teacher authentication
6. **Progressive Enhancement** - Works without AI, enhanced with AI when available
7. **Gatekeeper Pattern** - Prevents Race Conditions in authentication flow

### 16.2 Security Model (v4.1)
- **Teacher**: Firebase Provider Auth (Google/Microsoft) with stable UID
- **Student**: Browser sessionStorage with temporary IDs
- **Data**: Teacher data is private and persistent, room data is ephemeral and accessible during class
- **Privacy**: Client-side message filtering for private communications
- **Access Control**: Firestore security rules enforce teacher-only access to personal data

### 16.3 Key Features Summary
- **Personal Content Libraries** - Each teacher manages their own curated content
- **AI Context Management** - Teachers can apply lesson-specific AI prompts
- **Real-time Polling** - Multiple poll types with instant results
- **Private Messaging** - Secure teacher-student communication
- **Comprehensive Analytics** - AI-powered lesson summaries and insights
- **Floating UI Components** - Draggable, persistent tools for students
- **Race Condition Prevention** - Gatekeeper pattern ensures reliable authentication

### 16.4 Real-World Deployment
The system is deployed at `https://class-board-ad64e.web.app/` with:
- Static hosting via Firebase Hosting
- Real-time database via Firestore (europe-west1)
- Cloud Functions for AI services
- OAuth authentication for teachers
- QR code generation for easy student access

### 16.5 Unique Value Proposition
fireClass Control doesn't replace existing educational content‚Äîit enhances any web-based content with classroom infrastructure. Teachers can use PhET simulations, Google's Teachable Machine, or any educational website, and instantly gain:
- Secure teacher authentication and personal profiles
- Real-time student monitoring with persistent data
- Interactive polling and feedback with AI analysis
- Private messaging and communication tools
- Comprehensive lesson analytics and reporting
- Personal content libraries and AI context management

The v4.1 platform bridges the gap between "great online content" and "classroom-ready tools" while providing teachers with a secure, personalized environment for managing their digital classroom activities.

### 16.6 Critical v4.1 Improvements
1. **Authentication Reliability** - Gatekeeper pattern eliminates login loops
2. **Teacher Profiles** - Persistent, authenticated teacher accounts
3. **Personal Content** - Each teacher manages their own content library
4. **AI Context Control** - Lesson-specific AI prompts for focused learning
5. **Security Enhancement** - Provider-based authentication with proper access controls
6. **Data Persistence** - Teacher data survives across sessions and devices

**This documentation reflects the actual codebase implementation as of July 2025, ensuring complete alignment between specification and working code, with particular emphasis on the critical authentication improvements that ensure system reliability and teacher confidence.**

================================================================================
File 2/11: functions\index.js
================================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */
// functions/index.js - askAI ◊õ◊§◊ï◊†◊ß◊¶◊ô◊î ◊û◊®◊õ◊ñ◊ô◊™ ◊©◊ß◊ï◊®◊ê◊™ ◊ú◊î◊í◊ì◊®◊ï◊™ ◊î◊ó◊ì◊®

const {onCall} = require("firebase-functions/v2/https");
const {onSchedule} = require("firebase-functions/v2/scheduler");
const {HttpsError} = require("firebase-functions/v2/https");
const {defineSecret} = require("firebase-functions/params");
const admin = require("firebase-admin");
const https = require("https");



// Initialize Firebase Admin SDK
if (admin.apps.length === 0) {
  admin.initializeApp();
}
//
//========================= DEPLOYMENT AREA ===================================
const DEPLOY_REGION = "us-central1";
//const DEPLOY_REGION = "europe-west1";
//=============================================================================
//
// Define secrets
const geminiApiKey = defineSecret("GEMINI_API_KEY");
const claudeApiKey = defineSecret("CLAUDE_API_KEY");
const openaiApiKey = defineSecret("OPENAI_API_KEY");

/**
 * ◊§◊ï◊†◊ß◊¶◊ô◊î ◊û◊®◊õ◊ñ◊ô◊™ ◊ú◊õ◊ú ◊ß◊®◊ô◊ê◊ï◊™ AI - ◊ß◊ï◊®◊ê◊™ ◊ú◊î◊í◊ì◊®◊ï◊™ ◊î◊ó◊ì◊® ◊ï◊û◊ó◊ú◊ô◊ò◊î ◊ê◊ô◊ñ◊î ◊û◊ï◊ì◊ú ◊ú◊î◊§◊¢◊ô◊ú
 */
exports.askAI = onCall({
  region: DEPLOY_REGION,
  secrets: [geminiApiKey, claudeApiKey, openaiApiKey]
}, async (request) => {
  console.log("üéØ askAI v2 called with:", request.data);

  if (!request.auth) {
    throw new HttpsError("unauthenticated", "Authentication required");
  }

  let prompt = request.data.prompt;
  const roomCode = request.data.roomCode;
  const language = request.data.language;
  const bypassContext = request.data.bypassContext || false;

  if (!prompt || !roomCode) {
    throw new HttpsError("invalid-argument", "Prompt and roomCode are required");
  }

  try {
    const db = admin.firestore();
    const roomRef = db.collection('rooms').doc(roomCode);
    const roomDoc = await roomRef.get();

    if (!roomDoc.exists) {
      throw new HttpsError("not-found", "Room not found");
    }

    const roomData = roomDoc.data();
    const teacherUid = roomData.teacher_uid;
    const isTeacherRequest = request.auth.uid === teacherUid;

    if (!isTeacherRequest && !roomData.settings?.ai_active) {
      throw new HttpsError("failed-precondition", "AI is disabled for this classroom");
    }

    const selectedModel = roomData.settings?.ai_model || 'gemini';
    let finalPrompt = prompt;

    // Apply context ONLY if it's a student request AND context is not bypassed
    if (!isTeacherRequest && !bypassContext) {
        const activePromptId = roomData.settings?.active_prompt_id;
        if (activePromptId) {
            const promptDoc = await db.collection('teachers').doc(teacherUid).collection('personal_prompts').doc(activePromptId).get();
            if (promptDoc.exists) {
                const systemPrompt = promptDoc.data().prompt;
                finalPrompt = `${systemPrompt}\n\nStudent's question: "${prompt}"`;
                console.log(`Applying context: ${promptDoc.data().title}`);
            }
        }
    } else {
        console.log("Context bypassed for teacher or explicit request.");
    }

    // Language wrapping
    if (language === 'he') {
        finalPrompt = `Please answer the following prompt in Hebrew:\n\n"${finalPrompt}"`;
    }

    let result;
    switch (selectedModel) {
      case 'chatgpt': result = await callChatGPT(finalPrompt); break;
      case 'claude': result = await callClaude(finalPrompt); break;
      default: result = await callGemini(finalPrompt); break;
    }

    await roomRef.update({ 'last_activity': admin.firestore.FieldValue.serverTimestamp() });

    return { result: result.text, model: result.modelName };

  } catch (error) {
    console.error("‚ùå Error in askAI:", error);
    if (error instanceof HttpsError) throw error;
    throw new HttpsError("internal", "Internal server error");
  }
});

/**
 * ◊§◊ï◊†◊ß◊¶◊ô◊î ◊ú◊©◊ú◊ô◊ó◊™ ◊™◊©◊ï◊ë◊ï◊™ ◊°◊ß◊® - ◊û◊ê◊§◊©◊®◊™ ◊ú◊™◊ú◊û◊ô◊ì◊ô◊ù ◊ú◊©◊ú◊ï◊ó ◊™◊©◊ï◊ë◊ï◊™ ◊ú◊ú◊ê ◊ê◊ô◊û◊ï◊™
 */
exports.submitPollAnswer = onCall({
  region: DEPLOY_REGION,
  allow: "all" // ◊û◊ê◊§◊©◊® ◊ß◊®◊ô◊ê◊ï◊™ ◊û◊û◊©◊™◊û◊©◊ô◊ù ◊ú◊ê ◊û◊ê◊ï◊û◊™◊ô◊ù (◊™◊ú◊û◊ô◊ì◊ô◊ù)
}, async (request) => {
  const { roomCode, studentId, playerName, answer } = request.data;

  if (!roomCode || !studentId || !playerName || answer === undefined) {
    throw new HttpsError("invalid-argument", "Missing required fields.");
  }

  const db = admin.firestore();
  const roomRef = db.collection("rooms").doc(roomCode);

  try {
    await db.runTransaction(async (transaction) => {
      const roomDoc = await transaction.get(roomRef);
      if (!roomDoc.exists) {
        throw new HttpsError("not-found", `Room ${roomCode} does not exist.`);
      }

      const currentPoll = roomDoc.data().settings.currentPoll;
      if (!currentPoll || !currentPoll.isActive) {
        return; // No active poll to answer
      }

      const updateData = {
        'settings.last_poll_activity': admin.firestore.FieldValue.serverTimestamp()
      };

      if (currentPoll.type === 'open_text') {
        const studentIdentifier = playerName.replace(/[.#$[\]]/g, '_');
        const responseField = `settings.currentPoll.responses.${studentIdentifier}`;
        updateData[responseField] = admin.firestore.FieldValue.arrayUnion(answer);
      } else {
        const responseField = `settings.currentPoll.responses.${studentId}`;
        updateData[responseField] = answer;
      }

      transaction.update(roomRef, updateData);
    });

    return { success: true };

  } catch (error) {
    console.error(`Error in submitPollAnswer for room ${roomCode}:`, error);
    if (error instanceof HttpsError) throw error;
    throw new HttpsError("internal", "Failed to submit answer.");
  }
});

/**
 * ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ ◊¢◊ñ◊® ◊ú◊ß◊®◊ô◊ê◊î ◊ú-ChatGPT
 */
async function callChatGPT(prompt) {
  const apiKey = openaiApiKey.value();
  if (!apiKey) {
    throw new HttpsError("failed-precondition", "OpenAI API key not configured");
  }

  console.log("ü§ñ Calling ChatGPT...");

  const requestBody = JSON.stringify({
    model: "gpt-4",
    messages: [{
      role: "user",
      content: prompt
    }],
    max_tokens: 1000
  });

  return new Promise((resolve, reject) => {
    const req = https.request("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      }
    }, (res) => {
      console.log("üì® ChatGPT response status:", res.statusCode);
      
      let responseBody = "";
      res.on("data", (chunk) => responseBody += chunk);
      res.on("end", () => {
        try {
          const response = JSON.parse(responseBody);
          if (response.error) {
            console.error("‚ùå ChatGPT API error:", response.error);
            reject(new HttpsError("internal", `ChatGPT error: ${response.error.message}`));
            return;
          }
          
          const text = response.choices?.[0]?.message?.content;
          if (!text) {
            console.error("‚ùå Invalid ChatGPT response format:", response);
            reject(new HttpsError("internal", "Invalid ChatGPT response format"));
            return;
          }
          
          console.log("‚úÖ ChatGPT response success, length:", text.length);
          resolve({ text, modelName: "ChatGPT" });
        } catch (e) {
          console.error("‚ùå Failed to parse ChatGPT response:", e);
          reject(new HttpsError("internal", "Failed to parse ChatGPT response"));
        }
      });
    });

    req.on("error", (error) => {
      console.error("‚ùå ChatGPT request error:", error);
      reject(new HttpsError("internal", "Failed to connect to ChatGPT"));
    });

    req.write(requestBody);
    req.end();
  });
}

/**
 * ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ ◊¢◊ñ◊® ◊ú◊ß◊®◊ô◊ê◊î ◊ú-Claude
 */
async function callClaude(prompt) {
  const apiKey = claudeApiKey.value();
  if (!apiKey) {
    throw new HttpsError("failed-precondition", "Claude API key not configured");
  }

  console.log("ü§ñ Calling Claude...");

  const requestBody = JSON.stringify({
    model: "claude-3-sonnet-20240229",
    max_tokens: 1000,
    messages: [{
      role: "user",
      content: prompt
    }]
  });

  return new Promise((resolve, reject) => {
    const req = https.request("https://api.anthropic.com/v1/messages", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": apiKey,
        "anthropic-version": "2023-06-01"
      }
    }, (res) => {
      console.log("üì® Claude response status:", res.statusCode);
      
      let responseBody = "";
      res.on("data", (chunk) => responseBody += chunk);
      res.on("end", () => {
        try {
          const response = JSON.parse(responseBody);
          if (response.error) {
            console.error("‚ùå Claude API error:", response.error);
            reject(new HttpsError("internal", `Claude error: ${response.error.message}`));
            return;
          }
          
          const text = response.content?.[0]?.text;
          if (!text) {
            console.error("‚ùå Invalid Claude response format:", response);
            reject(new HttpsError("internal", "Invalid Claude response format"));
            return;
          }
          
          console.log("‚úÖ Claude response success, length:", text.length);
          resolve({ text, modelName: "Claude" });
        } catch (e) {
          console.error("‚ùå Failed to parse Claude response:", e);
          reject(new HttpsError("internal", "Failed to parse Claude response"));
        }
      });
    });

    req.on("error", (error) => {
      console.error("‚ùå Claude request error:", error);
      reject(new HttpsError("internal", "Failed to connect to Claude"));
    });

    req.write(requestBody);
    req.end();
  });
}

/**
 * ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ ◊¢◊ñ◊® ◊ú◊ß◊®◊ô◊ê◊î ◊ú-Gemini
 */
async function callGemini(prompt) {
  const apiKey = geminiApiKey.value();
  if (!apiKey) {
    throw new HttpsError("failed-precondition", "Gemini API key not configured");
  }

  console.log("ü§ñ Calling Gemini using v1beta endpoint...");

  const geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${apiKey}`;
  
  const requestBody = JSON.stringify({
    contents: [{parts: [{text: prompt}]}],
  });

  return new Promise((resolve, reject) => {
    const req = https.request(geminiUrl, {
      method: "POST",
      headers: {"Content-Type": "application/json"}
    }, (res) => {
      console.log("üì® Gemini response status:", res.statusCode);
      
      let responseBody = "";
      res.on("data", (chunk) => responseBody += chunk);
      res.on("end", () => {
        try {
          const response = JSON.parse(responseBody);
          if (response.error) {
            console.error("‚ùå Gemini API error:", response.error);
            reject(new HttpsError("internal", `Gemini error: ${response.error.message}`));
            return;
          }
          
          const text = response.candidates?.[0]?.content?.parts?.[0]?.text;
          if (!text) {
            console.error("‚ùå Invalid Gemini response format:", response);
            reject(new HttpsError("internal", "Invalid Gemini response format"));
            return;
          }
          
          console.log("‚úÖ Gemini response success, length:", text.length);
          resolve({ text, modelName: "Gemini" });
        } catch (e) {
          console.error("‚ùå Failed to parse Gemini response:", e);
          reject(new HttpsError("internal", "Failed to parse Gemini response"));
        }
      });
    });

    req.on("error", (error) => {
      console.error("‚ùå Gemini request error:", error);
      reject(new HttpsError("internal", "Failed to connect to Gemini"));
    });

    req.write(requestBody);
    req.end();
  });
}

/**
 * ◊î◊§◊ï◊†◊ß◊¶◊ô◊ï◊™ ◊î◊ô◊©◊†◊ï◊™ - ◊¢◊ì◊ô◊ô◊ü ◊†◊©◊ê◊®◊ï◊™ ◊ú◊™◊ê◊ô◊û◊ï◊™ ◊ú◊ê◊ó◊ï◊® (◊ê◊ù ◊¶◊®◊ô◊ö ◊ú◊ë◊ì◊ô◊ß◊ï◊™)
 * ◊ê◊ë◊ú ◊îClient ◊ú◊ê ◊ê◊û◊ï◊® ◊ú◊ß◊®◊ï◊ê ◊ú◊î◊ü ◊ô◊©◊ô◊®◊ï◊™ ◊ô◊ï◊™◊®
 */
exports.askGemini = onCall({
  region: DEPLOY_REGION,
  secrets: [geminiApiKey]
}, async (request) => {
  console.log("üîç askGemini called directly (deprecated, use askAI instead)");
  const prompt = request.data.prompt;
  if (!prompt) {
    throw new HttpsError("invalid-argument", "Prompt is required");
  }
  const result = await callGemini(prompt);
  return { result: result.text, model: result.modelName };
});

exports.askClaude = onCall({
  region: DEPLOY_REGION,
  secrets: [claudeApiKey]
}, async (request) => {
  console.log("üîç askClaude called directly (deprecated, use askAI instead)");
  const prompt = request.data.prompt;
  if (!prompt) {
    throw new HttpsError("invalid-argument", "Prompt is required");
  }
  const result = await callClaude(prompt);
  return { result: result.text, model: result.modelName };
});

exports.askChatGPT = onCall({
  region: DEPLOY_REGION,
  secrets: [openaiApiKey]
}, async (request) => {
  console.log("üîç askChatGPT called directly (deprecated, use askAI instead)");
  const prompt = request.data.prompt;
  if (!prompt) {
    throw new HttpsError("invalid-argument", "Prompt is required");
  }
  const result = await callChatGPT(prompt);
  return { result: result.text, model: result.modelName };
});

/**
 * Scheduled function to clean up old classrooms.
 * Runs every day at 2:00 AM Israel time.
 */
exports.cleanupOldClassrooms = onSchedule({
  schedule: "0 2 * * *",
  timeZone: "Asia/Jerusalem",
  region: DEPLOY_REGION
}, async (event) => {
  console.log("üßπ Starting cleanup of old classrooms...");
  
  const db = admin.firestore();

  const oneWeekAgo = new Date();
  oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

  console.log("üîç Looking for rooms older than:", oneWeekAgo);

  const query = db.collection("rooms")
      .where("last_activity", "<", oneWeekAgo);

  const oldRoomsSnapshot = await query.get();
  let deletedCount = 0;

  if (oldRoomsSnapshot.empty) {
    console.log("‚úÖ No old rooms to delete.");
    return {deletedCount: 0};
  }

  const deletePromises = [];
  oldRoomsSnapshot.forEach((doc) => {
    console.log(`üóëÔ∏è Scheduling deletion for room: ${doc.id}`);
    deletePromises.push(doc.ref.delete());
    deletedCount++;
  });

  await Promise.all(deletePromises);
  console.log(`‚úÖ Cleanup completed. Deleted ${deletedCount} old rooms.`);
  return {deletedCount};
});

================================================================================
File 3/11: public\js\ClassroomSDK.js
================================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */

// SIMPLIFIED CLASSROOM SDK - 4-DIGIT ROOM CODES ONLY!

class ClassroomSDK {
    constructor() {
        try {
            this.db = firebase.firestore();
            this.auth = firebase.auth();
            this.functions = firebase.app().functions();
            console.log('‚úÖ Firebase services initialized in constructor.');
        } catch (e) {
            console.error("‚ùå CRITICAL: Could not initialize Firebase services.", e);
            alert("Fatal Error: Could not connect to Firebase services. Please refresh.");
        } 
        

        this.playerName = null;
        this.roomCode = null; // 4-digit room code
        this.isTeacher = false;
        this.isInitialized = false;
        this.studentId = null;
        this.isAiActiveForClass = false;

        // UI components
        this.chatButton = null;
        this.chatContainer = null;
        this.chatMessages = null;
        this.chatInput = null;
        this.aiButton = null;
        this.aiContainer = null;
        this.aiMessages = null;
        this.aiInput = null;
        
        // Listeners
        this.studentsListener = null;
        this.messagesListener = null;
        this.roomListener = null;
    }

    // Generate unique 4-digit room code
    async generateUniqueRoomCode() {
        let attempts = 0;
        const maxAttempts = 20; // Maximum 20 attempts
        
        while (attempts < maxAttempts) {
            // Generate random 4-digit code
            const roomCode = Math.floor(1000 + Math.random() * 9000).toString();
            
            // Check that code doesn't exist
            const roomRef = this.db.collection('rooms').doc(roomCode);
            const doc = await roomRef.get();
            
            if (!doc.exists) {
                console.log(`‚úÖ Found unique room code: ${roomCode}`);
                return roomCode;
            }
            
            console.log(`üîÑ Room code ${roomCode} exists, trying next...`);
            attempts++;
        }
        
        // If not found after 20 attempts, return random code
        const randomCode = Math.floor(1000 + Math.random() * 9000).toString();
        console.log(`‚úÖ Generated random room code: ${randomCode}`);
        return randomCode;
    }

    // SIMPLIFIED INIT - 4-digit room codes only!
    async init(appName, userOrStudentId, playerName, roomCode = null) {
        console.log(`üöÄ Initializing ${appName}...`);
        this.appName = appName;
        this.playerName = playerName;

        if (appName === 'teacher-dashboard') {
            // ◊™◊î◊ú◊ô◊ö ◊î◊ê◊™◊ó◊ï◊ú ◊©◊ú ◊î◊û◊ï◊®◊î
            this.isTeacher = true;
            this.playerName = "Teacher";
            this.roomCode = await this.generateUniqueRoomCode();
            await this.initializeRoom(userOrStudentId.uid); // Pass the teacher's UID

        } else if (appName === 'student-app' && roomCode) {
            // ◊™◊î◊ú◊ô◊ö ◊î◊ê◊™◊ó◊ï◊ú ◊©◊ú ◊î◊™◊ú◊û◊ô◊ì
            this.isTeacher = false;
            this.roomCode = roomCode;
            this.studentId = userOrStudentId; // This is the student's session ID

            // ◊ï◊ì◊ê ◊©◊î◊ó◊ì◊® ◊ß◊ô◊ô◊ù ◊ú◊§◊†◊ô ◊†◊ô◊°◊ô◊ï◊ü ◊î◊¶◊ò◊®◊§◊ï◊™
            const roomExists = await this.checkRoomExists(roomCode);
            if (!roomExists) {
                throw new Error(`Room with code ${roomCode} does not exist.`);
            }
            await this.joinRoom(this.studentId, this.playerName);

        } else {
            throw new Error('Invalid initialization parameters.');
        }

        this.isInitialized = true;
        console.log(`‚úÖ ${appName} initialized successfully for room: ${this.roomCode}`);
    }

    // ◊î◊ï◊°◊£ ◊ê◊™ ◊©◊™◊ô ◊î◊§◊ï◊†◊ß◊¶◊ô◊ï◊™ ◊î◊ê◊ú◊î ◊ú◊ß◊ú◊ê◊°
    async checkRoomExists(roomCode) {
        const roomRef = this.db.collection('rooms').doc(roomCode);
        const doc = await roomRef.get();
        return doc.exists;
    }

    // ◊¢◊ì◊õ◊ï◊ü ◊ß◊ú ◊ú◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ initializeRoom
    async initializeRoom(teacherUid) {
        const roomRef = this.db.collection('rooms').doc(this.roomCode);
        await roomRef.set({
            room_code: this.roomCode,
            created_at: firebase.firestore.FieldValue.serverTimestamp(),
            teacher_uid: teacherUid,
            settings: {
                ai_active: false,
                ai_model: 'chatgpt',
                current_command: null,
                currentPoll: { isActive: false }
            }
        });
    }

    // ◊¢◊ì◊õ◊ï◊ü ◊ß◊ú ◊ú◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ joinRoom
    async joinRoom(studentId, playerName) {
        const studentRef = this.db.collection('rooms').doc(this.roomCode)
                                 .collection('students').doc(studentId);
        await studentRef.set({
            uid: studentId,
            name: playerName,
            joined_at: firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // Listen for students
    listenForStudents(callback) {
        if (!this.roomCode) return;
        
        const studentsCollection = this.db.collection('rooms').doc(this.roomCode)
                                         .collection('students');
        
        this.studentsListener = studentsCollection.onSnapshot(snapshot => {
            const students = [];
            snapshot.forEach(doc => {
                students.push(doc.data());
            });
            console.log('üë®‚Äçüéì Students updated:', students.length);
            
            if (typeof callback === 'function') {
                callback(students);
            }
        }, error => {
            console.error("üî• Error listening for students:", error);
        });
    }

    // Listen for messages
    listenForMessages(callback) {
        if (!this.roomCode) return;

        const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                         .collection('messages')
                                         .orderBy('timestamp');

        this.messagesListener = messagesCollection.onSnapshot(snapshot => {
            const newMessages = [];
            snapshot.docChanges().forEach(change => {
                if (change.type === "added") {
                    const msg = change.doc.data();
                    const currentUserId = this.isTeacher ? this.auth.currentUser?.uid : this.studentId;
                    const isPrivate = msg.is_private === true;
                    const isRecipient = msg.recipient_uid === currentUserId;
                    const isSender = msg.sender_uid === currentUserId;

                    if (!isPrivate || this.isTeacher || isRecipient || isSender) {
                        newMessages.push(msg);
                    }
                }
            });

            if (newMessages.length > 0 && typeof callback === 'function') {
                callback(newMessages);
            }
        }, error => {
            console.error("üî• Error listening for messages:", error);
        });
    }

    // Listen for room updates (commands, AI, etc.)
    listenForRoomUpdates(callback) {
        if (!this.roomCode) return;
        const roomRef = this.db.collection('rooms').doc(this.roomCode);

        this.roomListener = roomRef.onSnapshot(doc => {
            if (doc.exists && typeof callback === 'function') {
                // ◊©◊ú◊ë ◊ß◊®◊ô◊ò◊ô: ◊©◊ú◊ó ◊ê◊™ ◊õ◊ú ◊ê◊ï◊ë◊ô◊ô◊ß◊ò ◊î◊†◊™◊ï◊†◊ô◊ù, ◊ï◊™◊ü ◊ú◊ê◊§◊ú◊ô◊ß◊¶◊ô◊î ◊ú◊î◊ó◊ú◊ô◊ò
                callback(doc.data());
            }
        }, error => {
            console.error("üî• Error listening for room updates:", error);
        });
    }

    // Send message
    async sendMessage(content) {
        if (!content || !content.trim() || !this.roomCode) return;

        try {
            const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                             .collection('messages');
            await messagesCollection.add({
                sender: this.playerName || "Teacher",
                sender_uid: this.isTeacher ? this.auth.currentUser?.uid : this.studentId,
                content: content,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                is_teacher: this.isTeacher
            });
        } catch (error) {
            console.error('üî• Error sending message:', error);
            throw error;
        }
    }

    // Send command (teacher only)
    async sendCommand(commandName, payload = {}) {
        const roomRef = this.db.collection('rooms').doc(this.roomCode);
        await roomRef.update({
            'settings.current_command': {
                command: commandName,
                payload: payload,
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            },
            'last_activity': firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // Toggle AI mode (teacher only)
    async toggleAI() {
        console.log('[DIAGNOSTIC] 1. toggleAI function started.');
        const roomRef = this.db.collection('rooms').doc(this.roomCode);

        try {
            const doc = await roomRef.get();
            const currentAI = doc.exists ? doc.data().settings?.ai_active : false;
            console.log(`[DIAGNOSTIC] 2. Read from DB. currentAI is: ${currentAI}`);

            const newValue = !currentAI;
            console.log(`[DIAGNOSTIC] 3. Value to be written to DB is: ${newValue}`);

            await roomRef.update({
                'settings.ai_active': newValue
            });

            console.log('[DIAGNOSTIC] 4. SUCCESS: roomRef.update command finished without error.');
            return newValue;

        } catch (error) {
            // ◊ê◊ù ◊™◊î◊ô◊î ◊©◊í◊ô◊ê◊î ◊õ◊ú◊©◊î◊ô ◊ë◊§◊¢◊ï◊ú◊™ ◊î◊õ◊™◊ô◊ë◊î, ◊†◊®◊ê◊î ◊ê◊ï◊™◊î ◊õ◊ê◊ü
            console.error('[DIAGNOSTIC] 5. CRITICAL FAILURE: Error during toggleAI process.', error);
            // ◊ñ◊®◊ï◊ß ◊ê◊™ ◊î◊©◊í◊ô◊ê◊î ◊î◊ú◊ê◊î ◊õ◊ì◊ô ◊©◊î◊ß◊ï◊ì ◊©◊ß◊®◊ê ◊ú◊§◊ï◊†◊ß◊¶◊ô◊î ◊ô◊ì◊¢ ◊©◊î◊ô◊ê ◊†◊õ◊©◊ú◊î
            throw error;
        }
    }

    // Cleanup
    cleanup() {
        if (this.studentsListener) {
            this.studentsListener();
            this.studentsListener = null;
        }
        if (this.messagesListener) {
            this.messagesListener();
            this.messagesListener = null;
        }
        if (this.roomListener) {
            this.roomListener();
            this.roomListener = null;
        }
        if (this.roomListener_Polls) {
            this.roomListener_Polls();
            this.roomListener_Polls = null;
        }
    }

    // Returns room code
    getRoomCode() {
        return this.roomCode;
    }

    // ========== CHAT INTERFACE ==========
    createChatInterface() {
        // Show chat interface only for students
        if (this.isTeacher) {
            console.log("Teacher view: Floating chat interface disabled.");
            return; 
        }

        if (document.getElementById('classroom-chat-btn')) return;
        
        this.chatButton = document.createElement('button');
        this.chatButton.id = 'classroom-chat-btn';
        this.chatButton.innerHTML = 'üí¨';
        this.chatButton.style.cssText = 'position: fixed; bottom: 20px; right: 20px; width: 60px; height: 60px; border-radius: 50%; background: #007bff; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 1000;';
        this.chatButton.onclick = () => this.toggleChat();
        this.makeDraggable(this.chatButton);
        document.body.appendChild(this.chatButton);

        this.chatContainer = document.createElement('div');
        this.chatContainer.id = 'classroom-chat-container';
        this.chatContainer.style.cssText = 'position: fixed; bottom: 100px; right: 20px; width: 350px; height: 400px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;';
        
        const chatHeader = document.createElement('div');
        chatHeader.style.cssText = 'background: #007bff; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        chatHeader.innerHTML = `
            <span>üí¨ Class Chat</span>
            <button id="chat-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 5px;">‚àí</button>
        `;
        
        this.makeDraggable(this.chatContainer, chatHeader);
        
        chatHeader.querySelector('#chat-minimize-btn').onclick = (e) => {
            e.stopPropagation();
            // Use App's close function to ensure state is updated
            if (window.App && window.App.closeChat) {
                window.App.closeChat();
            } else {
                this.toggleChat();
            }
        };
        
        this.chatContainer.appendChild(chatHeader);
        
        const chatContent = document.createElement('div');
        chatContent.style.cssText = 'height: calc(100% - 60px); display: flex; flex-direction: column;';
        
        this.chatMessages = document.createElement('div');
        this.chatMessages.id = 'classroom-chat-messages';
        this.chatMessages.style.cssText = 'flex: 1; padding: 15px; overflow-y: auto; background: #f8f9fa;';
        this.chatMessages.innerHTML = '<div style="text-align: center; color: #999; font-style: italic;">No messages sent yet</div>';
        
        const chatInputArea = document.createElement('div');
        chatInputArea.style.cssText = 'padding: 15px; border-top: 1px solid #eee; background: white;';
        
        this.chatInput = document.createElement('input');
        this.chatInput.type = 'text';
        this.chatInput.placeholder = 'Type a message...';
        this.chatInput.style.cssText = 'width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 20px; outline: none; font-size: 14px;';
        
        this.chatInput.onkeypress = (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const messageContent = this.chatInput.value.trim();
                if (messageContent) {
                    this.sendMessage(messageContent);
                    this.chatInput.value = '';
                }
            }
        };
        
        chatInputArea.appendChild(this.chatInput);
        chatContent.appendChild(this.chatMessages);
        chatContent.appendChild(chatInputArea);
        this.chatContainer.appendChild(chatContent);
        document.body.appendChild(this.chatContainer);
    }

    enableChat() {
        if (this.chatButton) {
            this.chatButton.style.display = 'block';
        }
    }

    toggleChat() {
        if (!this.chatContainer) return;
        
        // Use the App's state management functions
        if (window.App) {
            if (window.App.isChatOpen) {
                window.App.closeChat();
            } else {
                window.App.openChat();
                if (this.chatInput) {
                    this.chatInput.focus();
                }
            }
        } else {
            // Fallback for direct usage
            const isVisible = this.chatContainer.style.display !== 'none';
            this.chatContainer.style.display = isVisible ? 'none' : 'block';
            
            if (!isVisible && this.chatInput) {
                this.chatInput.focus();
            }
        }
    }

    addChatMessage(sender, content, messageObj) {
        if (!this.chatMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.style.cssText = 'margin-bottom: 10px; padding: 8px 12px; background: white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);';
        
        const senderSpan = document.createElement('div');
        senderSpan.style.cssText = 'font-weight: bold; color: #007bff; font-size: 12px; margin-bottom: 4px;';
        senderSpan.textContent = sender;
        
        const contentSpan = document.createElement('div');
        contentSpan.style.cssText = 'color: #333; line-height: 1.4;';
        contentSpan.textContent = content;
        
        messageDiv.appendChild(senderSpan);
        messageDiv.appendChild(contentSpan);
        
        // Remove first message if it's "No messages sent yet"
        if (this.chatMessages.children.length === 1 && 
            this.chatMessages.children[0].textContent.includes('No messages sent yet')) {
            this.chatMessages.innerHTML = '';
        }
        
        this.chatMessages.appendChild(messageDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    // ========== AI INTERFACE ==========
    createAIInterface() {
        if (document.getElementById('classroom-ai-btn')) return;

        this.aiButton = document.createElement('button');
        this.aiButton.id = 'classroom-ai-btn';
        this.aiButton.innerHTML = 'ü§ñ';
        // Button is now always visible
        this.aiButton.style.cssText = `position: fixed; bottom: 20px; right: 90px; width: 60px; height: 60px; border-radius: 50%; background: #4caf50; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10000; display: block;`;

        this.aiButton.onclick = () => this.toggleAI();
        this.makeDraggable(this.aiButton);
        document.body.appendChild(this.aiButton);

        // The rest of the function remains the same for creating the container...
        this.aiContainer = document.createElement('div');
        this.aiContainer.id = 'classroom-ai-container';
        this.aiContainer.style.cssText = 'position: fixed; bottom: 100px; right: 20px; width: 400px; height: 500px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;';

        const aiHeader = document.createElement('div');
        aiHeader.style.cssText = 'background: #4caf50; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        aiHeader.innerHTML = `<span>ü§ñ AI Assistant</span><button style="background:none;border:none;color:white;font-size:18px;cursor:pointer;">‚àí</button>`;

        this.makeDraggable(this.aiContainer, aiHeader);

        aiHeader.querySelector('button').onclick = (e) => {
            e.stopPropagation();
            this.toggleAI();
        };

        this.aiContainer.appendChild(aiHeader);

        const aiContent = document.createElement('div');
        aiContent.style.cssText = 'height: calc(100% - 60px); display: flex; flex-direction: column;';

        this.aiMessages = document.createElement('div');
        this.aiMessages.id = 'classroom-ai-messages';
        this.aiMessages.style.cssText = 'flex: 1; padding: 15px; overflow-y: auto; background: #f8f9fa;';
        this.aiMessages.innerHTML = '<div style="text-align: center; color: #999; font-style: italic;">Ask the AI assistant...</div>';

        const aiInputArea = document.createElement('div');
        aiInputArea.style.cssText = 'padding: 15px; border-top: 1px solid #eee; background: white;';

        this.aiInput = document.createElement('input');
        this.aiInput.type = 'text';
        this.aiInput.placeholder = 'Ask a question...';
        this.aiInput.style.cssText = 'width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 20px; outline: none; font-size: 14px;';
        this.aiInput.onkeypress = (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const prompt = this.aiInput.value.trim();
                if (prompt) {
                    const lang = document.documentElement.lang || 'en';
                    this.sendAIMessage(prompt, lang);
                    this.aiInput.value = '';
                }
            }
        };

        aiInputArea.appendChild(this.aiInput);
        aiContent.appendChild(this.aiMessages);
        aiContent.appendChild(aiInputArea);
        this.aiContainer.appendChild(aiContent);
        document.body.appendChild(this.aiContainer);
    }

    toggleAI() {
        if (!this.aiContainer) return;
        
        const isVisible = this.aiContainer.style.display !== 'none';
        this.aiContainer.style.display = isVisible ? 'none' : 'block';
        
        if (!isVisible && this.aiInput) {
            this.aiInput.focus();
        }
    }

    getInterfaceLanguage() {
        return document.documentElement.lang || 'en';
    }

    async sendAIMessage(prompt, language, bypassContext = false) {
        if (!this.isTeacher && !this.isAiActiveForClass) {
            this.addAIMessage("ü§ñ", "AI is not available at the moment.", false);
            return;
        }
        if (!language) language = this.getInterfaceLanguage();
        if (!this.functions) {
            this.addAIMessage("ü§ñ", "Error: AI service not initialized", false);
            return;
        }
        this.addAIMessage(this.playerName || "You", prompt, true);

        try {
            const askAIFunction = this.functions.httpsCallable('askAI');
            const result = await askAIFunction({ 
                prompt, 
                roomCode: this.roomCode, 
                language,
                bypassContext // New parameter
            });
            const senderName = result.data.model ? `ü§ñ (${result.data.model})` : "ü§ñ";
            this.addAIMessage(senderName, result.data.result, false);
            return result.data; // Return the full result object
        } catch (error) {
            console.error("üî• Error calling askAI:", error);
            this.addAIMessage("ü§ñ", `Error: ${error.message}`, false);
            return null;
        }
    }

    addAIMessage(sender, content, isUser) {
        if (!this.aiMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.style.cssText = `margin-bottom: 10px; padding: 8px 12px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); ${isUser ? 'background: #007bff; color: white; margin-left: 20px;' : 'background: white; color: #333; margin-right: 20px;'}`;
        
        const senderSpan = document.createElement('div');
        senderSpan.style.cssText = `font-weight: bold; font-size: 12px; margin-bottom: 4px; ${isUser ? 'color: rgba(255,255,255,0.8);' : 'color: #28a745;'}`;
        senderSpan.textContent = sender;
        
        const contentSpan = document.createElement('div');
        contentSpan.style.cssText = 'line-height: 1.4;';
        contentSpan.textContent = content;
        
        messageDiv.appendChild(senderSpan);
        messageDiv.appendChild(contentSpan);
        
        // Remove first message if it's "Ask the AI assistant..."
        if (this.aiMessages.children.length === 1 && 
            this.aiMessages.children[0].textContent.includes('Ask the AI assistant')) {
            this.aiMessages.innerHTML = '';
        }
        
        this.aiMessages.appendChild(messageDiv);
        this.aiMessages.scrollTop = this.aiMessages.scrollHeight;
    }

    // ========== UTILITY FUNCTIONS ==========
    makeDraggable(element, dragHandle = null) {
        const handle = dragHandle || element;
        handle.addEventListener('mousedown', (e) => {
            e.preventDefault();
            let startX = e.clientX - element.offsetLeft;
            let startY = e.clientY - element.offsetTop;
            if (element.style.right) {
                element.style.left = element.offsetLeft + 'px';
                element.style.right = ''; 
            }
            const handleMouseMove = (me) => {
                element.style.left = (me.clientX - startX) + 'px';
                element.style.top = (me.clientY - startY) + 'px';
            };
            const handleMouseUp = () => {
                document.removeEventListener('mousemove', handleMouseMove);
                document.removeEventListener('mouseup', handleMouseUp);
            };
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
        });
    }

    showGameNotification(message) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; left: 50%; transform: translateX(-50%);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; padding: 15px 25px; border-radius: 25px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2); z-index: 10000;
            font-weight: bold; font-size: 16px; animation: slideDown 0.3s ease;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideUp 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
        
        // Add CSS for animations
        if (!document.getElementById('notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                @keyframes slideDown { from { transform: translateX(-50%) translateY(-100%); opacity: 0; } to { transform: translateX(-50%) translateY(0); opacity: 1; } }
                @keyframes slideUp { from { transform: translateX(-50%) translateY(0); opacity: 1; } to { transform: translateX(-50%) translateY(-100%); opacity: 0; } }
            `;
            document.head.appendChild(style);
        }
    }

    // Send private message (teacher only)
    async sendPrivateMessage(content, recipientUid) {
        if (!content || !content.trim() || !this.roomCode || !recipientUid) return;

        try {
            const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                             .collection('messages');
            await messagesCollection.add({
                sender: this.playerName || "Teacher",
                sender_uid: this.isTeacher ? this.auth.currentUser?.uid : this.studentId,
                recipient_uid: recipientUid,
                content: content,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                is_teacher: this.isTeacher,
                is_private: true
            });
        } catch (error) {
            console.error('üî• Error sending private message:', error);
            throw error;
        }
    }

    // Test AI service availability
    async testAIService() {
        if (!this.functions) {
            return { available: false, error: "Firebase Functions not initialized", code: "functions/not-initialized" };
        }

        // Ensure user is authenticated before calling cloud function
        let user = this.auth.currentUser;
        if (!user) {
            try {
                const userCredential = await this.auth.signInAnonymously();
                user = userCredential.user;
            } catch (authError) {
                return { available: false, error: "Authentication failed", code: "auth-failed" };
            }
        }

        if (!user || !user.uid) {
            return { available: false, error: "User not authenticated", code: "auth-missing" };
        }
        
        try {
            const askChatGPTFunction = this.functions.httpsCallable('askChatGPT');
            const result = await askChatGPTFunction({ prompt: "Hello" });

            return { available: true, result: result.data.result, code: "success" };
        } catch (error) {
            return { available: false, error: error.message, code: error.code || "unknown" };
        }
    }

    // Poll management functions
    async startPoll(pollConfig) {
        if (!this.isTeacher) return;
        
        console.log("üìä Starting poll", pollConfig);
        
        const newPoll = {
            id: Date.now() + '_' + Math.random().toString(36).substr(2, 9), // New unique ID
            type: pollConfig.type,
            question: pollConfig.question || '', // Add question field
            options: pollConfig.options,
            isActive: true,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            responses: {}
        };

        await this.db.collection('rooms').doc(this.roomCode).update({
            'settings.currentPoll': newPoll
        });
        
        console.log("‚úÖ Poll started successfully");
    }

    async stopPoll() {
        if (!this.isTeacher) return;
        
        console.log("üìä Stopping poll");
        
        await this.db.collection('rooms').doc(this.roomCode).update({
            'settings.currentPoll.isActive': false
        });
        
        console.log("‚úÖ Poll stopped successfully");
    }

    async submitPollAnswer(answer) {
        if (!this.functions) {
            console.error("Firebase Functions is not initialized.");
            return;
        }
        try {
            const submitAnswerFunction = this.functions.httpsCallable('submitPollAnswer');
            await submitAnswerFunction({
                roomCode: this.roomCode,
                studentId: this.studentId,
                playerName: this.playerName,
                answer: answer
            });
            console.log("‚úÖ Poll answer successfully sent via Cloud Function.");
        } catch (error) {
            console.error("üî• Error calling submitPollAnswer cloud function:", error);
        }
    }

    listenForPollUpdates(callback) {
        this.roomListener_Polls = this.db.collection('rooms').doc(this.roomCode)
            .onSnapshot(doc => {
                const pollData = doc.data()?.settings?.currentPoll;
                this.lastKnownPollData = pollData;
                console.log("üìä Poll update received", pollData);
                if (typeof callback === 'function') {
                    callback(pollData);
                }
            });
    }

    getCurrentPollData() {
        return this.lastKnownPollData;
    }

    getStudentId() {
        return this.studentId;
    }

    // Function to save question history
    async saveQuestionToHistory(pollData) {
        if (!this.isTeacher || !pollData) return;
        const historyRef = this.db.collection('rooms').doc(this.roomCode)
            .collection('questionHistory').doc(pollData.id);
        await historyRef.set({
            ...pollData,
            closedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // ========== POLL INTERFACE ==========
    createPollInterface() {
        if (this.isTeacher || document.getElementById('classroom-poll-btn')) return;

        // 1. Create the permanent floating button
        this.pollButton = document.createElement('button');
        this.pollButton.id = 'classroom-poll-btn';
        this.pollButton.innerHTML = 'üìä<div id="poll-badge" style="position:absolute; top:-2px; right:-2px; width:12px; height:12px; border-radius:50%; background:red; display:none; border: 2px solid white;"></div>';
        this.pollButton.style.cssText = 'position: fixed; bottom: 20px; right: 160px; width: 60px; height: 60px; border-radius: 50%; background: #607d8b; color: white; border: none; font-size: 24px; cursor: pointer; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10000; display: block;'; // Always visible

        this.pollButton.onclick = () => {
            if (this.pollContainer && this.pollContainer.dataset.active === 'true') {
                const isVisible = this.pollContainer.style.display !== 'none';
                this.pollContainer.style.display = isVisible ? 'none' : 'block';
            }
        };

        // *** ADD THIS LINE TO MAKE THE BUTTON DRAGGABLE ***
        this.makeDraggable(this.pollButton);

        document.body.appendChild(this.pollButton);

        // 2. Create the draggable container
        this.pollContainer = document.createElement('div');
        this.pollContainer.id = 'classroom-poll-container';
        this.pollContainer.dataset.active = 'false'; // Custom attribute to track state
        this.pollContainer.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 450px; min-height: 200px; background: white; border-radius: 15px; box-shadow: 0 8px 40px rgba(0,0,0,0.25); z-index: 10001; display: none; overflow: hidden;';

        const pollHeader = document.createElement('div');
        pollHeader.style.cssText = 'background: #ff9800; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        pollHeader.innerHTML = '<span>üìä Poll / Question</span><button id="poll-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 5px;">‚àí</button>';

        this.makeDraggable(this.pollContainer, pollHeader);

        pollHeader.querySelector('#poll-minimize-btn').onclick = (e) => {
            e.stopPropagation();
            this.pollContainer.style.display = 'none';
        };

        const pollContentArea = document.createElement('div');
        pollContentArea.id = 'classroom-poll-content-area';
        pollContentArea.style.cssText = 'padding: 20px;';

        this.pollContainer.appendChild(pollHeader);
        this.pollContainer.appendChild(pollContentArea);
        document.body.appendChild(this.pollContainer);
    }
}

================================================================================
File 4/11: public\js\teacher-dashboard.js
================================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */
// teacher-dashboard.js - English version with advanced AI selection menu

class TeacherDashboard {
    constructor() {
        console.log('üü¢ TRACE: TeacherDashboard constructor called');
        this.sdk = null;
        this.students = [];
        this.activities = [];
        this.isAiActive = false; // Track AI status
        this.isAiActiveForStudents = false; // Add new variable for tracking
        this.currentAiModel = 'chatgpt';
        this.aiWarningShown = false; // Prevent repeated messages
        this.config = {}; // üéØ Change here
        this.debugMode = false;
        this.currentQuestionResponses = {}; // Stores { studentName: [answers] }
        
        // üîß English locale fix - set locale
        this.locale = 'en-US';
        this.rtlSupport = false;
        this.isContentManagerInitialized = false;
    }

    // Debugging utility with English support
    debugLog(message, data = null) {
        const debugEnabled = true;
        if (!debugEnabled) return;
        
        const debugConsoleContent = document.querySelector('.enhanced-debug-console .debug-content');
        if(debugConsoleContent) {
            const logEntry = document.createElement('div');
            logEntry.style.direction = 'ltr';
            logEntry.style.textAlign = 'left';
            logEntry.innerHTML = `<div>[${new Date().toLocaleTimeString(this.locale)}] ${message}</div>`;
            if (data) {
                const dataPre = document.createElement('pre');
                dataPre.style.cssText = 'margin-left: 20px; color: #ffaa00; direction: ltr; text-align: left;';
                dataPre.textContent = JSON.stringify(data, null, 2);
                logEntry.appendChild(dataPre);
            }
            debugConsoleContent.appendChild(logEntry);
            debugConsoleContent.scrollTop = debugConsoleContent.scrollHeight;
        }
        console.log(`[TEACHER DEBUG] ${message}`, data);
    }

    async init() {
        console.log('üü¢ TRACE: TeacherDashboard.init called');
        const loadingOverlay = document.getElementById('loading-overlay');
        try {
            this.debugLog("üöÄ Initializing teacher dashboard...");
            await this.loadConfigData();

            // ◊¶◊ï◊® SDK ◊ï◊™◊û◊™◊ô◊ü ◊©◊î◊ï◊ê ◊ô◊î◊ô◊î ◊û◊ï◊õ◊ü ◊ú◊ó◊ú◊ï◊ò◊ô◊ü
            this.sdk = new ClassroomSDK();
            console.log('üîç SDK created:', !!this.sdk);
            console.log('üîç SDK toggleAI method:', !!this.sdk.toggleAI);
            
            await this.handleSuccessfulLogin(this.sdk.auth.currentUser);
            
            // ◊ï◊ï◊ì◊ê ◊©◊î-SDK ◊û◊ï◊õ◊ü ◊ú◊§◊†◊ô ◊ô◊¶◊ô◊®◊™ AI
            console.log('üîç Final SDK check before AI init:');
            console.log('- SDK exists:', !!this.sdk);
            console.log('- toggleAI exists:', !!this.sdk.toggleAI);
            console.log('- DB exists:', !!this.sdk.db);
            console.log('- roomCode exists:', !!this.sdk.roomCode);

            // ◊®◊ß ◊ê◊ñ ◊¶◊ï◊® ◊ê◊™ ◊û◊û◊©◊ß ◊î-AI
            this.sdk.createAIInterface();
            this.initializeTeacherAI();
            
            // ◊î◊û◊©◊ö ◊õ◊®◊í◊ô◊ú...
            this.sdk.listenForStudents(this.updateStudentsList.bind(this));
            this.sdk.listenForMessages((messages) => {
                if (messages && messages.length > 0) {
                    this.addMessage(messages);
                }
            });
            this.sdk.listenForRoomUpdates((roomData) => {
                if (!roomData || !roomData.settings) return;

                if (roomData.settings.currentPoll) {
                    this.displayPollResults(roomData.settings.currentPoll);
                }

                const aiIsActiveInDB = roomData.settings.ai_active === true;
                if (this.isAiActive !== aiIsActiveInDB) {
                    console.log(`üîÑ Syncing teacher UI. AI status changed to: ${aiIsActiveInDB}`);
                    this.isAiActive = aiIsActiveInDB;
                    this.updateAIButton();
                }
            });

            this.updateConnectionStatus(true);
            this.setupEventListeners();
            this.updateRoomDisplay();
            
            // ◊ê◊ó◊®◊ô ◊©◊î◊õ◊ú ◊û◊ï◊õ◊ü, ◊ë◊ì◊ï◊ß ◊©◊ï◊ë ◊ê◊™ ◊î-AI
            setTimeout(() => {
                if (this.checkSDKReady()) {
                    this.showTeacherAIButton();
                    this.checkAIStatus();
                    console.log('‚úÖ Teacher AI button initialized and shown');
                } else {
                    console.error('‚ùå SDK not ready even after timeout');
                }
            }, 2000); // ◊™◊ü ◊ô◊ï◊™◊® ◊ñ◊û◊ü

            this.debugLog("‚úÖ Teacher dashboard initialized successfully.");

        } catch (error) {
            console.error("üî• Critical initialization error:", error);
            console.error("üîç Error stack:", error.stack);
            this.updateConnectionStatus(false);
        } finally {
            if(loadingOverlay) loadingOverlay.classList.add('hidden');
        }
    }

    // üÜï New function to activate AI for teacher
    async initializeTeacherAI() {
        this.debugLog("ü§ñ Initializing AI for teacher...");
        
        try {
            // 1. Check AI service availability
            const aiStatus = await this.testAIService();
            if (!aiStatus) {
                this.debugLog("‚ö†Ô∏è AI service not available, but continuing...");
            }
            
            // 2. Show AI button in any case (even if service is not available)
            this.showTeacherAIButton();
            
            // 3. Update AI status in interface
            await this.checkAIStatus();
            
            // 4. Add activity message
            this.addActivity("ü§ñ AI interface enabled for teacher");
            
            this.debugLog("‚úÖ Teacher AI initialized successfully");
            
        } catch (error) {
            console.error("üî• Error initializing teacher AI:", error);
            this.debugLog("‚ùå Teacher AI initialization failed", error);
            
            // Even in case of error - show the button
            this.showTeacherAIButton();
            this.addActivity("‚ö†Ô∏è AI available but with limitations");
        }
    }

    // üÜï Function to show AI button for teacher
    showTeacherAIButton() {
        // üîß FIX: Ensure AI button is created and visible
        let aiBtn = document.getElementById('classroom-ai-btn');
        
        if (!aiBtn) {
            // Create the button if it doesn't exist
            console.log('üîß Creating missing AI button for teacher');
            if (this.sdk && this.sdk.createAIInterface) {
                this.sdk.createAIInterface();
                aiBtn = document.getElementById('classroom-ai-btn');
            }
        }
        
        if (aiBtn) {
            aiBtn.style.display = 'block';
            aiBtn.style.opacity = '1';
            aiBtn.style.visibility = 'visible';
            
            // Add teacher indicator
            const teacherIndicator = document.createElement('div');
            teacherIndicator.className = 'teacher-ai-indicator';
            teacherIndicator.innerHTML = 'üéì';
            teacherIndicator.style.cssText = `
                position: absolute; top: -5px; left: -5px;
                background: #28a745; color: white;
                border-radius: 50%; width: 20px; height: 20px;
                font-size: 12px; display: flex;
                align-items: center; justify-content: center;
                z-index: 10003;
            `;
            
            if (!aiBtn.querySelector('.teacher-ai-indicator')) {
                aiBtn.style.position = 'relative';
                aiBtn.appendChild(teacherIndicator);
            }
            
            this.debugLog("ü§ñ AI button displayed for teacher");
            console.log('‚úÖ Teacher AI button is now visible and functional');
        } else {
            console.error('‚ùå Could not create or find AI button for teacher');
        }
    }

    // Check AI status and read current model
    async checkAIStatus() {
        console.log('üîç checkAIStatus called');
        if (!this.sdk || !this.sdk.db) {
            console.log('‚ùå SDK or DB not ready');
            this.debugLog("‚ùå Cannot check AI status - SDK/DB not ready");
            return;
        }
        
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            const doc = await roomRef.get();
            
            console.log('üîç Room document exists:', doc.exists);
            
            if (doc.exists) {
                const roomData = doc.data();
                console.log('üîç Room data:', roomData);
                console.log('üîç AI settings:', roomData.settings);
                
                this.isAiActive = roomData.settings?.ai_active === true;
                this.currentAiModel = roomData.settings?.ai_model || 'chatgpt';
                
                console.log('üîç Set isAiActive to:', this.isAiActive);
                
                this.updateAIButton();
                this.updateAIModelDisplay();
                
                this.debugLog(`ü§ñ AI Status: ${this.isAiActive ? 'Active' : 'Disabled'}, Model: ${this.currentAiModel}`);
            } else {
                console.log('‚ö†Ô∏è Room document not found');
                this.debugLog("‚ö†Ô∏è Room document not found for AI status check");
            }
        } catch (error) {
            console.error("üî• Error checking AI status:", error);
            this.debugLog("‚ùå AI status check failed", error);
        }
    }

    // Update AI button display
    updateAIButton() {
        const aiStatusIcon = document.getElementById('aiStatusIcon');
        const aiStatusText = document.getElementById('aiStatusText');
        const aiStatusDesc = document.querySelector('#toggleAI .dropdown-desc');

        if (this.isAiActive) {
            if (aiStatusIcon) aiStatusIcon.textContent = 'üü¢';
            if (aiStatusText) aiStatusText.textContent = 'AI Active for Students';
            if (aiStatusDesc) aiStatusDesc.textContent = 'Click to disable';
        } else {
            if (aiStatusIcon) aiStatusIcon.textContent = 'üî¥';
            if (aiStatusText) aiStatusText.textContent = 'AI Disabled for Students';
            if (aiStatusDesc) aiStatusDesc.textContent = 'Click to enable';
        }
    }

    // Update current model display
    updateAIModelDisplay() {
        // Update current model text
        const modelDisplays = document.querySelectorAll('.current-ai-model');
        modelDisplays.forEach(display => {
            display.textContent = this.getModelDisplayName(this.currentAiModel);
        });

        // Highlight active button
        document.querySelectorAll('.dropdown-item.ai-model-btn').forEach(btn => {
            if (btn.dataset.model === this.currentAiModel) {
                btn.style.backgroundColor = '#e8f5e9';
                btn.style.fontWeight = 'bold';
            } else {
                btn.style.backgroundColor = '';
                btn.style.fontWeight = 'normal';
            }
        });
    }

    // Get display name for model
    getModelDisplayName(model) {
        const modelNames = {
            'chatgpt': 'ChatGPT',
            'claude': 'Claude',
            'gemini': 'Gemini'
        };
        return modelNames[model] || model;
    }

    // Toggle AI mode (enable/disable)
    async toggleAIForClass() {
        console.log('--- Starting toggleAIForClass ---');
        if (!this.sdk || !this.sdk.db || !this.sdk.roomCode) {
            console.error('SDK not ready. Cannot update Firestore.');
            alert('SDK not ready. Please refresh.');
            return;
        }

        const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.roomCode);
        
        try {
            // ◊ß◊ï◊ì◊ù ◊ß◊ï◊®◊ê◊ô◊ù ◊õ◊ì◊ô ◊ú◊ì◊¢◊™ ◊û◊î ◊î◊û◊¶◊ë ◊î◊†◊ï◊õ◊ó◊ô
            const doc = await roomRef.get();
            if (!doc.exists) {
                console.error('Document does not exist!');
                return;
            }

            const currentState = doc.data().settings.ai_active;
            const newState = !currentState;

            // ◊û◊ë◊¶◊¢◊ô◊ù ◊ê◊™ ◊î◊¢◊ì◊õ◊ï◊ü ◊ë◊û◊°◊ì ◊î◊†◊™◊ï◊†◊ô◊ù
            await roomRef.update({
                'settings.ai_active': newState
            });

            console.log(`SUCCESS: Firestore updated. New state is: ${newState}`);

            // ======================================================
            // === ◊î◊ó◊ú◊ß ◊î◊ó◊°◊®: ◊¢◊ì◊õ◊ï◊ü ◊û◊û◊©◊ß ◊î◊û◊©◊™◊û◊© ◊ú◊ê◊ó◊® ◊î◊î◊¶◊ú◊ó◊î ===
            // ======================================================

            // 1. ◊¢◊ì◊õ◊ï◊ü ◊î◊û◊©◊™◊†◊î ◊î◊û◊ß◊ï◊û◊ô ◊©◊û◊ó◊ñ◊ô◊ß ◊ê◊™ ◊î◊°◊ò◊ò◊ï◊°
            this.isAiActive = newState;
            
            // 2. ◊¢◊ì◊õ◊ï◊ü ◊û◊®◊ê◊î ◊î◊õ◊§◊™◊ï◊® (◊¶◊ë◊¢ ◊ï◊ò◊ß◊°◊ò)
            this.updateAIButton();
            
            // 3. ◊î◊ï◊°◊§◊™ ◊©◊ï◊®◊î ◊ú◊ô◊ï◊û◊ü ◊î◊ê◊ô◊®◊ï◊¢◊ô◊ù
            if (newState) {
                this.addActivity('ü§ñ AI enabled for class.');
            } else {
                this.addActivity('üî¥ AI disabled for class.');
            }
            
        } catch (error) {
            console.error('FAILURE: Could not update Firestore.', error);
            alert('Failed to update the AI status. See console for error details.');
        }
    }

    checkSDKReady() {
        if (!this.sdk) {
            console.error('‚ùå SDK not initialized');
            return false;
        }
        
        if (!this.sdk.toggleAI) {
            console.error('‚ùå toggleAI method missing from SDK');
            console.log('üîç Available methods:', Object.getOwnPropertyNames(this.sdk));
            return false;
        }
        
        if (!this.sdk.db) {
            console.error('‚ùå Firebase DB not ready');
            return false;
        }
        
        if (!this.sdk.roomCode) {
            console.error('‚ùå Room code not set');
            return false;
        }
        
        console.log('‚úÖ SDK ready for AI operations');
        return true;
    }

    // Switch AI model (without turning off/on)
    async switchAIModel(model) {
        if (!this.sdk) return;
        
        this.debugLog(`üîÑ Switching AI model to: ${model}`);
        
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.update({
                'settings.ai_model': model,
                'last_activity': firebase.firestore.FieldValue.serverTimestamp()
            });
            
            this.currentAiModel = model;
            this.updateAIButton();
            this.updateAIModelDisplay();
            
            const modelName = this.getModelDisplayName(model);
            this.addActivity(`üîÑ AI model switched to: ${modelName}`);
            this.debugLog(`‚úÖ AI model switched to: ${model}`);
            
            // Message to students
            if (this.isAiActive) {
                this.showModelSwitchMessage(modelName);
            }
            
        } catch (error) {
            console.error("üî• Error switching AI model:", error);
            this.debugLog("‚ùå AI model switch failed", error);
            alert("Error switching AI model: " + error.message);
        }
    }

    // Model switch message
    showModelSwitchMessage(modelName) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 10000;
            background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
            color: white; padding: 15px 20px; border-radius: 8px;
            box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);
            font-weight: bold; max-width: 300px;
            animation: slideInRight 0.5s ease;
            direction: ltr; text-align: left;
        `;
        
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 24px;">üîÑ</span>
                <div>
                    <div>AI Model Switched!</div>
                    <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">
                        Now using: ${modelName}
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease';
            setTimeout(() => notification.remove(), 500);
        }, 3000);
    }

    // Test AI service - updated to work with askAI
    async testAIService() {
        // Comprehensive check of all required components
        if (!this.sdk) {
            this.debugLog("‚ùå SDK not available for AI test");
            return false;
        }
        
        if (!this.sdk.auth?.currentUser) {
            this.debugLog("‚ùå User not authenticated for AI test");
            return false;
        }
        
        if (!this.sdk.functions) {
            this.debugLog("‚ùå Firebase Functions not initialized");
            return false;
        }
            
        this.debugLog("üîç Testing AI service availability...");
        
        try {
            // Check if SDK has testAIService method, if not use fallback
            if (this.sdk.testAIService) {
                const result = await this.sdk.testAIService();
                
                if (result.available) {
                    this.debugLog("‚úÖ AI service available and working", result);
                    return true;
                } else {
                    this.debugLog("‚ùå AI service not available", result);
                    
                    // Show detailed message to teacher
                    let errorDetails = "AI service not available";
                    if (result.code === 'functions/failed-precondition') {
                        errorDetails = "AI service not configured (missing API key)";
                    } else if (result.code === 'functions/unauthenticated') {
                        errorDetails = "Authentication error in system";
                    } else if (result.code === 'functions/not-initialized') {
                        errorDetails = "Firebase Functions not initialized";
                    }
                    
                    // Show one-time alert
                    if (!this.aiWarningShown) {
                        this.aiWarningShown = true;
                        setTimeout(() => {
                            if (confirm(`‚ö†Ô∏è ${errorDetails}\n\nWould you like to try again?`)) {
                                this.testAIService();
                            }
                        }, 1000);
                    }
                    
                    return false;
                }
            } else {
                // Fallback if SDK doesn't have testAIService
                this.debugLog("‚ö†Ô∏è SDK testAIService method not found, assuming available");
                return true;
            }
        } catch (error) {
            this.debugLog("üî• AI service test failed with error", error);
            console.error("AI test error:", error);
            // Don't fail completely, just log and continue
            return true;
        }
    }

    updateConnectionStatus(isConnected) {
        const statusDiv = document.getElementById('connectionStatus');
        if (!statusDiv) return;

        // Remove old classes and stop animation
        statusDiv.className = '';
        statusDiv.style.animation = 'none';

        if (isConnected) {
            statusDiv.classList.add('connected');
            statusDiv.setAttribute('title', 'Connected to Firebase');
        } else {
            statusDiv.classList.add('disconnected');
            statusDiv.setAttribute('title', 'Not Connected');
        }
        // Force restart animation for visual feedback
        void statusDiv.offsetWidth;
        statusDiv.style.animation = 'pulse 2s infinite';
    }

    addActivity(activityText) {
        const activitiesArea = document.getElementById('activitiesArea');
        if (!activitiesArea) return;

        const activityDiv = document.createElement('div');
        activityDiv.className = 'activity-item';
        activityDiv.style.direction = 'ltr';
        activityDiv.style.textAlign = 'left';
        activityDiv.innerHTML = `
            <span class="activity-time">${new Date().toLocaleTimeString(this.locale)}</span>
            <span class="activity-text">${activityText}</span>
        `;
        activitiesArea.appendChild(activityDiv);
        activitiesArea.scrollTop = activitiesArea.scrollHeight;
    }

    updateStudentsList(studentsData) {
        this.students = studentsData;
        const studentsListDiv = document.getElementById('studentsList');
        const studentsCountSpan = document.getElementById('studentsCount');
        if (!studentsListDiv || !studentsCountSpan) return;

        // Clear existing list
        studentsListDiv.innerHTML = '';
        studentsCountSpan.textContent = this.students.length;

        if (this.students.length === 0) {
            studentsListDiv.innerHTML = '<div class="no-students">No students connected currently</div>';
            return;
        }
        
        const template = document.getElementById('studentTemplate');
        
        // Process ALL students in the array
        this.students.forEach(student => {
            const studentName = student.name || 'Unknown Student';
            const studentElement = document.importNode(template.content, true);
            
            const nameSpan = studentElement.querySelector('.student-name');
            if(nameSpan) nameSpan.textContent = studentName;

            const actionsDiv = studentElement.querySelector('.student-actions');
            if (actionsDiv) {
                const privateMsgBtn = document.createElement('button');
                privateMsgBtn.textContent = 'Private Message';
                privateMsgBtn.className = 'private-message-btn';
                privateMsgBtn.onclick = () => this.openPrivateMessageModal(student);
                actionsDiv.appendChild(privateMsgBtn);
            }
            
            studentsListDiv.appendChild(studentElement);
        });
        
        this.addActivity(`Student list updated. ${this.students.length} students connected.`);
        console.log(`‚úÖ Updated student list: ${this.students.length} students displayed`);
    }

    // üîß Fix #1: undefined messages - complete and fixed function
    addMessage(messages) {
        // If it's an array of messages - iterate through each one
        if (Array.isArray(messages)) {
            messages.forEach(message => this.addSingleMessage(message));
            return;
        }
        
        // If it's a single message
        this.addSingleMessage(messages);
    }

    addSingleMessage(message) {
        const messagesArea = document.getElementById('messagesArea');
        const messagesCountSpan = document.getElementById('messagesCount');
        if (!messagesArea) return;

        // üîß FIX: Prevent duplicate messages by checking if already exists
        const messageId = message.timestamp?.seconds + '_' + message.sender_uid + '_' + message.content.substring(0, 20);
        const existingMessage = messagesArea.querySelector(`[data-message-id="${messageId}"]`);
        if (existingMessage) {
            console.log('‚ö†Ô∏è Duplicate message prevented:', message.content.substring(0, 30));
            return;
        }

        // Validation and message creation code...
        const sender = message?.sender || 'Unknown User';
        const content = message?.content || 'Empty Message';
        const timestamp = message?.timestamp;
        const isTeacher = message?.is_teacher === true;
        const isPrivate = message?.is_private === true;

        // Remove "no messages" placeholder
        const noMessages = messagesArea.querySelector('.no-messages');
        if (noMessages) {
            noMessages.remove();
        }

        // Update message count
        if (messagesCountSpan) {
            const currentCount = parseInt(messagesCountSpan.textContent) || 0;
            messagesCountSpan.textContent = currentCount + 1;
        }

        // Create message element
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-item';
        messageDiv.setAttribute('data-message-id', messageId); // üîß FIX: Add unique identifier
        messageDiv.style.direction = 'ltr';
        messageDiv.style.textAlign = 'left';
        
        // Icon and time formatting...
        let senderIcon = '';
        if (isTeacher) {
            senderIcon = 'üéì ';
        } else if (isPrivate) {
            senderIcon = 'üîí ';
        }

        let timeString = 'Unknown Time';
        if (timestamp) {
            try {
                const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
                timeString = date.toLocaleTimeString(this.locale);
            } catch (e) {
                console.warn('Cannot parse timestamp:', timestamp);
                timeString = new Date().toLocaleTimeString(this.locale);
            }
        }

        messageDiv.innerHTML = `
            <div class="message-header">
                <span class="message-sender">${senderIcon}${sender}</span>
                <span class="message-time">${timeString}</span>
            </div>
            <div class="message-content">${content}</div>
            ${isPrivate ? '<div class="message-private-indicator">Private Message</div>' : ''}
        `;

        if (isPrivate) {
            messageDiv.style.borderLeft = '4px solid #ffc107';
            messageDiv.style.background = '#fff9c4';
        }

        messagesArea.appendChild(messageDiv);
        messagesArea.scrollTop = messagesArea.scrollHeight;

        console.log(`‚úÖ Message added: ${content.substring(0, 30)}...`);
    }

    sendCommand(command, payload = {}) {
        if (!this.sdk) return;
        this.sdk.sendCommand(command, payload);
        this.addActivity(`üì§ Command sent: ${command}`);
    }

    sendMessageToClass(content) {
        if (!content || !content.trim()) return;
        
        if (this.sdk) {
            this.sdk.sendMessage(content);
            this.addActivity(`üí¨ Message sent to class: ${content}`);
        }
    }

    // üÜï AI activation encouragement message with English support
    showAIActivationMessage() {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 10000;
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white; padding: 15px 20px; border-radius: 8px;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
            font-weight: bold; max-width: 300px;
            animation: slideInRight 0.5s ease;
            direction: ltr; text-align: left;
        `;
        
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 24px;">ü§ñ</span>
                <div>
                    <div>AI Enabled Successfully!</div>
                    <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">
                        Students can now ask questions
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // Remove after 4 seconds
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease';
            setTimeout(() => notification.remove(), 500);
        }, 4000);
        
        // Add CSS for animations if not exists
        if (!document.getElementById('ai-notification-styles')) {
            const style = document.createElement('style');
            style.id = 'ai-notification-styles';
            style.textContent = `
                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOutRight {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(style);
        }
    }

    setupEventListeners() {
        // Modal handling
        const openModal = (modalId) => document.getElementById(modalId)?.classList.add('visible');
        const closeModal = (modal) => modal.closest('.modal-overlay')?.classList.remove('visible');

        // üéØ Fix: Single block handling model buttons
        document.querySelectorAll('.dropdown-item.ai-model-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                const model = btn.dataset.model;
                if (model) {
                    this.switchAIModel(model);
                }
            });
        });

        // Modal close buttons
        document.querySelectorAll('.modal-close').forEach(btn => {
            btn.addEventListener('click', (e) => {
                closeModal(e.target);
            });
        });

        // Private message form submit
        const privateMessageForm = document.getElementById('privateMessageForm');
        if (privateMessageForm) {
            privateMessageForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.sendPrivateMessage();
            });
        }

        // üéØ Add the following code block within the function
        const customUrlForm = document.getElementById('customUrlForm');
        if (customUrlForm) {
            customUrlForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const urlInput = document.getElementById('customUrlInput');
                const url = urlInput.value.trim();
                if (url) {
                    this.sendSelectedGame(url); // Reuse function for sending and closing
                    urlInput.value = '';
                }
            });
        }

        // üéØ Add poll handling
        document.querySelectorAll('.poll-type-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const pollType = btn.dataset.type;
                this.startPoll(pollType);
            });
        });

        const stopPollBtn = document.getElementById('stop-poll-btn');
        if(stopPollBtn) {
            stopPollBtn.addEventListener('click', () => this.stopPoll());
        }

        // üéØ Handle general chat form
        const chatForm = document.getElementById('chat-form');
        if (chatForm) {
            chatForm.addEventListener('submit', (e) => {
                e.preventDefault(); // Prevents page refresh - the critical fix!
                const input = document.getElementById('chat-input');
                const message = input.value.trim();
                if (message) {
                    this.sdk.sendMessage(message);
                    input.value = '';
                }
            });
        }

        document.getElementById('ai-summarize-btn')?.addEventListener('click', () => this.handleAiAnalysis('summarize'));
        document.getElementById('ai-keywords-btn')?.addEventListener('click', () => this.handleAiAnalysis('keywords'));

        // Handle closing the open question modal and stopping the poll
        document.getElementById('close-open-question-btn')?.addEventListener('click', () => this.closeOpenEndedQuestion());
        document.querySelector('#open-question-modal .modal-close')?.addEventListener('click', () => this.closeOpenEndedQuestion());

        // ◊î◊ï◊°◊§◊™ ◊î◊ê◊ñ◊†◊î ◊ú◊õ◊§◊™◊ï◊® ◊ê◊ô◊§◊ï◊° ◊û◊°◊õ◊ô◊ù
        document.getElementById('resetScreensBtn')?.addEventListener('click', () => {
            if (confirm('Are you sure you want to reset all student screens? This will stop any active poll or content.')) {
                this.resetStudentScreens();
            }
        });

        document.getElementById('reset-screens-action')?.addEventListener('click', (e) => {
            e.preventDefault();
            if (confirm('Are you sure you want to reset all student screens?')) {
                this.resetStudentScreens();
            }
        });

        // Logout button
        document.getElementById('logout-action-btn')?.addEventListener('click', (e) => {
            e.preventDefault();
            this.logout();
        });

        // === ◊î◊ï◊°◊§◊™ ◊ß◊®◊ô◊ê◊î ◊ú-initContentManager ◊ë-setupEventListeners ===
        this.setupContentManager();
    }

    openPrivateMessageModal(student) {
        const modal = document.getElementById('privateMessageModal');
        if (modal) {
            document.getElementById('privateMessageRecipient').textContent = student.name;
            modal.dataset.studentUid = student.uid;
            modal.classList.add('visible');
        }
    }

    async sendPrivateMessage() {
        const modal = document.getElementById('privateMessageModal');
        const content = document.getElementById('privateMessageText').value.trim();
        const studentUid = modal.dataset.studentUid;
        
        if (!content || !studentUid) return;
        
        try {
            await this.sdk.sendPrivateMessage(content, studentUid);
            this.addActivity(`‚úâÔ∏è Private message sent to ${document.getElementById('privateMessageRecipient').textContent}`);
            document.getElementById('privateMessageText').value = '';
            modal.classList.remove('visible');
        } catch (error) {
            console.error("üî• Error sending private message:", error);
            alert("Error sending private message");
        }
    }

    async resetClassroomData() {
        if (!this.sdk || !confirm('Are you sure you want to reset the classroom? This action will delete all data.')) {
            return;
        }
        
        try {
            // Delete room from cloud
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.delete();
            
            // Create new room
            await this.sdk.initializeRoom();
            
            this.addActivity('üîÑ Classroom reset successfully');
            alert('Classroom reset successfully!');
        } catch (error) {
            console.error("üî• Error resetting classroom:", error);
            alert("Error resetting classroom");
        }
    }

    updateRoomDisplay() {
        const roomCode = this.sdk ? this.sdk.getRoomCode() : null;
        if (!roomCode) return;

        // Update text display in header
        const roomCodeSpan = document.getElementById('header-room-code');
        if (roomCodeSpan) {
            roomCodeSpan.textContent = roomCode;
        }

        // Create and display QR code
        const qrImage = document.getElementById('qr-code-image');
        if (qrImage) {
            const studentUrl = `${window.location.origin}/${this.config.studentAppUrl}?classroom=${roomCode}`;
            const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(studentUrl)}`;
            
            qrImage.src = qrApiUrl;

            // Add copy functionality on click
            qrImage.onclick = () => {
                navigator.clipboard.writeText(studentUrl).then(() => {
                    this.addActivity(`‚úÖ Student link copied`);
                    // Can add small visual notification here if desired
                }).catch(err => {
                    console.error('Failed to copy URL: ', err);
                });
            };
        }
    }

    async loadConfigData() {
        try {
            const response = await fetch('config.json');
            if (!response.ok) throw new Error('Network response was not ok');
            this.config = await response.json();
            this.debugLog('‚úÖ Config file loaded successfully', this.config);
        } catch (error) {
            console.error('üî• Error loading config file:', error);
            this.config = { studentAppUrl: 'student-app.html', games: [] }; // Fallback
        }
    }

    openContentModal() {
        document.getElementById('customContentModal')?.classList.add('visible');
        this.populateGamesList();
    }

    // === ◊î◊ó◊ú◊§◊™ populateGamesList ◊ë◊§◊ï◊†◊ß◊¶◊ô◊î ◊ó◊ì◊©◊î ===
    populateGamesList() {
        const container = document.getElementById('game-list-container');
        if (!container) return;

        const content = this.personalContent || [];
        container.innerHTML = '';

        if (content.length === 0) {
            container.innerHTML = '<p style="padding: 15px; text-align: center;">You haven\'t added any personal content yet. Go to Tools > Manage Content & AI to add some.</p>';
            return;
        }

        content.forEach(item => {
            const element = document.createElement('a');
            element.href = '#';
            element.className = 'dropdown-item';
            element.onclick = (e) => {
                e.preventDefault();
                this.sendSelectedGame(item.url);
            };
            element.innerHTML = `<span class="dropdown-icon">${item.icon || 'üîó'}</span><div class="dropdown-content"><div class="dropdown-title">${item.title}</div><div class="dropdown-desc">${item.description}</div></div>`;
            container.appendChild(element);
        });
    }

    sendSelectedGame(url) {
        if (!url) return;
        this.sendCommand('LOAD_CONTENT', { url });

        // Close window after sending
        const modal = document.getElementById('customContentModal');
        if (modal) {
            modal.querySelector('.modal-close').click();
        }
    }

    // üéØ Functions for poll management
    openPollCreationModal() {
        this.debugLog("üìä Opening poll creation window");
        document.getElementById('poll-creation-modal')?.classList.add('visible');
    }

    // ◊î◊ó◊ú◊£ ◊ê◊™ ◊õ◊ú ◊î◊§◊ï◊†◊ß◊¶◊ô◊î startPoll ◊ë◊ñ◊ï:
    async startPoll(pollType) {
        this.debugLog(`üìä Starting a new poll of type: ${pollType}`);

        try {
            // ◊©◊ú◊ë 1: ◊ë◊ì◊ô◊ß◊î ◊ï◊ê◊®◊õ◊ï◊ë ◊©◊ú ◊î◊°◊ß◊® ◊î◊§◊¢◊ô◊ú ◊î◊ß◊ï◊ì◊ù (◊ê◊ù ◊ß◊ô◊ô◊ù)
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.roomCode);
            const roomDoc = await roomRef.get();
            const existingPoll = roomDoc.data()?.settings?.currentPoll;

            if (existingPoll && existingPoll.isActive) {
                this.debugLog('Archiving previous active poll...', existingPoll.id);
                await this.sdk.saveQuestionToHistory(existingPoll);
                this.addActivity(`üìù Previous poll (${existingPoll.id.substring(0,5)}) archived.`);
            }

            // ◊©◊ú◊ë 2: ◊ô◊¶◊ô◊®◊™ ◊ê◊ï◊ë◊ô◊ô◊ß◊ò ◊î◊°◊ß◊® ◊î◊ó◊ì◊© ◊¢◊ù ◊û◊ê◊í◊® ◊™◊©◊ï◊ë◊ï◊™ ◊®◊ô◊ß
            const pollOptions = {
                'yes_no': 2,
                'multiple_choice': 4,
                'open_text': 0
            };

            const newPoll = {
                id: "poll_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9),
                type: pollType,
                question: '', // ◊†◊ô◊™◊ü ◊ú◊î◊®◊ó◊ë◊î ◊ë◊¢◊™◊ô◊ì
                options: pollOptions[pollType],
                isActive: true,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                responses: {} // ◊î◊™◊ó◊ú◊î ◊¢◊ù ◊û◊ê◊í◊® ◊†◊ß◊ô
            };

            // ◊©◊ú◊ë 3: ◊¢◊ì◊õ◊ï◊ü ◊î-Firestore ◊¢◊ù ◊î◊°◊ß◊® ◊î◊ó◊ì◊©
            await roomRef.update({
                'settings.currentPoll': newPoll
            });

            // ◊©◊ú◊ë 4: ◊¢◊ì◊õ◊ï◊ü ◊û◊û◊©◊ß ◊î◊û◊©◊™◊û◊© ◊ë◊î◊™◊ê◊ù ◊ú◊°◊ï◊í ◊î◊°◊ß◊® ◊î◊ó◊ì◊©
            if (pollType === 'open_text') {
                this.currentQuestionResponses = {}; // ◊ê◊ô◊§◊ï◊° ◊î◊ß◊ê◊© ◊î◊û◊ß◊ï◊û◊ô
                document.getElementById('open-question-modal')?.classList.add('visible');
            } else {
                document.getElementById('poll-section').style.display = 'block';
            }

            this.addActivity(`üìä Started new poll of type: ${pollType}`);
            document.getElementById('poll-creation-modal')?.classList.remove('visible');
            this.debugLog(`‚úÖ New poll ${newPoll.id} started successfully.`);

        } catch (error) {
            console.error("üî• Failed to start a new poll:", error);
            this.debugLog("‚ùå Error during startPoll", error);
            this.addActivity("‚ùå Error starting new poll.");
        }
    }

    stopPoll() {
        this.debugLog("üìä Stopping poll");
        this.sdk.stopPoll();
        document.getElementById('poll-section').style.display = 'none';
        this.addActivity(`‚èπÔ∏è Poll ended`);
    }

    displayPollResults(pollData) {
        // Handle Open Text Polls
        if (pollData && pollData.type === 'open_text' && pollData.isActive) {
            const container = document.getElementById('open-question-results');
            if (!container) return;
            container.innerHTML = ''; // Clear previous results to re-render

            const responses = pollData.responses || {};
            this.currentQuestionResponses = responses; // Update local memory

            // Correctly iterate over the responses object
            for (const studentName in responses) {
                if (Object.hasOwnProperty.call(responses, studentName)) {
                    const answers = responses[studentName];
                    if (Array.isArray(answers) && answers.length > 0) {
                        const lastAnswer = answers[answers.length - 1];
                        const answerDiv = document.createElement('div');
                        answerDiv.innerHTML = `<strong>${studentName} (${answers.length} versions):</strong><p style="margin: 5px 0 0 0; color: #333;">${lastAnswer}</p>`;
                        answerDiv.style.borderBottom = '1px solid #eee';
                        answerDiv.style.padding = '10px 0';
                        container.appendChild(answerDiv);
                    }
                }
            }
        } 
        // Handle Multiple Choice and Yes/No Polls
        else if (pollData && (pollData.type === 'multiple_choice' || pollData.type === 'yes_no')) {
            const container = document.getElementById('poll-results-container');
            const section = document.getElementById('poll-section');
            if (!container || !section) return;

            section.style.display = 'block';
            container.innerHTML = '';

            const responses = pollData.responses || {};
            const totalVotes = Object.keys(responses).length;
            const voteCounts = {};

            // Count votes for each option
            for (let i = 1; i <= pollData.options; i++) {
                voteCounts[i] = 0;
            }
            Object.values(responses).forEach(vote => {
                if (voteCounts[vote] !== undefined) {
                    voteCounts[vote]++;
                }
            });

            // Display results
            for (let i = 1; i <= pollData.options; i++) {
                const votes = voteCounts[i];
                const percentage = totalVotes > 0 ? ((votes / totalVotes) * 100).toFixed(1) : 0;
                const label = pollData.type === 'yes_no' ? (i === 1 ? 'Yes' : 'No') : `Option ${i}`;

                const barHtml = `
                    <div style="margin-bottom: 12px;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                            <strong>${label}</strong>
                            <span>${votes} votes (${percentage}%)</span>
                        </div>
                        <div style="background: #e0e0e0; border-radius: 4px; overflow: hidden;">
                            <div style="width: ${percentage}%; background: #42a5f5; height: 20px; transition: width 0.3s ease;"></div>
                        </div>
                    </div>
                `;
                container.innerHTML += barHtml;
            }
        }
    }

    async handleAiAnalysis(type) {
        // 1. Open the teacher's AI window immediately
        if (this.sdk && this.sdk.aiContainer.style.display === 'none') {
            this.sdk.toggleAI();
        }

        // 2. Collect current responses from local memory
        if (Object.keys(this.currentQuestionResponses).length === 0) {
            this.sdk.addAIMessage("ü§ñ", "No responses to analyze currently.", false);
            return;
        }

        const allAnswers = JSON.stringify(this.currentQuestionResponses, null, 2);
        const lang = this.sdk.getInterfaceLanguage();
        let prompt;

        // 3. Create language-aware prompt
        if (type === 'summarize') {
            prompt = (lang === 'he')
                ? `◊ú◊§◊†◊ô◊ö ◊™◊©◊ï◊ë◊ï◊™ ◊©◊ú ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊ú◊©◊ê◊ú◊î. ◊õ◊ú ◊©◊ù ◊™◊ú◊û◊ô◊ì ◊û◊û◊ï◊§◊î ◊ú◊û◊¢◊®◊ö ◊©◊ú ◊î◊™◊©◊ï◊ë◊ï◊™ ◊©◊ú◊ï (◊û◊î◊®◊ê◊©◊ï◊†◊î ◊ú◊ê◊ó◊®◊ï◊†◊î). ◊°◊õ◊ù ◊ê◊™ ◊®◊û◊™ ◊î◊î◊ë◊†◊î ◊î◊õ◊ô◊™◊™◊ô◊™, ◊ñ◊î◊î ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊™◊©◊ï◊ë◊ï◊™◊ô◊î◊ù ◊û◊¶◊ë◊ô◊¢◊ï◊™ ◊¢◊ú ◊ß◊ï◊©◊ô, ◊ï◊¶◊ô◊ô◊ü ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊î◊®◊ê◊ï ◊©◊ô◊§◊ï◊® ◊û◊©◊û◊¢◊ï◊™◊ô ◊ë◊ô◊ü ◊î◊í◊®◊°◊ê◊ï◊™:\n\n${allAnswers}`
                : `Here are student responses to a question. Each student name maps to an array of their answers (from first to last). Summarize the class's understanding, identify students whose answers indicate difficulty, and point out students who showed significant improvement across versions:\n\n${allAnswers}`;
        } else { // keywords
            prompt = (lang === 'he')
                ? `◊ñ◊î◊î ◊ê◊™ 10 ◊û◊ô◊ú◊ï◊™ ◊î◊û◊§◊™◊ó ◊î◊†◊§◊ï◊¶◊ï◊™ ◊ï◊î◊û◊©◊û◊¢◊ï◊™◊ô◊ï◊™ ◊ë◊ô◊ï◊™◊® ◊û◊î◊™◊©◊ï◊ë◊ï◊™ ◊î◊ë◊ê◊ï◊™:\n\n${allAnswers}`
                : `Extract the 10 most frequent and significant keywords from the following text:\n\n${allAnswers}`;
        }

        // 4. Send prompt to AI
        this.sdk.sendAIMessage(prompt, lang);
        this.addActivity(`üìà Sent "situation analysis" to AI.`);

        // 5. Reset responses in Firestore for a new round
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.update({ 'settings.currentPoll.responses': {} });
            this.addActivity(`üîÑ Response repository in Firestore reset and ready for next round.`);
        } catch (error) {
            console.error("Error resetting poll responses:", error);
        }
    }

    async generateLessonSummary() {
        this.addActivity('üìä Preparing comprehensive summary report...');
        if (this.sdk && this.sdk.aiContainer) {
            if (this.sdk.aiContainer.style.display === 'none') {
                this.sdk.toggleAI();
            }
        }
        try {
            const historySnapshot = await this.sdk.db.collection('rooms')
                .doc(this.sdk.getRoomCode())
                .collection('questionHistory')
                .orderBy('createdAt')
                .get();
            let fullLessonData = [];
            historySnapshot.forEach(doc => {
                fullLessonData.push(doc.data());
            });
            const summaryPrompt = this.buildLessonSummaryPrompt(fullLessonData);
            const language = this.sdk.getInterfaceLanguage();
            await this.sdk.sendAIMessage(summaryPrompt, language);
            this.addActivity('‚úÖ Summary report sent to AI');
            document.getElementById('end-lesson-modal')?.classList.remove('visible');
        } catch (error) {
            console.error('üî• Error creating summary report:', error);
            this.addActivity('‚ùå Error creating summary report');
        }
    }

    buildLessonSummaryPrompt(lessonData) {
        const language = this.sdk.getInterfaceLanguage();
        if (language === 'he') {
            let prompt = `◊ì◊ï◊ó ◊°◊ô◊õ◊ï◊ù ◊û◊ß◊ô◊£ ◊ú◊©◊ô◊¢◊ï◊®\n\n`;
            prompt += `◊û◊°◊§◊® ◊©◊ê◊ú◊ï◊™ ◊©◊†◊©◊ê◊ú◊ï: ${lessonData.length}\n\n`;
            lessonData.forEach((question, index) => {
                prompt += `◊©◊ê◊ú◊î ${index + 1}: ${question.question || '◊©◊ê◊ú◊î ◊ú◊ú◊ê ◊õ◊ï◊™◊®◊™'}\n`;
                prompt += `◊™◊©◊ï◊ë◊ï◊™ ◊î◊™◊ú◊û◊ô◊ì◊ô◊ù:\n`;
                Object.entries(question.responses || {}).forEach(([student, answers]) => {
                    if (Array.isArray(answers)) {
                        prompt += `  ${student}: ${answers.join(' ‚Üí ')}\n`;
                    } else {
                        prompt += `  ${student}: ${answers}\n`;
                    }
                });
                prompt += `\n`;
            });
            prompt += `◊ê◊†◊ê ◊°◊õ◊ù:\n`;
            prompt += `1. ◊î◊™◊ß◊ì◊û◊ï◊™ ◊õ◊ú◊ú◊ô◊™ ◊©◊ú ◊î◊õ◊ô◊™◊î\n`;
            prompt += `2. ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊î◊®◊ê◊ï ◊©◊ô◊§◊ï◊® ◊û◊©◊û◊¢◊ï◊™◊ô\n`;
            prompt += `3. ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊†◊ñ◊ß◊ß◊ô◊ù ◊ú◊™◊©◊ï◊û◊™ ◊ú◊ë ◊†◊ï◊°◊§◊™\n`;
            prompt += `4. ◊†◊ï◊©◊ê◊ô◊ù ◊©◊†◊ï◊™◊®◊ï ◊ú◊ê ◊ë◊®◊ï◊®◊ô◊ù\n`;
            prompt += `5. ◊î◊û◊ú◊¶◊ï◊™ ◊ú◊©◊ô◊¢◊ï◊® ◊î◊ë◊ê\n`;
            return prompt;
        } else {
            let prompt = `Comprehensive Lesson Summary Report\n\n`;
            prompt += `Number of questions asked: ${lessonData.length}\n\n`;
            lessonData.forEach((question, index) => {
                prompt += `Question ${index + 1}: ${question.question || 'Untitled question'}\n`;
                prompt += `Student responses:\n`;
                Object.entries(question.responses || {}).forEach(([student, answers]) => {
                    if (Array.isArray(answers)) {
                        prompt += `  ${student}: ${answers.join(' ‚Üí ')}\n`;
                    } else {
                        prompt += `  ${student}: ${answers}\n`;
                    }
                });
                prompt += `\n`;
            });
            prompt += `Please summarize:\n`;
            prompt += `1. Overall class progress\n`;
            prompt += `2. Students who showed significant improvement\n`;
            prompt += `3. Students who need additional attention\n`;
            prompt += `4. Topics that remain unclear\n`;
            prompt += `5. Recommendations for next lesson\n`;
            return prompt;
        }
    }

    async closeOpenEndedQuestion() {
        if (!this.sdk) return;
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            const roomDoc = await roomRef.get();
            const currentPoll = roomDoc.data()?.settings?.currentPoll;
            if (currentPoll && currentPoll.isActive) {
                await this.sdk.saveQuestionToHistory(currentPoll);
                await roomRef.update({ 'settings.currentPoll.isActive': false });
                this.addActivity('üìù Open question closed - student modal closed');
            }
            document.getElementById('open-question-modal')?.classList.remove('visible');
        } catch (error) {
            console.error('üî• Error closing open question:', error);
            this.addActivity('‚ùå Error closing question');
        }
    }

    // ◊î◊ï◊°◊§◊™ ◊û◊™◊ï◊ì◊î ◊ú◊û◊ó◊ú◊ß◊î TeacherDashboard
    async resetStudentScreens() {
        if (!this.sdk) return;
        console.log("üîÑ Resetting all student screens...");
        try {
            // ◊©◊ú◊ó ◊§◊ß◊ï◊ì◊î ◊ú◊†◊ß◊ï◊™ ◊ê◊™ ◊î-iframe
            await this.sdk.sendCommand('LOAD_CONTENT', { url: 'about:blank' });
            // ◊¢◊¶◊ï◊® ◊õ◊ú ◊°◊ß◊® ◊§◊¢◊ô◊ú
            await this.sdk.stopPoll();
            this.addActivity('‚èπÔ∏è All student screens have been cleared.');
        } catch (error) {
            console.error("Error resetting student screens:", error);
        }
    }

    // =======================================================
    // ========= CONTENT & PROMPT MANAGEMENT LOGIC ===========
    // =======================================================

    async loadPersonalData() {
        if (!this.sdk || !this.sdk.auth.currentUser) return;
        const teacherUid = this.sdk.auth.currentUser.uid;

        // Load personal content
        try {
            const contentRef = this.sdk.db.collection('teachers').doc(teacherUid).collection('personal_links');
            const contentSnapshot = await contentRef.get();
            this.personalContent = contentSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        } catch (error) {
            console.error("Error loading personal content:", error);
            this.personalContent = [];
        }

        // Load personal prompts
        try {
            const promptsRef = this.sdk.db.collection('teachers').doc(teacherUid).collection('personal_prompts');
            const promptsSnapshot = await promptsRef.get();
            this.personalPrompts = promptsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        } catch (error) {
            console.error("Error loading personal prompts:", error);
            this.personalPrompts = [];
        }

        this.debugLog('‚úÖ Personal content and prompts loaded', {
            content: this.personalContent,
            prompts: this.personalPrompts
        });
    }

    // === Gemini approach for modal event listeners ===
    setupContentManager() {
        const openBtn = document.getElementById('open-content-manager-btn');
        if (openBtn) {
            openBtn.addEventListener('click', () => {
                const modal = document.getElementById('content-manager-modal');
                if (modal) {
                    // Initialize listeners inside the modal only ONCE, the first time it's opened.
                    if (!this.isContentManagerInitialized) {
                        this.initModalEventListeners(modal);
                        this.isContentManagerInitialized = true;
                    }
                    this.renderPersonalContentList();
                    this.renderPersonalPromptsList();
                    this.populateActivePromptSelector();
                    modal.classList.add('visible');
                }
            });
        } else {
            // This log helps if the button itself is missing for some reason.
            console.error("Could not find the 'open-content-manager-btn'.");
        }
    }

    initModalEventListeners(modal) {
        // Tab switching logic
        modal.querySelectorAll('.tab-link').forEach(button => {
            button.addEventListener('click', () => {
                modal.querySelectorAll('.tab-link, .tab-content').forEach(el => el.classList.remove('active'));
                button.classList.add('active');
                document.getElementById(button.dataset.tab).classList.add('active');
            });
        });

        // Close modal button
        modal.querySelector('.modal-close').addEventListener('click', () => modal.classList.remove('visible'));

        // Content Management Forms & Buttons
        document.getElementById('personal-content-form').addEventListener('submit', this.handleSavePersonalContent.bind(this));
        document.getElementById('cancel-content-edit').addEventListener('click', this.resetContentForm.bind(this));

        // Prompt Management Forms & Buttons
        document.getElementById('personal-prompt-form').addEventListener('submit', this.handleSavePersonalPrompt.bind(this));
        document.getElementById('cancel-prompt-edit').addEventListener('click', this.resetPromptForm.bind(this));
        document.getElementById('generate-prompt-suggestion-btn').addEventListener('click', this.generatePromptSuggestion.bind(this));
        document.getElementById('active-prompt-selector').addEventListener('change', this.setActivePrompt.bind(this));
    }

    renderPersonalContentList() {
        const list = document.getElementById('personal-content-list');
        if (!list) return;
        list.innerHTML = '';
        (this.personalContent || []).forEach(item => {
            const el = document.createElement('div');
            el.className = 'list-item';
            el.innerHTML = `
                <span class="list-item-icon">${item.icon}</span>
                <div class="list-item-details">
                    <div class="list-item-title">${item.title}</div>
                    <div class="list-item-desc">${item.description}</div>
                </div>
                <div class="list-item-actions">
                    <button class="edit-btn" data-id="${item.id}">‚úèÔ∏è</button>
                    <button class="delete-btn" data-id="${item.id}">üóëÔ∏è</button>
                </div>
            `;
            el.querySelector('.edit-btn').addEventListener('click', () => this.editContentItem(item.id));
            el.querySelector('.delete-btn').addEventListener('click', () => this.deleteContentItem(item.id));
            list.appendChild(el);
        });
    }

    renderPersonalPromptsList() {
        const list = document.getElementById('personal-prompts-list');
        if (!list) return;
        list.innerHTML = '';
        (this.personalPrompts || []).forEach(prompt => {
            const el = document.createElement('div');
            el.className = 'list-item';
            el.innerHTML = `
                <span class="list-item-icon">üéØ</span>
                <div class="list-item-details">
                    <div class="list-item-title">${prompt.title}</div>
                    <div class="list-item-desc">${prompt.prompt}</div>
                </div>
                <div class="list-item-actions">
                    <button class="edit-btn" data-id="${prompt.id}">‚úèÔ∏è</button>
                    <button class="delete-btn" data-id="${prompt.id}">üóëÔ∏è</button>
                </div>
            `;
            el.querySelector('.edit-btn').addEventListener('click', () => this.editPromptItem(prompt.id));
            el.querySelector('.delete-btn').addEventListener('click', () => this.deletePromptItem(prompt.id));
            list.appendChild(el);
        });
    }

    populateActivePromptSelector() {
        const selector = document.getElementById('active-prompt-selector');
        if (!selector) return;
        selector.innerHTML = '<option value="general">General (Open Context)</option>';
        (this.personalPrompts || []).forEach(prompt => {
            const option = document.createElement('option');
            option.value = prompt.id;
            option.textContent = prompt.title;
            selector.appendChild(option);
        });
        // You might want to get the active prompt from room settings and set it here
    }

    async handleSavePersonalContent(e) {
        e.preventDefault();
        const teacherUid = this.sdk.auth.currentUser.uid;
        const form = e.target;
        const contentId = form.querySelector('#content-id').value;
        const data = {
            title: form.querySelector('#content-title').value,
            description: form.querySelector('#content-desc').value,
            icon: form.querySelector('#content-icon').value,
            url: form.querySelector('#content-url').value,
        };

        const collectionRef = this.sdk.db.collection('teachers').doc(teacherUid).collection('personal_links');
        if (contentId) { // Update
            await collectionRef.doc(contentId).update(data);
        } else { // Create
            await collectionRef.add(data);
        }
        await this.loadPersonalData();
        this.renderPersonalContentList();
        this.resetContentForm();
    }

    editContentItem(id) {
        const item = this.personalContent.find(c => c.id === id);
        const form = document.getElementById('personal-content-form');
        if (!form) return;
        form.querySelector('#content-id').value = item.id;
        form.querySelector('#content-title').value = item.title;
        form.querySelector('#content-desc').value = item.description;
        form.querySelector('#content-icon').value = item.icon;
        form.querySelector('#content-url').value = item.url;
        const cancelBtn = document.getElementById('cancel-content-edit');
        if (cancelBtn) cancelBtn.style.display = 'inline-block';
    }

    resetContentForm() {
        const form = document.getElementById('personal-content-form');
        if (form) form.reset();
        const idInput = document.getElementById('content-id');
        if (idInput) idInput.value = '';
        const cancelBtn = document.getElementById('cancel-content-edit');
        if (cancelBtn) cancelBtn.style.display = 'none';
    }

    async deleteContentItem(id) {
        if (!confirm('Are you sure you want to delete this content?')) return;
        const teacherUid = this.sdk.auth.currentUser.uid;
        await this.sdk.db.collection('teachers').doc(teacherUid).collection('personal_links').doc(id).delete();
        await this.loadPersonalData();
        this.renderPersonalContentList();
    }

    async generatePromptSuggestion() {
        const subject = document.getElementById('prompt-subject-selector')?.value;
        const keywords = document.getElementById('prompt-keywords-input')?.value;

        if (!subject) {
            alert('Please select a main subject first.');
            return;
        }

        let goalDescription = `The main subject of the lesson is '${subject}'.`;
        if (keywords) {
            goalDescription += ` The specific topics or keywords are: '${keywords}'.`;
        }

        const metaPrompt = `You are an expert in pedagogical prompt engineering. A teacher described their lesson goal as follows: "${goalDescription}". Based on this, write an effective system prompt in English. The prompt should instruct an AI to act as a helpful teaching assistant, answer only questions directly related to the specified subject and keywords, and politely decline off-topic questions by reminding the student to focus on the lesson.`;

        this.addActivity('ü§ñ Asking AI for a prompt suggestion...');
        const result = await this.sdk.sendAIMessage(metaPrompt, 'en', true); // true to bypass context
        if (result && result.text) {
            const promptContent = document.getElementById('prompt-content');
            if (promptContent) promptContent.value = result.text;
            // Automatically generate a title
            const title = subject + (keywords ? `: ${keywords}` : '');
            const promptTitle = document.getElementById('prompt-title');
            if (promptTitle) promptTitle.value = title;
        } else {
            alert('The AI could not generate a suggestion. Please try again.');
        }
    }

    async handleSavePersonalPrompt(e) {
        e.preventDefault();
        const teacherUid = this.sdk.auth.currentUser.uid;
        const form = e.target;
        const promptId = form.querySelector('#prompt-id').value;
        const data = {
            title: form.querySelector('#prompt-title').value,
            prompt: form.querySelector('#prompt-content').value,
        };

        const collectionRef = this.sdk.db.collection('teachers').doc(teacherUid).collection('personal_prompts');
        if (promptId) { // Update
            await collectionRef.doc(promptId).update(data);
        } else { // Create
            await collectionRef.add(data);
        }
        await this.loadPersonalData();
        this.renderPersonalPromptsList();
        this.populateActivePromptSelector();
        this.resetPromptForm();
    }

    editPromptItem(id) {
        const item = this.personalPrompts.find(p => p.id === id);
        const form = document.getElementById('personal-prompt-form');
        if (!form) return;
        form.querySelector('#prompt-id').value = item.id;
        form.querySelector('#prompt-title').value = item.title;
        form.querySelector('#prompt-content').value = item.prompt;
        const cancelBtn = document.getElementById('cancel-prompt-edit');
        if (cancelBtn) cancelBtn.style.display = 'inline-block';
    }

    resetPromptForm() {
        const form = document.getElementById('personal-prompt-form');
        if (form) form.reset();
        const idInput = document.getElementById('prompt-id');
        if (idInput) idInput.value = '';
        const cancelBtn = document.getElementById('cancel-prompt-edit');
        if (cancelBtn) cancelBtn.style.display = 'none';
        const promptGoalInput = document.getElementById('prompt-goal-input');
        if (promptGoalInput) promptGoalInput.value = '';
    }

    async deletePromptItem(id) {
        if (!confirm('Are you sure you want to delete this prompt?')) return;
        const teacherUid = this.sdk.auth.currentUser.uid;
        await this.sdk.db.collection('teachers').doc(teacherUid).collection('personal_prompts').doc(id).delete();
        await this.loadPersonalData();
        this.renderPersonalPromptsList();
        this.populateActivePromptSelector();
    }

    async setActivePrompt(e) {
        const promptId = e.target.value;
        const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
        await roomRef.update({ 'settings.active_prompt_id': promptId === 'general' ? null : promptId });
        this.addActivity(`‚úÖ AI context set to: ${e.target.options[e.target.selectedIndex].text}`);
    }

    // ========== AUTHENTICATION METHODS ==========

    async handleSuccessfulLogin(user) {
        console.log("üöÄ Handling successful login...");
        this.sdk = new ClassroomSDK();

        // 1. Get or create teacher profile
        await this.getOrCreateTeacherProfile(user);

        // 2. Initialize SDK
        await this.sdk.init('teacher-dashboard', user);
        this.debugLog(`‚úÖ Teacher dashboard initialized with room: ${this.sdk.getRoomCode()}`);

        // 3. Setup UI and Listeners
        this.sdk.createAIInterface();
        this.initializeTeacherAI();
        this.sdk.listenForStudents(this.updateStudentsList.bind(this));
        this.sdk.listenForMessages(this.addMessage.bind(this));
        this.sdk.listenForRoomUpdates(this.handleRoomUpdates.bind(this)); // Use a dedicated handler

        this.updateConnectionStatus(true);
        this.setupEventListeners(); // Re-run to attach listeners to new elements
        this.updateRoomDisplay();

        // 4. ◊ò◊¢◊ü ◊™◊õ◊†◊ô◊ù ◊ï◊î◊†◊ó◊ô◊ï◊™ ◊ê◊ô◊©◊ô◊ï◊™
        await this.loadPersonalData();

        // 5. Show the main app UI
        document.querySelector('.header').style.display = 'block';
        document.querySelector('.main-content').style.display = 'flex';
        document.getElementById('login-container').style.display = 'none';
        document.getElementById('loading-overlay').classList.add('hidden');
        console.log("üéâ Dashboard is ready and visible.");
    }

    async getOrCreateTeacherProfile(user) {
        const teacherRef = this.sdk.db.collection('teachers').doc(user.uid);
        const doc = await teacherRef.get();

        if (!doc.exists) {
            console.log(`Creating new teacher profile for: ${user.displayName}`);
            await teacherRef.set({
                displayName: user.displayName,
                email: user.email,
                photoURL: user.photoURL,
                created_at: firebase.firestore.FieldValue.serverTimestamp(),
                last_login: firebase.firestore.FieldValue.serverTimestamp()
            });
        } else {
            console.log(`Teacher ${user.displayName} exists. Updating last login.`);
            await teacherRef.update({
                last_login: firebase.firestore.FieldValue.serverTimestamp()
            });
        }
    }

    showLoginScreen() {
        document.querySelector('.header').style.display = 'none';
        document.querySelector('.main-content').style.display = 'none';
        document.getElementById('loading-overlay').classList.add('hidden');
        const loginContainer = document.getElementById('login-container');
        loginContainer.style.display = 'flex';

        document.getElementById('google-signin-btn').onclick = () => this.signInWithProvider('google');
        document.getElementById('microsoft-signin-btn').onclick = () => this.signInWithProvider('microsoft');
    }

    async signInWithProvider(providerName) {
        let provider;
        if (providerName === 'google') {
            provider = new firebase.auth.GoogleAuthProvider();
        } else if (providerName === 'microsoft') {
            provider = new firebase.auth.OAuthProvider('microsoft.com');
        } else {
            return;
        }

        try {
            await firebase.auth().signInWithPopup(provider);
        } catch (error) {
            console.error(`${providerName} Sign-In Error:`, error);
            alert(`Failed to sign in with ${providerName}.`);
        }
    }

    logout() {
        firebase.auth().signOut();
    }

    // Helper to prevent code duplication
    handleRoomUpdates(roomData) {
        if (!roomData || !roomData.settings) return;

        if (roomData.settings.currentPoll) {
            this.displayPollResults(roomData.settings.currentPoll);
        }

        const aiIsActiveInDB = roomData.settings.ai_active === true;
        if (this.isAiActive !== aiIsActiveInDB) {
            this.isAiActive = aiIsActiveInDB;
            this.updateAIButton();
        }
    }
}

// Global functions for HTML buttons with English support
function sendQuickMessage(message) {
    if (window.teacherDashboard) {
        window.teacherDashboard.sendMessageToClass(message);
    }
}

function sendGameContent(url) {
    if (window.teacherDashboard) {
        window.teacherDashboard.sendCommand('LOAD_CONTENT', { url });
    }
}

function sendCustomContent() {
    document.getElementById('customContentModal').classList.add('visible');
}

// Global functions - updated
function toggleAIForClass() {
    if (window.teacherDashboard) {
        window.teacherDashboard.toggleAIForClass();
    }
}

function switchAIModel(model) {
    if (window.teacherDashboard) {
        window.teacherDashboard.switchAIModel(model);
    }
}

function resetClassroomData() {
    if (window.teacherDashboard) {
        window.teacherDashboard.resetClassroomData();
    }
}

function toggleDebug() {
    const debugConsole = document.querySelector('.enhanced-debug-console');
    if (debugConsole) {
        debugConsole.classList.toggle('visible');
    }
}

function sendMessage() {
    document.getElementById('messageModal').classList.add('visible');
}

function exportData() {
    if (!window.teacherDashboard) return;
    
    const data = {
        students: window.teacherDashboard.students,
        activities: window.teacherDashboard.activities,
        timestamp: new Date().toISOString(),
        roomCode: window.teacherDashboard.sdk?.getRoomCode()
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `classroom-data-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
}

function updateAIMenuStatus(isActive) {
    const aiMenuItems = document.querySelectorAll('.ai-menu-item');
    aiMenuItems.forEach(item => {
        item.style.opacity = isActive ? '1' : '0.5';
        item.style.pointerEvents = isActive ? 'auto' : 'none';
    });
}

// Function to copy classroom ID to clipboard with English support
function copyClassroomId() {
    if (!window.teacherDashboard || !window.teacherDashboard.sdk) {
        alert('System is not ready yet');
        return;
    }
    
    const roomCode = window.teacherDashboard.sdk.getRoomCode();
    
    // Copy to clipboard
    navigator.clipboard.writeText(roomCode).then(() => {
        // Change button text temporarily
        const copyBtn = document.getElementById('copyClassroomIdBtn');
        if (copyBtn) {
            const originalText = copyBtn.textContent;
            copyBtn.textContent = '‚úÖ Copied!';
            copyBtn.style.background = 'rgba(76, 175, 80, 0.3)';
            
            setTimeout(() => {
                copyBtn.textContent = originalText;
                copyBtn.style.background = 'rgba(255,255,255,0.2)';
            }, 2000);
        }
        
        // User notification
        if (window.teacherDashboard) {
            window.teacherDashboard.addActivity('üìã Classroom ID copied to clipboard');
        }
    }).catch(err => {
        console.error('Copy error:', err);
        alert('Error copying ID. Try copying manually.');
    });
}

// Function to test AI status with English messages
function testAIService() {
    if (window.teacherDashboard) {
        window.teacherDashboard.testAIService().then(result => {
            if (result) {
                alert('‚úÖ AI service is available and working properly!');
            } else {
                alert('‚ùå AI service is currently unavailable. Check settings.');
            }
        });
    }
}

// üîß Add English support for the entire system
document.addEventListener('DOMContentLoaded', function() {
    // Set text direction for all relevant elements
    const ltrElements = document.querySelectorAll('.message-item, .activity-item, .student-item');
    ltrElements.forEach(element => {
        element.style.direction = 'ltr';
        element.style.textAlign = 'left';
    });
    
    // Set font that supports English
    const style = document.createElement('style');
    style.textContent = `
        body, * {
            font-family: 'Segoe UI', Tahoma, Arial, 'Roboto', 'Open Sans', sans-serif !important;
        }
        
        .message-content, .activity-text, .student-name {
            direction: ltr !important;
            text-align: left !important;
            unicode-bidi: embed !important;
        }
        
        .debug-log, .debug-content {
            direction: ltr !important;
            text-align: left !important;
        }
        
        /* Fix English texts in interface */
        .dropdown-title, .dropdown-desc, .tool-label, .tool-desc {
            direction: ltr !important;
            text-align: left !important;
        }
    `;
    document.head.appendChild(style);
});

// Debug function with English logs
function debugClassroom() {
    if (!window.teacherDashboard) {
        console.log('Teacher dashboard not initialized');
        return;
    }
    
    const debug = {
        'Room': window.teacherDashboard.sdk?.getRoomCode(),
        'Students': window.teacherDashboard.students.length,
        'AI Active': window.teacherDashboard.isAiActive,
        'AI Model': window.teacherDashboard.currentAiModel,
        'SDK Connected': !!window.teacherDashboard.sdk,
        'Init Time': new Date().toLocaleTimeString('en-US')
    };
    
    console.table(debug);
    return debug;
}

================================================================================
File 5/11: public\js\student-app.js
================================================================================

/*
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */
// ================== START OF FILE: public/js/student-app.js (COMPLETE AND FIXED) ==================
const App = {
    classroom: null,
    currentPollId: null, // Variable to track the currently displayed poll

    getOrCreateStudentId: function() {
        let studentId = sessionStorage.getItem('studentId');
        if (!studentId) {
            studentId = 'student_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('studentId', studentId);
        }
        return studentId;
    },

    init: function() {
        this.loadRoomCodeFromURL();
        document.getElementById('login-form')?.addEventListener('submit', this.handleLogin.bind(this));
    },

    loadRoomCodeFromURL: function() {
        const params = new URLSearchParams(window.location.search);
        const roomCode = params.get('classroom');
        if (roomCode) {
            const input = document.getElementById('teacher-uid');
            if(input) input.value = roomCode;
        }
    },

    handleLogin: async function(event) {
        event.preventDefault();
        const playerName = document.getElementById('player-name').value.trim();
        const roomCode = document.getElementById('teacher-uid').value.trim();
        const loginButton = event.target.querySelector('button');
        if (!playerName || !/^\d{4}$/.test(roomCode)) {
            alert('Name and a 4-digit room code are required!');
            return;
        }

        loginButton.textContent = 'Joining...';
        loginButton.disabled = true;

        try {
            this.classroom = new ClassroomSDK();
            const studentId = this.getOrCreateStudentId();
            await this.classroom.init('student-app', studentId, playerName, roomCode);

            document.getElementById('login-container').style.display = 'none';
            document.getElementById('main-container').style.display = 'block';

            this.classroom.createChatInterface();
            this.classroom.createAIInterface();
            this.classroom.createPollInterface();
            this.classroom.listenForRoomUpdates(this.stateManager.bind(this));

            this.classroom.listenForMessages((messages) => {
                const chatContainer = document.getElementById('classroom-chat-container');
                const isChatHidden = !chatContainer || chatContainer.style.display === 'none';

                messages.forEach(msg => {
                    this.classroom.addChatMessage(msg.sender, msg.content, msg);

                    if (isChatHidden && msg.is_teacher) {
                        this.classroom.toggleChat();
                    }
                });
            });

        } catch (error) {
            console.error("‚ùå Failed to initialize student app:", error);
            alert(`Failed to join the room: ${error.message}\nPlease check the room code and try again.`);
            loginButton.textContent = 'Join Lesson';
            loginButton.disabled = false;
        }
    },

    // The new central State Manager function
    stateManager: function(roomData) {
        if (!roomData || !roomData.settings) return;

        const settings = roomData.settings;
        const pollData = settings.currentPoll;
        const command = settings.current_command;

        // --- AI State Management ---
        // ** THE MAIN FIX IS HERE **
        // We no longer hide the AI button. Instead, we update the SDK's internal state.
        // The SDK's sendAIMessage function will now handle the logic of checking if AI is active.
        this.classroom.isAiActiveForClass = settings.ai_active === true;

        // --- Poll State Management ---
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollBadge = document.getElementById('poll-badge');
        const pollIsActive = pollData && pollData.isActive;

        if (pollBadge && pollContainer) {
            pollContainer.dataset.active = pollIsActive ? 'true' : 'false';
            pollBadge.style.display = pollIsActive ? 'block' : 'none';
        }

        if (pollIsActive) {
            // If a new poll has arrived, render its content and OPEN the window
            if (this.currentPollId !== pollData.id) {
                this.currentPollId = pollData.id;
                this.renderPollInterface(pollData); // This function will also make the window visible
            }
        } else {
            // If the poll has been stopped by the teacher, force-close the window
            if (this.currentPollId !== null) {
                this.clearPollInterface(); // This function now closes the window
                this.currentPollId = null;
            }
        }

        // --- Content Command Management ---
        if (command && command.command === 'LOAD_CONTENT') {
            const iframe = document.getElementById('content-frame');
            const newUrl = command.payload.url || 'about:blank';
            if (iframe && iframe.src !== newUrl) {
                iframe.src = newUrl;
            }
        }
    },

    renderPollInterface: function(pollData) {
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollContentArea = document.getElementById('classroom-poll-content-area');
        if (!pollContainer || !pollContentArea) return;

        // Show the poll window and render content inside it
        pollContainer.style.display = 'block';

        // Build the poll UI based on its type
        if (pollData.type === 'open_text') {
            pollContentArea.innerHTML = `
                <p style="margin-top:0; margin-bottom:15px; font-weight:500;">The teacher is asking a question. Please type your answer below.</p>
                <textarea id="open-answer-input" placeholder="Write your answer here..." style="width: 100%; height: 80px; padding: 10px; border-radius: 6px; border: 1px solid #ccc; box-sizing: border-box;"></textarea>
                <button id="submit-open-answer" style="width: 100%; padding: 12px; margin-top: 10px; border: none; background: #007bff; color: white; border-radius: 6px; cursor: pointer;">Submit Answer</button>
            `;
            document.getElementById('submit-open-answer').onclick = (event) => {
                const answerInput = document.getElementById('open-answer-input');
                const answer = answerInput.value.trim();
                const submitBtn = event.currentTarget;

                if (answer) {
                    this.classroom.submitPollAnswer(answer);
                    answerInput.value = '';
                    submitBtn.textContent = '‚úÖ Answer Sent!';
                    submitBtn.disabled = true;

                    setTimeout(() => {
                        submitBtn.textContent = 'Submit Answer';
                        submitBtn.disabled = false;
                    }, 2000);
                }
            };
        } else { 
            const labels = (pollData.type === 'yes_no') ? ['Yes', 'No'] : ['1', '2', '3', '4'];
            pollContentArea.innerHTML = `<p style="margin-top:0; margin-bottom:15px; font-weight:500;">The teacher is asking a quick question:</p>`;

            const buttonsWrapper = document.createElement('div');
            buttonsWrapper.style.cssText = 'display: flex; gap: 10px; flex-wrap: wrap;';

            for (let i = 1; i <= pollData.options; i++) {
                const button = document.createElement('button');
                button.textContent = labels[i-1];
                button.style.cssText = 'flex-grow: 1; padding: 12px; border: 1px solid #ccc; background: #f0f0f0; border-radius: 6px; cursor: pointer;';
                button.onclick = () => {
                    this.classroom.submitPollAnswer(i);
                    pollContentArea.innerHTML = '<p style="text-align:center; font-weight: bold; color: #28a745;">Thank you for your answer!</p>';
                };
                buttonsWrapper.appendChild(button);
            }
            pollContentArea.appendChild(buttonsWrapper);
        }
    },

    clearPollInterface: function() {
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollContentArea = document.getElementById('classroom-poll-content-area');

        if (pollContainer) {
            pollContainer.style.display = 'none'; // Hide the window
            pollContainer.dataset.active = 'false';
        }
        if (pollContentArea) {
            pollContentArea.innerHTML = ''; // Clear its content for the next poll
        }
    }
};

document.addEventListener('DOMContentLoaded', () => {
    App.init();
});
// ================== END OF FILE ==================

================================================================================
File 6/11: public\index.html
================================================================================

<!DOCTYPE html>
<!--
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
-->
<html lang="en" dir="ltr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher Dashboard - ClassroomSDK</title>
    <!-- CSS Link -->
    <link rel="stylesheet" href="css/teacher-dashboard.css">
</head>
<body>
    <div id="loading-overlay">
        <div class="spinner"></div>
    </div>
    <!-- ==================== NEW LOGIN SCREEN START ==================== -->
<div id="login-container" class="login-overlay" style="display: none;">
    <div class="login-box">
        <div class="logo">
            <span class="logo-icon">‚öôÔ∏è</span>
            <span class="logo-text">fireClass Control</span>
        </div>
        <p>Welcome, please sign in to continue.</p>

        <div class="signin-options-title">Signin Options</div>

        <div class="signin-options">
            <button id="google-signin-btn" class="signin-btn" title="Sign in with Google">
                <img src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" alt="Google Logo">
            </button>
            <button id="microsoft-signin-btn" class="signin-btn" title="Sign in with Microsoft">
                <img src="https://upload.wikimedia.org/wikipedia/commons/4/44/Microsoft_logo.svg" alt="Microsoft Logo">
            </button>
        </div>
    </div>
</div>
<!-- ===================== NEW LOGIN SCREEN END ===================== -->

    <!-- ==================== NEW HEADER START ==================== -->
<header class="header">
    <div class="nav-container">
        <!-- Left Side: Logo and Room Code -->
        <div class="header-left">
            <div class="logo">
                <span class="logo-icon">‚öôÔ∏è</span>
                <span class="logo-text">fireClass Control</span>
            </div>
            <div id="header-room-display" class="header-room-display">
                <span class="room-code-label">Room:</span>
                <span id="header-room-code" class="room-code-value">...</span>
                <img id="qr-code-image" class="qr-code" alt="QR Code" title="Click to copy student link"/>
            </div>
        </div>

        <!-- Center: Navigation Menu -->
        <nav class="header-center">
            <ul class="nav-menu">
                <!-- Quick Actions -->
                <li class="nav-item">
                    <a href="#" class="nav-link"><span class="nav-icon">‚ö°</span><span>Quick Actions</span></a>
                    <div class="dropdown">
                        <div class="dropdown-header">Quick actions for lesson management</div>
                        <a href="#" class="dropdown-item success-item" onclick="sendQuickMessage('Let\'s start the lesson!')"><span class="dropdown-icon">üéì</span><div class="dropdown-content"><div class="dropdown-title">Start Lesson</div><div class="dropdown-desc">Send message to all students</div></div></a>
                        <a href="#" class="dropdown-item warning-item" onclick="sendQuickMessage('Time for a break! Come back in 5 minutes.')"><span class="dropdown-icon">‚òï</span><div class="dropdown-content"><div class="dropdown-title">Break Time</div><div class="dropdown-desc">Announce break time</div></div></a>
                        <a href="#" class="dropdown-item" onclick="sendQuickMessage('The lesson has ended. Well done everyone!')"><span class="dropdown-icon">‚úÖ</span><div class="dropdown-content"><div class="dropdown-title">End Lesson</div><div class="dropdown-desc">Finish the lesson</div></div></a>
                        <a href="#" class="dropdown-item danger-item" onclick="resetClassroomData()"><span class="dropdown-icon">üîÑ</span><div class="dropdown-content"><div class="dropdown-title">New Lesson</div><div class="dropdown-desc">Clear all lesson data</div></div></a>
                    </div>
                </li>
                <!-- Games and Content -->
                <li class="nav-item">
                    <a href="#" class="nav-link" onclick="window.teacherDashboard.openContentModal()"><span class="nav-icon">üéÆ</span><span>Games & Content</span></a>
                </li>
                <!-- AI Management -->
                <li class="nav-item">
                    <a href="#" class="nav-link" id="aiMenuLink"><span class="nav-icon">ü§ñ</span><span>AI Management</span></a>
                    <div class="dropdown">
                        <div class="dropdown-header">AI Assistant settings for students</div>
                        <a href="#" class="dropdown-item" id="toggleAI" onclick="console.log('üü¢ TRACE: AI button clicked'); window.teacherDashboard.toggleAIForClass()"><span class="dropdown-icon" id="aiStatusIcon">üî¥</span><div class="dropdown-content"><div class="dropdown-title" id="aiStatusText">AI disabled for students</div><div class="dropdown-desc">Click to enable</div></div></a>
                        <div style="padding: 10px 20px; border-top: 1px solid #f0f2f5; background: #f8f9fa;"><strong style="font-size: 14px; color: #555;">üéØ Select model for class:</strong><div style="font-size: 12px; color: #777; margin-top: 2px;">Current model: <span class="current-ai-model">ChatGPT</span></div></div>
                        <a href="#" class="dropdown-item ai-model-btn" data-model="chatgpt" onclick="window.teacherDashboard.switchAIModel('chatgpt')"><span class="dropdown-icon">ü§ñ</span><div class="dropdown-content"><div class="dropdown-title">ChatGPT</div><div class="dropdown-desc">Advanced model from OpenAI</div></div></a>
                        <a href="#" class="dropdown-item ai-model-btn" data-model="claude" onclick="window.teacherDashboard.switchAIModel('claude')"><span class="dropdown-icon">üß†</span><div class="dropdown-content"><div class="dropdown-title">Claude</div><div class="dropdown-desc">Smart model from Anthropic</div></div></a>
                        <a href="#" class="dropdown-item ai-model-btn" data-model="gemini" onclick="window.teacherDashboard.switchAIModel('gemini')"><span class="dropdown-icon">‚ú®</span><div class="dropdown-content"><div class="dropdown-title">Gemini</div><div class="dropdown-desc">Google's model</div></div></a>
                    </div>
                </li>
                <!-- Tools -->
                <li class="nav-item">
                    <a href="#" class="nav-link"><span class="nav-icon">üîß</span><span>Tools</span></a>
                    <div class="dropdown">
                        <div class="dropdown-header">Utilities and debugging tools</div>
                        <a href="#" class="dropdown-item" onclick="toggleDebug()"><span class="dropdown-icon">üêõ</span><div class="dropdown-content"><div class="dropdown-title">Debug Console</div><div class="dropdown-desc">Show technical information</div></div></a>
                        <a href="#" class="dropdown-item" onclick="exportData()"><span class="dropdown-icon">üìä</span><div class="dropdown-content"><div class="dropdown-title">Export Data</div><div class="dropdown-desc">Save student list and messages</div></div></a>
                        <a href="#" class="dropdown-item" id="open-content-manager-btn">
                            <span class="dropdown-icon">üìö</span>
                            <div class="dropdown-content">
                                <div class="dropdown-title">Manage Content & AI</div>
                                <div class="dropdown-desc">Edit your personal links and AI prompts</div>
                            </div>
                        </a>
                    </div>
                </li>
                <!-- Polls -->
                <li class="nav-item">
                    <a href="#" class="nav-link"><span class="nav-icon">üìä</span><span>Polls</span></a>
                    <div class="dropdown">
                        <a href="#" class="dropdown-item" onclick="window.teacherDashboard.openPollCreationModal()"><span class="dropdown-icon">‚ûï</span><div class="dropdown-content"><div class="dropdown-title">Start New Poll</div><div class="dropdown-desc">Send quick question to class</div></div></a>
                    </div>
                </li>
                <!-- Reports -->
                <li class="nav-item">
                    <a href="#" class="nav-link"><span class="nav-icon">üìä</span><span>Reports</span></a>
                    <div class="dropdown">
                        <div class="dropdown-header">Reports and analytics (FFU)</div>
                        <a href="#" class="dropdown-item" onclick="generateLessonSummary()"><span class="dropdown-icon">üìã</span><div class="dropdown-content"><div class="dropdown-title">Lesson Summary</div><div class="dropdown-desc">Comprehensive AI report of entire lesson</div></div></a>
                        <a href="#" class="dropdown-item" onclick="exportLessonData()"><span class="dropdown-icon">üíæ</span><div class="dropdown-content"><div class="dropdown-title">Export Lesson Data</div><div class="dropdown-desc">Save all data to file</div></div></a>
                    </div>
                </li>
            </ul>
        </nav>

        <!-- Right Side: Actions & Status -->
        <div class="header-right">
            <!-- New End Lesson Button with Dropdown -->
            <div class="dropdown-action-btn" id="end-lesson-controls">
                <button class="main-action-icon">‚úñ</button>
                <div class="dropdown">
                    <a href="#" class="dropdown-item" id="reset-screens-action">
                        <span class="dropdown-icon">‚èπÔ∏è</span>
                        <div class="dropdown-content">
                            <div class="dropdown-title">Clear Screens</div>
                            <div class="dropdown-desc">Reset all student screens</div>
                        </div>
                    </a>
                    <a href="#" class="dropdown-item danger-item" id="end-lesson-action" onclick="document.getElementById('end-lesson-modal').classList.add('visible')">
                        <span class="dropdown-icon">üö´</span>
                        <div class="dropdown-content">
                            <div class="dropdown-title">Exit Lesson</div>
                            <div class="dropdown-desc">End lesson and show report options</div>
                        </div>
                    </a>
                </div>
            </div>

            <!-- New Logout Button -->
            <button id="logout-action-btn" class="main-action-icon green" title="Logout">üö™</button>

            <!-- New Connection Status Indicator -->
            <div id="connectionStatus" title="Connecting..."></div>
        </div>
    </div>
</header>
<!-- ===================== NEW HEADER END ===================== -->

    <!-- Main Content -->
    <div class="main-content" style="display: none;">
        <!-- Students Section -->
        <div class="section">
            <h2>üë• Connected Students (<span id="studentsCount">0</span>)</h2>
            <div id="studentsList" class="students-list">
                <div class="no-students">No students connected yet</div>
            </div>
        </div>

        <!-- Chat Section -->
        <div class="section">
            <h2>üí¨ Communication with Students</h2>
            <div id="messagesArea" class="chat-messages">
                <div class="no-messages">No messages yet</div>
            </div>
            <form id="chat-form" style="display: flex; gap: 10px;">
                <input type="text" id="chat-input" placeholder="Type a message to all students..." required style="flex-grow: 1;">
                <button type="submit">Send</button>
            </form>
        </div>

        <!-- Poll Section -->
        <div class="section" id="poll-section" style="display:none;">
            <h2>üìä Real-time Poll Results</h2>
            <div id="poll-results-container"></div>
            <button id="stop-poll-btn" style="background: #e74c3c; color: white; padding: 10px 20px; border: none; border-radius: 6px; cursor: pointer; margin-top: 20px;">End poll and hide results</button>
        </div>

        <!-- Activity Section -->
        <div class="section">
            <h2>üìä Recent Activity</h2>
            <div id="activitiesArea" class="activity-log">
                <div class="no-activity">No activity yet</div>
            </div>
        </div>
    </div>

    <!-- Templates -->
    <template id="studentTemplate">
        <div class="student-item">
            <div class="student-info">
                <span class="student-name"></span>
                <div class="student-actions"></div>
            </div>
        </div>
    </template>

    <!-- Private Message Modal -->
    <div id="privateMessageModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>‚úâÔ∏è Private Message</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body">
                <p>Sending private message to: <span id="privateMessageRecipient"></span></p>
                <textarea id="privateMessageText" placeholder="Write your private message..." rows="4"></textarea>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Cancel</button>
                <button onclick="sendPrivateMessage()" class="primary">Send Message</button>
            </div>
        </div>
    </div>

    <!-- Message Modal -->
    <div id="messageModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>üí¨ Send Message to Class</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body">
                <form id="messageForm">
                    <textarea id="messageText" placeholder="Write a message to all students..." rows="4" required></textarea>
                </form>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Cancel</button>
                <button type="submit" form="messageForm" class="primary">Send Message</button>
            </div>
        </div>
    </div>

    <!-- Custom Content Modal -->
    <div id="customContentModal" class="modal-overlay">
        <div class="modal-content" style="max-width: 600px;">
            <div class="modal-header">
                <h3>üì§ Send Game or Content to Students</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body" style="padding: 0;">
                <div id="game-list-container" style="padding: 20px; max-height: 300px; overflow-y: auto; border-bottom: 1px solid #eee;">
                </div>
                <div id="custom-url-section" style="padding: 20px; background: #f9f9f9;">
                    <p style="margin: 0 0 10px 0; font-weight: 500;">Or send custom link:</p>
                    <form id="customUrlForm" style="display: flex; gap: 10px;">
                        <input type="url" id="customUrlInput" placeholder="Enter full URL..." required style="flex-grow: 1; padding: 10px; border: 1px solid #ccc; border-radius: 6px;">
                        <button type="submit" class="primary" style="white-space: nowrap;">Send Link</button>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                 <a href="#" class="danger-item" onclick="window.teacherDashboard.sendCommand('LOAD_CONTENT', { url: 'about:blank' })" style="margin-right: auto; text-decoration:none; padding: 8px 12px; border-radius: 6px;">
                    ‚èπÔ∏è Stop content and clear screens
                </a>
                <button class="modal-close">Close</button>
            </div>
        </div>
    </div>

    <!-- Poll Creation Modal -->
    <div id="poll-creation-modal" class="modal-overlay">
        <div class="modal-content" style="max-width: 400px;">
            <div class="modal-header">
                <h3>Select Poll Type</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body" style="display: flex; flex-direction: column; gap: 15px;">
                <button class="poll-type-btn" data-type="yes_no">Yes / No Poll</button>
                <button class="poll-type-btn" data-type="multiple_choice">Multiple Choice Poll (1-4)</button>
                <button class="poll-type-btn" data-type="open_text">Open Question (Free text)</button>
            </div>
        </div>
    </div>

    <!-- Open Question Modal -->
    <div id="open-question-modal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Open Question Responses</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div id="open-question-results" class="modal-body" style="max-height: 400px; overflow-y: auto;"></div>
            <div class="modal-footer" style="display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; gap: 10px;">
                    <button id="ai-summarize-btn">Summarize with AI</button>
                    <button id="ai-keywords-btn">Extract Keywords</button>
                </div>
                <button id="close-open-question-btn" class="danger-item" style="padding: 8px 16px; border-radius: 6px; border: none; cursor: pointer;">
                    ‚èπÔ∏è End Poll
                </button>
            </div>
        </div>
    </div>

    <!-- End Lesson Modal -->
    <div id="end-lesson-modal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>üéì End of Lesson</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body">
                <p>The lesson has ended! Choose which report you'd like to generate:</p>
                <div style="display: flex; flex-direction: column; gap: 10px; margin-top: 15px;">
                    <button class="poll-type-btn" onclick="generateLessonSummary()">
                        üìã Comprehensive Summary Report
                    </button>
                    <button class="poll-type-btn" onclick="exportLessonData()">
                        üíæ Export Lesson Data
                    </button>
                    <button class="poll-type-btn" onclick="generateStudentProgress()">
                        üë• Student Progress Report
                    </button>
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Close</button>
            </div>
        </div>
    </div>

<!-- Scripts -->
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-functions-compat.js"></script>
    <script src="firebase-config.js"></script>

    <!-- ◊ò◊¢◊ü ◊ê◊™ ClassroomSDK ◊ú◊§◊†◊ô teacher-dashboard -->
    <script src="js/ClassroomSDK.js"></script>
    <script src="js/teacher-dashboard.js"></script>

    <!-- =========================================================== -->
    <!-- ========= CONTENT & AI PROMPT MANAGEMENT MODAL V2 ========= -->
    <!-- =========================================================== -->
    <div id="content-manager-modal" class="modal-overlay">
        <div class="modal-content" style="max-width: 1000px; height: 80vh;">
            <div class="modal-header">
                <h3>üìö Manage Your Content & AI Contexts</h3>
                <button class="modal-close">√ó</button>
            </div>
            <div class="modal-body" style="padding: 0; display: flex; flex-direction: column; height: calc(100% - 70px);">
                <!-- Tabs Navigation -->
                <div class="tabs">
                    <button class="tab-link active" data-tab="tab-my-content">My Content</button>
                    <button class="tab-link" data-tab="tab-my-prompts">My AI Prompts</button>
                </div>

                <!-- Tab 1: My Content (Links) -->
                <div id="tab-my-content" class="tab-content active two-column-grid">
                    <div class="column-left scrollable">
                        <h4>My Content Library</h4>
                        <div class="content-list" id="personal-content-list">
                            <!-- Personal links will be dynamically inserted here -->
                        </div>
                    </div>
                    <div class="column-right">
                        <h4>Add / Edit Content</h4>
                        <form id="personal-content-form">
                            <input type="text" id="content-title" placeholder="Title (e.g., 'PhET Simulation')" required>
                            <input type="text" id="content-desc" placeholder="Description" required>
                            <input type="text" id="content-icon" placeholder="Icon (e.g., 'üéØ')" required>
                            <input type="url" id="content-url" placeholder="https://..." required>
                            <input type="hidden" id="content-id">
                            <button type="submit">Save Content</button>
                            <button type="button" id="cancel-content-edit" class="secondary" style="display:none;">Cancel Edit</button>
                        </form>
                    </div>
                </div>

                <!-- Tab 2: My AI Prompts -->
                <div id="tab-my-prompts" class="tab-content two-column-grid">
                    <div class="column-left scrollable">
                        <h4>My Prompt Library</h4>
                        <div class="content-list" id="personal-prompts-list">
                            <!-- Personal prompts will be dynamically inserted here -->
                        </div>
                    </div>
                    <div class="column-right">
                        <h4>Prompt Creation Wizard</h4>
                        <div class="prompt-wizard">
                            <form id="personal-prompt-form">
                                <p>1. Select a main subject:</p>
                                <select id="prompt-subject-selector" required>
                                    <option value="" disabled selected>Choose a subject...</option>
                                    <option value="General">General</option>
                                    <option value="Math">Math</option>
                                    <option value="Physics">Physics</option>
                                    <option value="Biology">Biology</option>
                                    <option value="History">History</option>
                                    <option value="Literature">Literature</option>
                                    <option value="Computer Science">Computer Science</option>
                                </select>

                                <p>2. Add specific keywords (optional):</p>
                                <input type="text" id="prompt-keywords-input" placeholder="e.g., Pythagorean theorem, triangles">

                                <button type="button" id="generate-prompt-suggestion-btn">Create a Prompt for Me</button>

                                <hr>

                                <p>3. Refine the suggested prompt and save it:</p>
                                <input type="text" id="prompt-title" placeholder="Prompt Title (e.g., 'Pythagorean Theorem')" required>
                                <textarea id="prompt-content" rows="5" required></textarea>
                                <input type="hidden" id="prompt-id">
                                <button type="submit">Save Prompt</button>
                                <button type="button" id="cancel-prompt-edit" class="secondary" style="display:none;">Cancel Edit</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        console.log('üü¢ TRACE: index.html loaded');
        
        // ◊ï◊ï◊ì◊ê ◊©Firebase ◊û◊ê◊ï◊™◊ó◊ú
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();
        const auth = firebase.auth();
        const functions = firebase.functions();
        
        console.log('üîç Firebase initialized');
        console.log('üîç ClassroomSDK available:', typeof ClassroomSDK);
        
        window.teacherDashboard = new TeacherDashboard();
        firebase.auth().onAuthStateChanged(user => {
            if (user) {
                // User is signed in.
                console.log('‚úÖ User is signed in:', user.uid);
                document.getElementById('loading-overlay').classList.remove('hidden'); // Show loading
                window.teacherDashboard.handleSuccessfulLogin(user)
                    .catch(err => {
                        console.error("Login handling failed", err);
                        window.teacherDashboard.logout(); // Logout on error
                    });
            } else {
                // User is signed out.
                console.log('üö™ User is signed out.');
                window.teacherDashboard.showLoginScreen();
            }
        });
        
        // ◊§◊ï◊†◊ß◊¶◊ô◊ï◊™ ◊í◊ú◊ï◊ë◊ú◊ô◊ï◊™
        function sendQuickMessage(message) {
            console.log('üü¢ TRACE: sendQuickMessage called');
            if (window.teacherDashboard) {
                window.teacherDashboard.sendMessageToClass(message);
            } else {
                console.error('‚ùå teacherDashboard not available');
            }
        }

        function testAIService() {
            console.log('üü¢ TRACE: testAIService called');
            if (window.teacherDashboard && window.teacherDashboard.testAIService) {
                window.teacherDashboard.testAIService();
            } else {
                console.error('‚ùå testAIService not available');
            }
        }

        function sendPrivateMessage() {
            if (window.teacherDashboard && window.teacherDashboard.sendPrivateMessage) {
                window.teacherDashboard.sendPrivateMessage();
            }
        }

        // ◊ë◊ì◊ô◊ß◊™ debug ◊ú◊û◊¶◊ë ◊î◊û◊¢◊®◊õ◊™
        function debugSystemState() {
            console.log('üîç System Debug:');
            console.log('- window.teacherDashboard:', !!window.teacherDashboard);
            console.log('- teacherDashboard.sdk:', !!window.teacherDashboard?.sdk);
            console.log('- sdk.toggleAI:', !!window.teacherDashboard?.sdk?.toggleAI);
            console.log('- ClassroomSDK:', typeof ClassroomSDK);
            
            if (window.teacherDashboard?.sdk) {
                console.log('- SDK methods:', Object.getOwnPropertyNames(window.teacherDashboard.sdk));
            }
        }
        
        // ◊ß◊®◊ê ◊ú◊ë◊ì◊ô◊ß◊î ◊ê◊ó◊®◊ô 3 ◊©◊†◊ô◊ï◊™
        setTimeout(debugSystemState, 3000);
    </script>
</body>
</html>

================================================================================
File 7/11: public\student-app.html
================================================================================

<!DOCTYPE html>
<!--
 * Copyright ¬© 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
-->
<html lang="en" dir="ltr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Learning Space</title>
    <link rel="stylesheet" href="css/student-app.css">
</head>
<body>
    <div id="login-container" class="container">
        <div class="login-box">
            <h1>‚úèÔ∏è Classroom Learning Space</h1>
            <p>To join the lesson, please enter your name and room code</p>
            <form id="login-form">
                <input type="text" id="player-name" placeholder="Your name" required>
                <div class="input-group">
                    <label for="teacher-uid">üè´ Room Code:</label>
                    <input type="text" id="teacher-uid" placeholder="Enter 4-digit room code" maxlength="4" required>
                </div>
                <button type="submit">Join Lesson</button>
            </form>
        </div>
    </div>

    <main id="main-container" style="display: none;">
        <iframe id="content-frame" src="about:blank" title="Lesson Content"></iframe>
    </main>

    <div id="poll-interface" style="position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); z-index: 1001; background: rgba(30, 30, 50, 0.9); padding: 20px; border-radius: 12px; display: none; gap: 15px; border: 2px solid white; box-shadow: 0 0 20px rgba(0,0,0,0.5);">
    </div>

    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-functions-compat.js"></script>

    <script src="firebase-config.js"></script>

    <script>
      // Initialize the Firebase app using your configuration
      firebase.initializeApp(firebaseConfig);

      // Create global references to the services we will use
      const db = firebase.firestore();
      const auth = firebase.auth();
      const functions = firebase.functions();
    </script>

    <script src="js/ClassroomSDK.js"></script>
    <script src="js/student-app.js"></script>
</body>
</html>

================================================================================
File 8/11: public\config.json
================================================================================

{
  "studentAppUrl": "https://class-board-ad64e.web.app/student-app.html",
  "games": [
    {
      "name": "AI Model Training",
      "description": "Visual Recognition training",
      "icon": "üìö",
      "url": "https://meir.world/face-recognition/"
    },
    {
      "name": "TM",
      "description": "Goggle Teachable Machines",
      "icon": "üéØ",
      "url": "https://teachablemachine.withgoogle.com/train"
    },
    {
      "name": "PhET",
      "description": "Projectile Data Lab",
      "icon": "üéØ",
      "url": "https://phet.colorado.edu/sims/html/projectile-data-lab/latest/projectile-data-lab_all.html"
    },
    {
      "name": "Kahoot",
      "description": "Interactive quiz game",
      "icon": "üéØ",
      "url": "https://kahoot.it"
    },
    {
      "name": "Wordwall",
      "description": "Word games and creation",
      "icon": "üé≤",
      "url": "https://wordwall.net"
    },
    {
      "name": "Scratch",
      "description": "Programming and creation",
      "icon": "üê±",
      "url": "https://scratch.mit.edu"
    }
  ]
}


================================================================================
File 9/11: firebase.json
================================================================================

{
  "firestore": {
    "database": "(default)",
    "location": "me-west1",
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  },
  "functions": [
    {
      "source": "functions",
      "codebase": "default",
      "ignore": [
        "node_modules",
        ".git",
        "firebase-debug.log",
        "firebase-debug.*.log",
        "*.local"
      ]
    }
  ],
  "hosting": {
    "public": "public",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ]
  }
}


================================================================================
File 10/11: functions\package.json
================================================================================

{
  "name": "functions",
  "description": "Cloud Functions for Firebase",
  "scripts": {
    "lint": "eslint .",
    "serve": "firebase emulators:start --only functions",
    "shell": "firebase functions:shell",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log"
  },
  "engines": {
    "node": "22"
  },
  "main": "index.js",
  "dependencies": {
    "firebase-admin": "^12.0.0",
    "firebase-functions": "^5.0.0"
  },
  "devDependencies": {
    "eslint": "^8.15.0",
    "eslint-config-google": "^0.14.0",
    "firebase-functions-test": "^3.1.0"
  },
  "private": true
}


================================================================================
File 11/11: installation_guide.md
================================================================================

<div dir="rtl">
# ◊û◊ì◊®◊ô◊ö ◊î◊™◊ß◊†◊î ◊û◊ú◊ê: ◊û◊¢◊®◊õ◊™ ◊õ◊ô◊™◊î ◊ê◊ô◊†◊ò◊®◊ê◊ß◊ò◊ô◊ë◊ô◊™ (◊í◊®◊°◊î 5.0)

◊û◊°◊û◊ö ◊ñ◊î ◊û◊™◊ê◊® ◊ê◊™ ◊õ◊ú ◊î◊©◊ú◊ë◊ô◊ù ◊î◊†◊ì◊®◊©◊ô◊ù ◊ú◊î◊™◊ß◊†◊™ ◊î◊§◊®◊ï◊ô◊ß◊ò ◊û-◊ê' ◊ï◊¢◊ì ◊™' ◊¢◊ú ◊°◊ë◊ô◊ë◊™ Firebase ◊ó◊ì◊©◊î ◊ï◊†◊ß◊ô◊ô◊î.

## ◊©◊ú◊ë 0: ◊ì◊®◊ô◊©◊ï◊™ ◊û◊ï◊ß◊ì◊û◊ï◊™

◊ï◊ì◊ê ◊©◊î◊õ◊ú◊ô◊ù ◊î◊ë◊ê◊ô◊ù ◊û◊ï◊™◊ß◊†◊ô◊ù ◊¢◊ú ◊î◊û◊ó◊©◊ë ◊©◊ú◊ö:
* **Node.js**: ◊õ◊ï◊ú◊ú ◊ê◊™ ◊û◊†◊î◊ú ◊î◊ó◊ë◊ô◊ú◊ï◊™ `npm`.
* **Firebase CLI**: ◊ê◊ù ◊ú◊ê ◊û◊ï◊™◊ß◊ü, ◊î◊®◊• ◊ë◊ò◊®◊û◊ô◊†◊ú: `npm install -g firebase-tools`.
* **◊ó◊©◊ë◊ï◊†◊ï◊™**: ◊ó◊©◊ë◊ï◊ü Google ◊ï◊ó◊©◊ë◊ï◊†◊ï◊™ ◊¢◊ë◊ï◊® ◊û◊û◊©◊ß◊ô ◊î-API ◊î◊ó◊ô◊¶◊ï◊†◊ô◊ô◊ù (OpenAI, Anthropic).

## ◊©◊ú◊ë 1: ◊ô◊¶◊ô◊®◊™ ◊§◊®◊ï◊ô◊ß◊ò Firebase

1.  ◊î◊ô◊õ◊†◊° ◊ú[◊û◊°◊ï◊£ Firebase](https://console.firebase.google.com/) ◊ï◊¶◊ï◊® ◊§◊®◊ï◊ô◊ß◊ò ◊ó◊ì◊©.
2.  ◊ë◊û◊î◊ú◊ö ◊î◊î◊ß◊û◊î, ◊™◊™◊ë◊ß◊© ◊ú◊ë◊ó◊ï◊® **Default GCP resource location**. ◊ë◊ó◊® **`europe-west1 (Belgium)`**. ◊ñ◊î◊ï ◊¶◊¢◊ì ◊ß◊®◊ô◊ò◊ô ◊ú◊ê◊ô◊ó◊ï◊ì ◊õ◊ú ◊î◊©◊ô◊®◊ï◊™◊ô◊ù.

## ◊©◊ú◊ë 2: ◊î◊§◊¢◊ú◊™ ◊©◊ô◊®◊ï◊™◊ô ◊¢◊†◊ü

◊ë◊™◊ï◊ö ◊î◊§◊®◊ï◊ô◊ß◊ò ◊î◊ó◊ì◊© ◊©◊ô◊¶◊®◊™:
* **Firestore Database**: ◊¶◊ï◊® ◊û◊°◊ì ◊†◊™◊ï◊†◊ô◊ù ◊ó◊ì◊© ◊ï◊ë◊ó◊® ◊ê◊™ ◊î◊û◊ô◊ß◊ï◊ù: **`europe-west1 (Belgium)`**.
* **Authentication**: ◊î◊§◊¢◊ú ◊ê◊™ ◊©◊ô◊ò◊™ ◊î◊î◊™◊ó◊ë◊®◊ï◊™ **Anonymous**.
* **Secret Manager API**: ◊ï◊ì◊ê ◊©◊î-API ◊û◊ï◊§◊¢◊ú ◊ë-Google Cloud Console ◊¢◊ë◊ï◊® ◊î◊§◊®◊ï◊ô◊ß◊ò ◊©◊ú◊ö.

## ◊©◊ú◊ë 3: ◊ô◊¶◊ô◊®◊™ ◊û◊§◊™◊ó◊ï◊™ API ◊ó◊ô◊¶◊ï◊†◊ô◊ô◊ù

1.  ◊¶◊ï◊® ◊û◊§◊™◊ó◊ï◊™ API ◊¢◊ë◊ï◊® **Gemini, Claude ◊ï-ChatGPT** ◊ì◊®◊ö ◊î◊§◊ú◊ò◊§◊ï◊®◊û◊ï◊™ ◊î◊®◊©◊û◊ô◊ï◊™ ◊©◊ú◊î◊ù.
2.  ◊©◊û◊ï◊® ◊ê◊™ ◊©◊ú◊ï◊©◊™ ◊î◊û◊§◊™◊ó◊ï◊™ ◊ë◊û◊ß◊ï◊ù ◊ë◊ò◊ï◊ó ◊ï◊ñ◊û◊ô◊ü.

## ◊©◊ú◊ë 4: ◊î◊í◊ì◊®◊™ ◊î◊§◊®◊ï◊ô◊ß◊ò ◊î◊û◊ß◊ï◊û◊ô

1.  ◊¶◊ï◊® ◊™◊ô◊ß◊ô◊ô◊î ◊ó◊ì◊©◊î, ◊î◊¢◊™◊ß ◊ê◊ú◊ô◊î ◊ê◊™ ◊ß◊ë◊¶◊ô ◊î◊û◊ß◊ï◊®, ◊ï◊î◊®◊• ◊ë◊î `git init`.
2.  ◊î◊®◊• `firebase init`, ◊ë◊ó◊® **Use an existing project**, ◊ï◊ß◊©◊® ◊ê◊ï◊™◊ï ◊ú◊§◊®◊ï◊ô◊ß◊ò ◊î◊ê◊ô◊®◊ï◊§◊ê◊ô ◊î◊ó◊ì◊©.
3.  ◊ë◊î◊í◊ì◊®◊ï◊™, ◊ë◊ó◊® ◊ê◊™ ◊î◊©◊ô◊®◊ï◊™◊ô◊ù: **Firestore**, **Functions**, ◊ï-**Hosting**.
4.  ◊¢◊†◊î ◊¢◊ú ◊©◊ê◊ú◊ï◊™ ◊î◊ê◊™◊ó◊ï◊ú, ◊ê◊ö **◊ê◊ú ◊™◊ì◊®◊ï◊°** ◊ß◊ë◊¶◊ô◊ù ◊ß◊ô◊ô◊û◊ô◊ù ◊õ◊û◊ï `index.html`.
5.  ◊î◊™◊ß◊ü ◊ê◊™ ◊™◊ú◊ï◊ô◊ï◊™ ◊î-Functions ◊ë◊ê◊û◊¶◊¢◊ï◊™ ◊†◊ô◊ï◊ï◊ò ◊ú◊™◊ô◊ß◊ô◊ô◊™ `functions` (`cd functions`) ◊ï◊î◊®◊¶◊™ `npm install`.

## ◊©◊ú◊ë 5: ◊™◊¶◊ï◊®◊™ ◊ß◊ë◊¶◊ô◊ù ◊û◊ß◊ï◊û◊ô◊™

1.  **`firebase-config.js`**: ◊ë◊§◊®◊ï◊ô◊ß◊ò ◊ë-Firebase, ◊í◊© ◊ú◊î◊í◊ì◊®◊ï◊™ (`Project settings`), ◊î◊ï◊°◊£ Web App, ◊ï◊î◊¢◊™◊ß ◊ê◊™ ◊ê◊ï◊ë◊ô◊ô◊ß◊ò `firebaseConfig` ◊ú◊ß◊ï◊ë◊• ◊î◊û◊ß◊ï◊û◊ô.
2.  **`firebase.json`**: ◊ï◊ì◊ê ◊©◊î◊û◊ô◊ß◊ï◊ù ◊™◊ó◊™ `firestore` ◊î◊ï◊ê `europe-west1` ◊ï◊©◊î◊í◊ì◊®◊™ `rewrites` ◊™◊ß◊ô◊†◊î ◊™◊ó◊™ `hosting`.
3.  **`config.json` (◊©◊ú◊ë ◊ó◊ì◊© ◊ï◊ó◊©◊ï◊ë):**
    * ◊ë◊™◊ô◊ß◊ô◊ô◊™ `public`, ◊ï◊ì◊ê ◊©◊ß◊ô◊ô◊ù ◊ß◊ï◊ë◊• ◊ë◊©◊ù `config.json`.
    * ◊ï◊ì◊ê ◊©◊î◊û◊ë◊†◊î ◊©◊ú◊ï ◊™◊ß◊ô◊ü ◊ï◊©◊î◊©◊ì◊î `studentAppUrl` ◊û◊õ◊ô◊ú ◊ê◊™ ◊î◊õ◊™◊ï◊ë◊™ **◊î◊†◊õ◊ï◊†◊î** ◊ú◊ê◊§◊ú◊ô◊ß◊¶◊ô◊ô◊™ ◊î◊™◊ú◊û◊ô◊ì **◊ë◊§◊®◊ï◊ô◊ß◊ò ◊©◊ú◊ö**.
    * **◊ì◊ï◊í◊û◊î:**
        ```json
        {
          "studentAppUrl": "[https://your-project-id.web.app/student-app.html](https://your-project-id.web.app/student-app.html)",
          "games": [
            {
              "name": "Kahoot",
              "description": "◊ó◊ô◊ì◊ï◊ü ◊ê◊ô◊†◊ò◊®◊ê◊ß◊ò◊ô◊ë◊ô",
              "icon": "üéØ",
              "url": "[https://kahoot.it](https://kahoot.it)"
            }
          ]
        }
        ```

## ◊©◊ú◊ë 6: ◊î◊í◊ì◊®◊™ ◊°◊ï◊ì◊ï◊™ (API Keys)

◊ë◊ò◊®◊û◊ô◊†◊ú (◊ë◊™◊ô◊ß◊ô◊ô◊î ◊î◊®◊ê◊©◊ô◊™), ◊î◊®◊• ◊ê◊™ ◊©◊ú◊ï◊© ◊î◊§◊ß◊ï◊ì◊ï◊™ ◊î◊ë◊ê◊ï◊™, ◊ï◊î◊ñ◊ü ◊ê◊™ ◊î◊û◊§◊™◊ó◊ï◊™ ◊î◊û◊™◊ê◊ô◊û◊ô◊ù:
* `firebase functions:secrets:set GEMINI_API_KEY`
* `firebase functions:secrets:set CLAUDE_API_KEY`
* `firebase functions:secrets:set OPENAI_API_KEY`

## ◊©◊ú◊ë 7: ◊§◊®◊ô◊°◊î ◊®◊ê◊©◊ï◊†◊ô◊™

◊õ◊ì◊ô ◊ú◊§◊®◊ï◊° ◊ê◊™ ◊õ◊ú ◊î◊û◊¢◊®◊õ◊™ ◊ï◊ú◊ß◊©◊® ◊ê◊™ ◊î◊§◊ï◊†◊ß◊¶◊ô◊ï◊™ ◊ú◊°◊ï◊ì◊ï◊™, ◊î◊®◊•:
```bash
firebase deploy
</div>

================================================================================
END OF MCP COLLECTED FILES
================================================================================
