================================================================================
COLLECTED MCP FILES - FIRECLASS PROJECT
================================================================================

================================================================================
File 1/11: fireClass-documentation\updated_specs.md
================================================================================

# fireClass Control - Digital Classroom Management System
## Architecture Documentation Based on Existing Codebase

**Version:** 3.2 (Code-Aligned Documentation)  
**Last Updated:** July 06, 2025

---

## 1. Overview

Teachers invest significant time creating high-quality presentations in PowerPoint or Google Slides. These presentations are rich with knowledge and thought-provoking questions, but often result in a passive, one-way lecture. Key questions are asked to the room, but the teacher has no real-time, data-driven way to know who understands, who is struggling, or what the class is truly thinking at that moment.

**fireClass Control transforms existing presentations from monologues into interactive dialogues.**

It is a real-time digital classroom management system that "wraps" any web-based content—whether it's an external simulation from **PhET**, a tool like **Google's Teachable Machine**, or a custom-built application—with a layer of classroom infrastructure. With a single button click from within their existing PowerPoint slide, a teacher can launch the fireClass Dashboard, turning any slide into a live, interactive, and measurable learning experience without changing their original materials.

---

## 2. Technical Architecture

### 2.1 System Structure Diagram

```mermaid
flowchart TD
    subgraph "Client Applications"
        Teacher["🖥️ Teacher Dashboard<br/>(index.html)"]
        Student["📱 Student App<br/>(student-app.html)"]
        PPT["PowerPoint Integration<br/>(VBA Macro)"]
    end

    subgraph "Core JavaScript Layer"
        SDK["ClassroomSDK.js<br/>(Shared Logic)"]
        TeacherJS["teacher-dashboard.js<br/>(Teacher Logic)"]
        StudentJS["student-app.js<br/>(Student Logic)"]
    end

    subgraph "Firebase Backend (europe-west1)"
        Firestore[(Firestore Database)]
        Functions[Cloud Functions]
        Auth[Anonymous Authentication<br/>(Teacher Only)]
        Hosting[Static Hosting]
    end

    subgraph "Configuration"
        Config["config.json<br/>(Game URLs & Settings)"]
        CSS["CSS Files<br/>(Styling)"]
    end

    Teacher --> TeacherJS
    Student --> StudentJS
    TeacherJS --> SDK
    StudentJS --> SDK
    
    SDK --> Firestore
    SDK --> Functions
    SDK --> Auth
    
    Hosting --> Teacher
    Hosting --> Student
    Hosting --> Config
    
    PPT -.-> Teacher
```

### 2.2 Communication Components

#### a) ClassroomSDK.js - Core Engine
- **Room Creation** - `generateUniqueRoomCode()` generates unique 4-digit codes
- **Initialization** - `init()` handles teacher vs student differentiation
- **Real-time Communication** - Firestore snapshot listeners
- **UI Interfaces** - Creates floating chat and AI interfaces

#### b) User Authentication (Updated in v3.2)
```javascript
// Teacher: Anonymous login with Firebase Authentication
await this.auth.signInAnonymously();

// Student: Session-based ID generation (no Firebase Auth)
getOrCreateStudentId() {
    let studentId = sessionStorage.getItem('studentId');
    if (!studentId) {
        studentId = 'student_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        sessionStorage.setItem('studentId', studentId);
    }
    return studentId;
}
```

**Teacher**: Uses Firebase Anonymous Authentication to obtain a stable, unique UID for creating and managing the classroom.

**Student**: **NO Firebase Authentication.** Upon joining, the student app generates a temporary, unique session ID (studentId) stored in sessionStorage. This ID is unique per browser tab and allows for multiple students to be simulated from a single device for testing purposes.

#### b.1) Dual-Listener Architecture (Critical for Message Flow)

The system employs a dual-listener architecture to handle different types of real-time updates:

**Room Updates Listener** (`listenForRoomUpdates`)
- Monitors: `/rooms/{roomCode}` document changes
- Handles: AI settings, poll data, content commands, general room state
- Used by: Both teacher and student apps
- Purpose: System-level state synchronization

**Messages Listener** (`listenForMessages`) 
- Monitors: `/rooms/{roomCode}/messages` subcollection
- Handles: Chat messages (public and private), message filtering
- Used by: Both teacher and student apps  
- Purpose: Real-time communication stream

**Critical Implementation Note:** Student apps MUST initialize both listeners. Missing the messages listener results in students not receiving any messages from teachers, which was a common implementation oversight.

```javascript
// Required initialization for students:
this.classroom.listenForRoomUpdates(this.stateManager.bind(this));  // For AI/polls/commands
this.classroom.listenForMessages(this.messageHandler.bind(this));   // For actual messages
```

#### c) Room Management
```javascript
// Room structure in Firestore
/rooms/{4-digit-code}/
├── settings/
│   ├── ai_active: boolean
│   ├── ai_model: string
│   └── current_command: object
│   └── currentPoll: {          // Enhanced polling structure
│       ├── id: string
│       ├── type: string
│       ├── question: string
│       ├── isActive: boolean
│       └── responses: {
│           // Key: student name (open_text) or studentId (choice)
│           // Value: array of strings (open_text) or number (choice)
│           }
│       }
├── students/{studentId}        // Uses session-based ID (NOT Firebase UID)
└── messages/{messageId}
```

---

## 3. Case Study: Interactive AI Lesson ("Homer Face Recognition")

This example demonstrates how the platform transforms a standard lesson into an interactive, hands-on experience.

**The Lesson Goal:** Teach middle school students the basic principles of AI face recognition.
**The Teacher's Material:** A PowerPoint slide with pictures of Homer Simpson.

#### **The "Before" Scenario (Without fireClass):**
The teacher shows a slide and asks, "How do you think a computer knows this is Homer?" The discussion is verbal, and engagement is hard to track.

#### **The "After" Scenario (With fireClass):**
1.  **Launch from PowerPoint:** The teacher reaches the relevant slide and clicks a pre-set button. The fireClass Dashboard opens seamlessly.
2.  **Send Interactive Content:** From the dashboard, the teacher selects the "AI Model Training" app (defined in `config.json`) and sends it to all students.
3.  **Active, Measurable Learning:**
    * **Training Phase:** Students are prompted to measure key geometric ratios on a base image of Homer.
    * **Testing Phase:** They test their "trained" model on other images of Homer with different expressions and angles.
    * **Analysis:** A results table shows them a similarity score for each test image, demonstrating why the AI succeeds or fails.
4.  **Real-time Teacher Insights:** The teacher's dashboard shows each student's results and allows for private chat.
5.  **Data-Driven Discussion:** The teacher pauses the activity and says, "I see many of you found the AI failed when Homer was surprised. Let's discuss why a change in expression breaks a measurement-based model."

The platform didn't just show a game; it created a hands-on lab for understanding AI, all launched from the teacher's original presentation.

---

## 4. Performance and Data Management Considerations

The system's architecture was deliberately designed for real-time responsiveness and efficiency, based on two key principles:

### 4.1 Data Structure: Embedded Map vs. Subcollection

For poll responses, the system stores answers in an **embedded map field** (`responses`) within the `currentPoll` object, rather than in a separate subcollection. For a typical classroom size (30-50 students), this approach is significantly more performant:
* **Efficiency**: The teacher's dashboard receives all poll data (the question and all its answers) in a **single document read** from Firestore. A subcollection model would have required one read for the poll metadata plus dozens of individual reads for each answer, increasing latency and cost.
* **Simplicity**: Managing a single real-time listener that receives a complete, self-contained object simplifies the client-side state management logic enormously.

While a subcollection offers greater scalability for millions of entries, the embedded map approach is optimized for the specific use case of a live classroom, where the number of responses is bounded and real-time aggregation is critical.

### 4.2 Local Cache for Immediate Actions

The teacher's dashboard maintains a local, in-memory copy of the current poll's responses (`this.currentQuestionResponses`).
* **Synchronization**: This local cache is kept perfectly in sync with Firestore via the real-time `onSnapshot` listener.
* **Responsiveness**: When the teacher requests an immediate action, such as an AI analysis (`handleAiAnalysis`), the system uses this local cache instead of making a new, asynchronous database query. This ensures that UI actions feel instantaneous, providing a fluid and responsive user experience.

---

## 5. File Structure and Code Organization

### 5.1 Directory Structure
```
public/
├── index.html                 # Teacher Dashboard
├── student-app.html           # Student Interface  
├── firebase-config.js         # Firebase Configuration
├── config.json               # Games & URLs Configuration
├── css/
│   ├── teacher-dashboard.css  # Teacher Styling (English LTR)
│   └── student-app.css       # Student Styling (English LTR)
└── js/
    ├── ClassroomSDK.js       # Core SDK
    ├── teacher-dashboard.js  # Teacher Logic
    └── student-app.js        # Student Logic
```

### 5.2 ClassroomSDK.js - Core Functionality

#### Room Creation (Teacher)
```javascript
async generateUniqueRoomCode() {
    // 20 attempts to find unique 4-digit code
    let attempts = 0;
    const maxAttempts = 20;
    
    while (attempts < maxAttempts) {
        const roomCode = Math.floor(1000 + Math.random() * 9000).toString();
        const roomRef = this.db.collection('rooms').doc(roomCode);
        const doc = await roomRef.get();
        
        if (!doc.exists) {
            return roomCode;
        }
        attempts++;
    }
}
```

#### Room Joining (Student)
```javascript
async joinRoom(studentId, playerName) {
    const studentRef = this.db.collection('rooms').doc(this.roomCode)
                             .collection('students').doc(studentId);
    await studentRef.set({
        uid: studentId,  // This is the session-based ID, NOT Firebase UID
        name: playerName,
        joined_at: firebase.firestore.FieldValue.serverTimestamp()
    });
}
```

#### Real-time Communication Interfaces
```javascript
// Listen for students (Teacher)
listenForStudents(callback) {
    const studentsCollection = this.db.collection('rooms').doc(this.roomCode)
                                     .collection('students');
    
    this.studentsListener = studentsCollection.onSnapshot(snapshot => {
        const students = [];
        snapshot.forEach(doc => students.push(doc.data()));
        callback(students);
    });
}

// Listen for messages (Everyone)
listenForMessages(callback) {
    const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                     .collection('messages')
                                     .orderBy('timestamp');
    
    this.messagesListener = messagesCollection.onSnapshot(snapshot => {
        const newMessages = [];
        snapshot.docChanges().forEach(change => {
            if (change.type === "added") {
                const msg = change.doc.data();
                const currentUserId = this.isTeacher ? this.auth.currentUser?.uid : this.studentId;
                const isPrivate = msg.is_private === true;
                const isRecipient = msg.recipient_uid === currentUserId;
                const isSender = msg.sender_uid === currentUserId;

                if (!isPrivate || this.isTeacher || isRecipient || isSender) {
                    newMessages.push(msg);
                }
            }
        });

        if (newMessages.length > 0 && typeof callback === 'function') {
            callback(newMessages);
        }
    });
}
```

### 5.3 Command System
```javascript
// Send command (Teacher)
async sendCommand(commandName, payload = {}) {
    const roomRef = this.db.collection('rooms').doc(this.roomCode);
    await roomRef.update({
        'settings.current_command': {
            command: commandName,
            payload: payload,
            timestamp: firebase.firestore.FieldValue.serverTimestamp()
        }
    });
}

// Listen for commands (Student) - Central State Manager
stateManager: function(roomData) {
    if (!roomData || !roomData.settings) return;

    const settings = roomData.settings;
    const pollData = settings.currentPoll;
    const command = settings.current_command;
    const isAiActive = settings.ai_active === true;

    // 1. Update UI components (like AI button) on every update
    const aiButton = document.getElementById('classroom-ai-btn');
    if (aiButton) {
        aiButton.style.display = isAiActive ? 'block' : 'none';
    }

    // 2. Handle polls with priority
    if (pollData && pollData.isActive) {
        if (this.currentPollId !== pollData.id) {
            this.currentPollId = pollData.id;
            this.renderPollInterface(pollData);
        }
        return;
    }

    // 3. Handle content commands
    if (command && command.command === 'LOAD_CONTENT') {
        const iframe = document.getElementById('content-frame');
        const newUrl = command.payload.url || 'about:blank';
        if (iframe && iframe.src !== newUrl) {
            iframe.src = newUrl;
        }
        return;
    }
}
```

---

## 6. User Interfaces

### 6.1 Teacher Dashboard (index.html + teacher-dashboard.js)

#### Top Navigation Menu
- **Quick Actions** - Pre-made messages for class, including "End Lesson" workflow
- **Games & Content** - Load URLs from config.json
- **AI Management** - Enable/disable + model selection (ChatGPT/Claude/Gemini)
- **Tools** - Debug console and data export
- **Polls** - Create quick polls for class
- **Reports** - Advanced reporting and analytics

#### Main Content Areas
```javascript
// Student list with private messaging
updateStudentsList(studentsData) {
    this.students = studentsData;
    const studentsListDiv = document.getElementById('studentsList');
    
    studentsListDiv.innerHTML = '';
    
    this.students.forEach(student => {
        const studentElement = document.importNode(template.content, true);
        const nameSpan = studentElement.querySelector('.student-name');
        nameSpan.textContent = student.name;

        const actionsDiv = studentElement.querySelector('.student-actions');
        const privateMsgBtn = document.createElement('button');
        privateMsgBtn.textContent = 'Private Message';
        privateMsgBtn.className = 'private-message-btn';
        privateMsgBtn.onclick = () => this.openPrivateMessageModal(student);
        actionsDiv.appendChild(privateMsgBtn);
        
        studentsListDiv.appendChild(studentElement);
    });
}

// Messages with full validation and private message support
addSingleMessage(message) {
    const sender = message?.sender || 'Unknown User';
    const content = message?.content || 'Empty Message';
    const isPrivate = message?.is_private === true;
    
    // Prevent duplicate messages
    const messageId = message.timestamp?.seconds + '_' + message.sender_uid + '_' + message.content.substring(0, 20);
    const existingMessage = messagesArea.querySelector(`[data-message-id="${messageId}"]`);
    if (existingMessage) return;
    
    // Create message with proper validation...
}
```

#### Advanced AI System
```javascript
// Teacher AI initialization
async initializeTeacherAI() {
    try {
        // 1. Check AI service availability
        const aiStatus = await this.testAIService();
        
        // 2. Show AI button (even if service not available)
        this.showTeacherAIButton();
        
        // 3. Update AI status
        await this.checkAIStatus();
        
        this.debugLog("✅ Teacher AI initialized successfully");
    } catch (error) {
        console.error("🔥 Error initializing teacher AI:", error);
        this.showTeacherAIButton(); // Show button anyway
    }
}

// AI model switching
async switchAIModel(model) {
    const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
    await roomRef.update({
        'settings.ai_model': model
    });
    
    this.currentAiModel = model;
    this.updateAIModelDisplay();
    this.addActivity(`🔄 AI model switched to: ${this.getModelDisplayName(model)}`);
}
```

### 6.2 Student App (student-app.html + student-app.js)

The student application is designed for simplicity and consistency. Its primary role is to act as a container for variable content while providing a fixed set of communication and interaction tools.

#### **UI Architecture: The Three Permanent Tools**
Upon successful login, the student interface is enhanced with three permanent, floating, and draggable buttons. These buttons are **always visible** and do not appear or disappear.

* **💬 Chat Button**: Always available for student-initiated communication.
* **🤖 AI Button**: Always visible. Its *functionality* is controlled by the teacher.
* **📊 Poll Button**: Always visible. Becomes active with a visual indicator when a poll is launched by the teacher.

#### **State Management: Teacher Control vs. Student Control**
The core of the architecture is a clear separation of concerns, managed by the `stateManager` function which listens to real-time updates from Firestore.

* **Teacher Controls FUNCTIONALITY**:
    * **AI**: The teacher enables or disables the AI service. If disabled, the student's attempt to use it will result in an "AI not available" message inside the AI window. The button itself is never hidden.
    * **Polls**: The teacher starts and stops polls. Stopping a poll automatically closes the poll window on the student's screen.

* **Student Controls VISIBILITY**:
    * The student can click any of the three buttons at any time to open or close (minimize) the corresponding window.
    * The student can drag any of the buttons or windows to organize their workspace.

#### **Automatic UI Actions (Attention Hooks)**
To ensure students do not miss important events, the system automatically opens windows in specific scenarios:

1.  **Teacher Message Received**: If the student's chat window is closed, it will **automatically open** to display the new message from the teacher.
2.  **New Poll Launched**: When the teacher starts a new poll, the student's poll window will **automatically open** with the question.

This architecture provides a predictable and powerful user experience, where the tools are consistently available but intelligently respond to the teacher's pedagogical actions.

```javascript
// The updated stateManager logic reflecting the new architecture
stateManager: function(roomData) {
    if (!roomData || !roomData.settings) return;

    const settings = roomData.settings;
    const pollData = settings.currentPoll;

    // 1. AI State Management: Update the SDK's internal state. Do NOT hide the button.
    this.classroom.isAiActiveForClass = settings.ai_active === true;

    // 2. Poll State Management: Control badge and auto-open/close the window
    const pollIsActive = pollData && pollData.isActive;
    const pollContainer = document.getElementById('classroom-poll-container');

    if (pollIsActive) {
        // If a new poll arrives, render it and force the window open
        if (this.currentPollId !== pollData.id) {
            this.currentPollId = pollData.id;
            this.renderPollInterface(pollData); // This function now ensures the window is visible
        }
    } else {
        // If teacher stops the poll, force the window to close
        if (this.currentPollId !== null) {
            this.clearPollInterface();
            this.currentPollId = null;
        }
    }
    // ... (Content command logic remains the same)
}
```

---

## 7. Polling System (Enhanced)

### 7.1 Poll Types and Data Structure
```javascript
// Poll configuration in Firestore
currentPoll: {
    id: "poll_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9),
    type: "yes_no" | "multiple_choice" | "open_text",
    question: "What is your understanding of...?", // Added in latest version
    options: 2 | 4 | 0, // Number of choices for yes_no/multiple_choice
    isActive: true,
    createdAt: timestamp,
    responses: {
        // For open_text: student name -> array of answers
        "student_name": ["first answer", "revised answer", "final answer"],
        // For choice-based: studentId -> choice number
        "student_session_id": 1
    }
}
```

### 7.2 Poll Creation and Management

The polling system is designed for real-time interaction while ensuring data integrity and security.

#### Teacher: Poll Creation (`startPoll`)
When a teacher starts a poll, the `startPoll` function on the teacher's dashboard creates a new poll object. This object includes a unique ID, the poll type, and an empty `responses` map. It then overwrites the `settings.currentPoll` field in the room's Firestore document. This "reset" action ensures that each poll starts with a clean slate.

#### Student: Poll Submission (`submitPollAnswer`)
To overcome Firestore security rules that prevent unauthenticated users from writing to the main room document, student answers are not sent directly to the database from the client. Instead, the process is as follows:
1.  The student's client (`ClassroomSDK.js`) calls a dedicated Cloud Function named `submitPollAnswer`.
2.  This function receives the student's answer, name, and room code.
3.  Running with administrative privileges on the server, the Cloud Function securely validates the data and updates the `responses` map within the `settings.currentPoll` object in Firestore.

This architecture is secure, robust, and ensures that the teacher's real-time listener is reliably triggered upon every new answer.

```javascript
// Client-side call from ClassroomSDK.js
async submitPollAnswer(answer) {
    try {
        const submitAnswerFunction = this.functions.httpsCallable('submitPollAnswer');
        await submitAnswerFunction({
            roomCode: this.roomCode,
            studentId: this.studentId,
            playerName: this.playerName,
            answer: answer
        });
    } catch (error) {
        console.error("Error calling submitPollAnswer cloud function:", error);
    }
}
```

### 7.3 Real-time Results Display
```javascript
// Display poll results on teacher dashboard
displayPollResults(pollData) {
    if (pollData && pollData.type === 'open_text' && pollData.isActive) {
        const container = document.getElementById('open-question-results');
        container.innerHTML = '';

        // Update local memory with latest responses
        this.currentQuestionResponses = pollData.responses || {};

        for (const [studentName, answers] of Object.entries(this.currentQuestionResponses)) {
            const lastAnswer = answers[answers.length - 1];
            const answerDiv = document.createElement('div');
            answerDiv.innerHTML = `<strong>${studentName} (${answers.length} versions):</strong><p>${lastAnswer}</p>`;
            container.appendChild(answerDiv);
        }
    } else if (pollData && (pollData.type === 'multiple_choice' || pollData.type === 'yes_no')) {
        const container = document.getElementById('poll-results-container');
        container.innerHTML = '';
        
        const responses = pollData.responses || {};
        let totalVotes = Object.keys(responses).length;
        
        for (let i = 1; i <= pollData.options; i++) {
            const votes = Object.values(responses).filter(vote => vote === i).length;
            const percentage = totalVotes > 0 ? ((votes / totalVotes) * 100).toFixed(1) : 0;
            const label = pollData.type === 'yes_no' ? (i === 1 ? 'Yes' : 'No') : `Option ${i}`;
            
            const barHtml = `
                <div style="margin-bottom: 12px;">
                    <div style="display: flex; justify-content: space-between;">
                        <strong>${label}</strong>
                        <span>${votes} votes (${percentage}%)</span>
                    </div>
                    <div style="background: #e0e0e0; border-radius: 4px; overflow: hidden;">
                        <div style="width: ${percentage}%; background: #42a5f5; height: 20px;"></div>
                    </div>
                </div>
            `;
            container.innerHTML += barHtml;
        }
    }
}
```

---

## 8. Configuration System (config.json)

### 8.1 Configuration File Structure
```json
{
  "studentAppUrl": "https://class-board-ad64e.web.app/student-app.html",
  "games": [
    {
      "name": "AI Model Training",
      "description": "Visual Recognition training",
      "icon": "📚",
      "url": "https://meir.world/face-recognition/"
    },
    {
      "name": "TM",
      "description": "Goggle Teachable Machines",
      "icon": "🎯",
      "url": "https://teachablemachine.withgoogle.com/train"
    },
    {
      "name": "PhET",
      "description": "Projectile Data Lab",
      "icon": "🎯",
      "url": "https://phet.colorado.edu/sims/html/projectile-data-lab/latest/projectile-data-lab_all.html"
    }
  ]
}
```

### 8.2 Configuration Loading and Usage
```javascript
// Teacher dashboard loads config
async loadConfigData() {
    try {
        const response = await fetch('config.json');
        if (!response.ok) throw new Error('Network response was not ok');
        this.config = await response.json();
        this.debugLog('✅ Config file loaded successfully', this.config);
    } catch (error) {
        console.error('🔥 Error loading config file:', error);
        this.config = { studentAppUrl: 'student-app.html', games: [] };
    }
}

// Populate games list from config
populateGamesList() {
    const container = document.getElementById('game-list-container');
    const games = this.config?.games || [];
    
    container.innerHTML = '';
    
    games.forEach(game => {
        const gameElement = document.createElement('a');
        gameElement.href = '#';
        gameElement.className = 'dropdown-item';
        gameElement.onclick = (e) => {
            e.preventDefault();
            this.sendSelectedGame(game.url);
        };

        gameElement.innerHTML = `
            <span class="dropdown-icon">${game.icon || '🔗'}</span>
            <div class="dropdown-content">
                <div class="dropdown-title">${game.name}</div>
                <div class="dropdown-desc">${game.description}</div>
            </div>
        `;
        container.appendChild(gameElement);
    });
}
```

---

## 9. Database Structure (Firestore) - Code-Aligned

### 9.1 Complete Schema
```
/rooms/{4-digit-code}
├── room_code: string
├── created_at: timestamp
├── last_activity: timestamp
├── teacher_uid: string (from Firebase Anonymous Auth)
├── settings: {
│   ├── ai_active: boolean
│   ├── ai_model: string ('chatgpt'|'claude'|'gemini')
│   ├── current_command: {
│   │   ├── command: string
│   │   ├── payload: object
│   │   └── timestamp: timestamp
│   │   }
│   └── currentPoll: {
│       ├── id: string (unique poll identifier)
│       ├── type: string ('yes_no'|'multiple_choice'|'open_text')
│       ├── question: string
│       ├── isActive: boolean
│       └── responses: {
│           // For open_text: sanitized student name -> array of answers
│           "student_name_sanitized": ["answer1", "answer2", "answer3"],
│           // For choice-based: studentId (session-based) -> choice number
│           "student_session_id": 1
│           }
│       }
│   }
├── /students/{studentId}            // studentId is session-based, NOT Firebase UID
│   ├── uid: string (the session-based studentId)
│   ├── name: string
│   └── joined_at: timestamp
├── /questionHistory/{questionId}     // Historical questions for end-of-lesson reports
│   ├── id: string
│   ├── type: string
│   ├── question: string
│   ├── isActive: boolean (false for completed)
│   ├── createdAt: timestamp
│   ├── closedAt: timestamp
│   └── responses: object (complete response history)
└── /messages/{messageId}
    ├── sender: string (display name)
    ├── sender_uid: string (teacher Firebase UID or student session ID)
    ├── content: string
    ├── timestamp: timestamp
    ├── is_teacher: boolean
    ├── is_private: boolean
    └── recipient_uid?: string (student session ID for private messages)
```

---

## 9. Security and Privacy Model

### 9.1 Authentication Architecture
**Teacher**: Uses Firebase Anonymous Authentication to get a stable UID for room management and administrative operations.

**Student**: **No Firebase Authentication whatsoever.** Uses browser sessionStorage-based unique IDs that persist only for the session.

### 9.2 Firestore Security Rules (Updated)
```javascript
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Rooms can be read by anyone with the room code
    match /rooms/{roomId} {
      allow read: if true;
      allow write: if request.auth != null; // Only authenticated teachers
      
      // Students collection - anyone can join (unauthenticated writes allowed)
      match /students/{studentId} {
        allow read, write: if true; // Open for session-based students
      }
      
      // Messages collection - anyone can send messages
      match /messages/{messageId} {
        allow read, write: if true; // Open for session-based students
      }
      
      // Question history - teacher only
      match /questionHistory/{questionId} {
        allow read, write: if request.auth != null;
      }
    }
  }
}
```

### 9.3 Privacy Protection
```javascript
// Private message filtering (client-side)
listenForMessages(callback) {
    this.messagesListener = messagesCollection.onSnapshot(snapshot => {
        const newMessages = [];
        snapshot.docChanges().forEach(change => {
            if (change.type === "added") {
                const msg = change.doc.data();
                const currentUserId = this.isTeacher ? this.auth.currentUser?.uid : this.studentId;
                const isPrivate = msg.is_private === true;
                const isRecipient = msg.recipient_uid === currentUserId;
                const isSender = msg.sender_uid === currentUserId;

                // Show message if: public OR user is teacher OR user is recipient/sender
                if (!isPrivate || this.isTeacher || isRecipient || isSender) {
                    newMessages.push(msg);
                }
            }
        });
        
        if (newMessages.length > 0 && typeof callback === 'function') {
            callback(newMessages);
        }
    });
}
```

---

## 10. Typical Workflow

### 10.1 Class Setup
1. **Teacher** opens `index.html`, system auto-generates 4-digit room code
2. **Teacher** shares code with students (QR code displayed in header)
3. **Students** navigate to `student-app.html?classroom={code}` (auto-populates room code)
4. **Students** enter name, system generates session-based `studentId`
5. **Real-time connection** established, teacher sees students appear

### 10.2 Content Delivery
```javascript
// Teacher selects content from config.json
sendSelectedGame(url) {
    this.sendCommand('LOAD_CONTENT', { url });
    // Closes modal automatically
    document.getElementById('customContentModal').querySelector('.modal-close').click();
}

// Student receives and loads content
stateManager: function(roomData) {
    const command = roomData.settings?.current_command;
    if (command && command.command === 'LOAD_CONTENT') {
        const iframe = document.getElementById('content-frame');
        iframe.src = command.payload.url || 'about:blank';
    }
}
```

### 10.3 Real-time Polling Workflow
1. **Teacher** creates poll through dashboard menu
2. **System** assigns unique poll ID and sets `isActive: true`
3. **Students** automatically see poll interface via `stateManager`
4. **Students** submit answers (multiple submissions allowed for open-text)
5. **Teacher** sees real-time results and can request AI analysis
6. **Teacher** stops poll when ready, system saves to question history

### 10.4 Enhanced Communication Flow

#### Real-time Message Architecture
The system uses a dual-stream approach for optimal performance:

**Stream 1: Room State Changes**
```javascript
// Teacher toggles AI, starts polls, sends content
this.classroom.listenForRoomUpdates((roomData) => {
    // Handles: AI settings, polls, content commands
    this.stateManager(roomData);
});
```

**Stream 2: Message Communication**  
```javascript
// Teacher/student chat messages
this.classroom.listenForMessages((messages) => {
    // Handles: Public messages, private messages, auto-chat opening
    messages.forEach(msg => {
        this.classroom.addChatMessage(msg.sender, msg.content, msg);
        
        // Auto-open chat for teacher messages (student-side)
        if (isChatHidden && msg.is_teacher) {
            this.classroom.toggleChat();
        }
    });
});
```

#### Message Flow Sequence
1. **Teacher sends message** → Firestore `/rooms/{code}/messages/` subcollection
2. **Student receives via `listenForMessages`** → Real-time message stream
3. **Message filtering** → Private messages shown only to intended recipients
4. **Auto-UI updates** → Chat window opens automatically for teacher messages
5. **State synchronization** → Both teacher and student UIs reflect message delivery

#### Critical Implementation Requirements
- **Students MUST initialize both listeners** during login process
- **Teachers rely on Firebase Auth UID** for message attribution  
- **Students use session-based ID** for message attribution
- **Private message filtering** handled client-side via recipient_uid matching

This architecture ensures **complete separation** between system commands and human communication while maintaining real-time responsiveness.

---

## 11. Advanced Features

### 11.1 AI Analysis System
```javascript
// Teacher requests AI analysis of current poll responses
async handleAiAnalysis(type) {
    // Open teacher's AI window
    if (this.sdk.aiContainer.style.display === 'none') {
        this.sdk.toggleAI();
    }

    // Collect responses from local memory
    const allAnswers = JSON.stringify(this.currentQuestionResponses, null, 2);
    const lang = this.sdk.getInterfaceLanguage();
    
    let prompt;
    if (type === 'summarize') {
        prompt = `Here are student responses to a question. Each student name maps to an array of their answers (from first to last). Summarize the class's understanding, identify students whose answers indicate difficulty, and point out students who showed significant improvement across versions:\n\n${allAnswers}`;
    } else { // keywords
        prompt = `Extract the 10 most frequent and significant keywords from the following text:\n\n${allAnswers}`;
    }

    // Send to AI and reset responses for next round
    this.sdk.sendAIMessage(prompt, lang);
    
    try {
        const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
        await roomRef.update({ 'settings.currentPoll.responses': {} });
        this.addActivity(`🔄 Response repository reset for next round.`);
    } catch (error) {
        console.error("Error resetting poll responses:", error);
    }
}
```

### 11.2 End-of-Lesson Reporting
```javascript
// Generate comprehensive lesson summary
async generateLessonSummary() {
    try {
        const historySnapshot = await this.sdk.db.collection('rooms')
            .doc(this.sdk.getRoomCode())
            .collection('questionHistory')
            .orderBy('createdAt')
            .get();
        
        let fullLessonData = [];
        historySnapshot.forEach(doc => {
            fullLessonData.push(doc.data());
        });
        
        const summaryPrompt = this.buildLessonSummaryPrompt(fullLessonData);
        await this.sdk.sendAIMessage(summaryPrompt, 'en');
        
        this.addActivity('✅ Comprehensive lesson summary generated');
    } catch (error) {
        console.error('🔥 Error creating summary report:', error);
    }
}

buildLessonSummaryPrompt(lessonData) {
    let prompt = `Comprehensive Lesson Summary Report\n\n`;
    prompt += `Number of questions asked: ${lessonData.length}\n\n`;
    
    lessonData.forEach((question, index) => {
        prompt += `Question ${index + 1}: ${question.question || 'Untitled question'}\n`;
        prompt += `Student responses:\n`;
        Object.entries(question.responses || {}).forEach(([student, answers]) => {
            if (Array.isArray(answers)) {
                prompt += `  ${student}: ${answers.join(' → ')}\n`;
            } else {
                prompt += `  ${student}: ${answers}\n`;
            }
        });
        prompt += `\n`;
    });
    
    prompt += `Please summarize:\n`;
    prompt += `1. Overall class progress\n`;
    prompt += `2. Students who showed significant improvement\n`;
    prompt += `3. Students who need additional attention\n`;
    prompt += `4. Topics that remain unclear\n`;
    prompt += `5. Recommendations for next lesson\n`;
    
    return prompt;
}
```

### 11.3 Private Messaging System
```javascript
// Teacher sends private message to specific student
async sendPrivateMessage() {
    const modal = document.getElementById('privateMessageModal');
    const content = document.getElementById('privateMessageText').value.trim();
    const studentUid = modal.dataset.studentUid; // This is the session-based studentId
    
    if (!content || !studentUid) return;
    
    try {
        await this.sdk.sendPrivateMessage(content, studentUid);
        this.addActivity(`✉️ Private message sent to ${document.getElementById('privateMessageRecipient').textContent}`);
        modal.classList.remove('visible');
    } catch (error) {
        console.error("🔥 Error sending private message:", error);
    }
}

// SDK handles private message sending
async sendPrivateMessage(content, recipientUid) {
    const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                     .collection('messages');
    await messagesCollection.add({
        sender: this.playerName,
        sender_uid: this.auth.currentUser?.uid || this.studentId,
        recipient_uid: recipientUid, // Session-based student ID
        content: content,
        timestamp: firebase.firestore.FieldValue.serverTimestamp(),
        is_teacher: this.isTeacher,
        is_private: true
    });
}
```

### 11.4 Floating UI Components (Student)
```javascript
// Create draggable chat interface for students
createChatInterface() {
    if (this.isTeacher) return; // Only for students
    
    // Create floating chat button
    this.chatButton = document.createElement('button');
    this.chatButton.id = 'classroom-chat-btn';
    this.chatButton.innerHTML = '💬';
    this.chatButton.style.cssText = 'position: fixed; bottom: 20px; right: 20px; width: 60px; height: 60px; border-radius: 50%; background: #007bff; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 1000;';
    this.chatButton.onclick = () => this.toggleChat();
    this.makeDraggable(this.chatButton);
    document.body.appendChild(this.chatButton);

    // Create chat container
    this.chatContainer = document.createElement('div');
    this.chatContainer.id = 'classroom-chat-container';
    this.chatContainer.style.cssText = 'position: fixed; bottom: 100px; right: 20px; width: 350px; height: 400px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;';
    
    // Chat header with drag functionality
    const chatHeader = document.createElement('div');
    chatHeader.style.cssText = 'background: #007bff; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
    chatHeader.innerHTML = `
        <span>💬 Class Chat</span>
        <button id="chat-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer;">−</button>
    `;
    
    this.makeDraggable(this.chatContainer, chatHeader);
    // ... rest of chat interface setup
}

// Make UI elements draggable
makeDraggable(element, dragHandle = null) {
    const handle = dragHandle || element;
    handle.addEventListener('mousedown', (e) => {
        e.preventDefault();
        let startX = e.clientX - element.offsetLeft;
        let startY = e.clientY - element.offsetTop;
        
        const handleMouseMove = (me) => {
            element.style.left = (me.clientX - startX) + 'px';
            element.style.top = (me.clientY - startY) + 'px';
        };
        
        const handleMouseUp = () => {
            document.removeEventListener('mousemove', handleMouseMove);
            document.removeEventListener('mouseup', handleMouseUp);
        };
        
        document.addEventListener('mousemove', handleMouseMove);
        document.addEventListener('mouseup', handleMouseUp);
    });
}
```

---

## 12. Code Quality and Error Handling

### 12.1 Message Deduplication
```javascript
// Prevent duplicate message display
addSingleMessage(message) {
    // Create unique message ID for deduplication
    const messageId = message.timestamp?.seconds + '_' + message.sender_uid + '_' + message.content.substring(0, 20);
    const existingMessage = messagesArea.querySelector(`[data-message-id="${messageId}"]`);
    if (existingMessage) {
        console.log('⚠️ Duplicate message prevented:', message.content.substring(0, 30));
        return;
    }

    // Create message element with unique identifier
    const messageDiv = document.createElement('div');
    messageDiv.setAttribute('data-message-id', messageId);
    // ... rest of message creation
}
```

### 12.2 Room Validation
```javascript
// Validate room exists before joining (Student)
async checkRoomExists(roomCode) {
    const roomRef = this.db.collection('rooms').doc(roomCode);
    const doc = await roomRef.get();
    return doc.exists;
}

// Enhanced error handling in student login
handleLogin: async function(event) {
    event.preventDefault();
    const loginButton = event.target.querySelector('button');
    
    loginButton.textContent = 'Joining...';
    loginButton.disabled = true;

    try {
        this.classroom = new ClassroomSDK();
        const studentId = this.getOrCreateStudentId();
        await this.classroom.init('student-app', studentId, playerName, roomCode);
        
        // Success - switch to main interface
        document.getElementById('login-container').style.display = 'none';
        document.getElementById('main-container').style.display = 'block';
        
    } catch (error) {
        // Clear error feedback and restore button
        alert(`Failed to join the room: ${error.message}\nPlease check the room code and try again.`);
        loginButton.textContent = 'Join Lesson';
        loginButton.disabled = false;
    }
}
```

### 12.3 Configuration Fallbacks
```javascript
// Robust config loading with fallbacks
async loadConfigData() {
    try {
        const response = await fetch('config.json');
        if (!response.ok) throw new Error('Network response was not ok');
        this.config = await response.json();
        this.debugLog('✅ Config file loaded successfully', this.config);
    } catch (error) {
        console.error('🔥 Error loading config file:', error);
        // Fallback configuration
        this.config = { 
            studentAppUrl: 'student-app.html', 
            games: [] 
        };
    }
}
```

---

## 13. Technologies and Dependencies

### 13.1 Frontend Stack
- **HTML5 + CSS3** - Responsive interface with LTR English layout
- **Vanilla JavaScript ES6+** - No external frameworks, modern JS features
- **Firebase SDK v9 (compat)** - Real-time database and authentication
- **CSS Grid + Flexbox** - Advanced responsive layouts

### 13.2 Backend Services
- **Firebase Firestore** - Real-time NoSQL database with offline support
- **Firebase Cloud Functions** - AI services (`askAI`, `askChatGPT`) in europe-west1
- **Firebase Anonymous Auth** - Teacher authentication only
- **Firebase Hosting** - Static file serving with CDN

### 13.3 External Integrations
- **QR Code API** - `https://api.qrserver.com/v1/create-qr-code/`
- **Multiple AI Providers** - ChatGPT, Claude, Gemini via Cloud Functions
- **Educational Content** - Any web-based content via iframe embedding

---

## 14. Development and Deployment

### 14.1 Build Process
```python
# build.py - Production minification
SOURCE_DIR = 'public'
BUILD_DIR = 'BUILD'

def main():
    # Clean and setup
    if os.path.exists(BUILD_DIR):
        shutil.rmtree(BUILD_DIR)
    os.makedirs(BUILD_DIR, exist_ok=True)
    
    # Process files
    for root, _, files in os.walk(SOURCE_DIR):
        for filename in files:
            if filename.endswith('.js'):
                # Minify JavaScript with Terser
                run_command([TERSER_CMD, source_path, '-o', dest_path, '-c', '-m'])
            elif filename.endswith(('.css', '.html')):
                # Minify CSS and HTML with Minify
                # ... minification process
            else:
                # Copy other files as-is
                shutil.copy2(source_path, dest_path)
```

### 14.2 File Collection for Development
```powershell
# collect2txt.ps1 - Collect all project files for analysis
$filesToCollect = @(
    "public/index.html",
    "public/student-app.html",
    "public/firebase-config.js",
    "public/config.json",
    "public/js/teacher-dashboard.js",
    "public/js/student-app.js", 
    "public/js/ClassroomSDK.js",
    "public/css/teacher-dashboard.css",
    "public/css/student-app.css"
)

# Creates single text file with all project code
foreach ($file in $filesToCollect) {
    if (Test-Path $file) {
        $content = Get-Content -Path $file -Raw -Encoding UTF8
        Add-Content -Path $outputFile -Value $content -Encoding UTF8
    }
}
```

---

## 15. Summary and Key Insights

### 15.1 Core Architecture Principles
1. **Session-Based Student Auth** - No Firebase authentication required for students
2. **Real-Time State Synchronization** - Centralized state management via Firestore
3. **Content Agnostic** - Any web content can be classroom-enabled via iframe
4. **Teacher-Centric Control** - All administrative functions require teacher authentication
5. **Progressive Enhancement** - Works without AI, enhanced with AI when available

### 15.2 Security Model
- **Teacher**: Firebase Anonymous Auth with stable UID
- **Student**: Browser sessionStorage with temporary IDs
- **Data**: Ephemeral rooms with automated cleanup
- **Privacy**: Client-side message filtering for private communications

### 15.3 Real-World Deployment
The system is deployed at `https://class-board-ad64e.web.app/` with:
- Static hosting via Firebase Hosting
- Real-time database via Firestore (europe-west1)
- Cloud Functions for AI services
- QR code generation for easy student access

### 15.4 Unique Value Proposition
fireClass Control doesn't replace existing educational content—it enhances any web-based content with classroom infrastructure. Teachers can use PhET simulations, Google's Teachable Machine, or any educational website, and instantly gain:
- Real-time student monitoring
- Interactive polling and feedback
- AI-powered analysis and insights
- Private messaging and communication tools
- Comprehensive lesson analytics

The platform bridges the gap between "great online content" and "classroom-ready tools" without requiring content creators to modify their applications.

---

**This documentation reflects the actual codebase implementation as of July 2025, ensuring complete alignment between specification and working code.**

================================================================================
File 2/11: functions\index.js
================================================================================

/*
 * Copyright © 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */
// functions/index.js - askAI כפונקציה מרכזית שקוראת להגדרות החדר

const {onCall} = require("firebase-functions/v2/https");
const {onSchedule} = require("firebase-functions/v2/scheduler");
const {HttpsError} = require("firebase-functions/v2/https");
const {defineSecret} = require("firebase-functions/params");
const admin = require("firebase-admin");
const https = require("https");



// Initialize Firebase Admin SDK
if (admin.apps.length === 0) {
  admin.initializeApp();
}
//
//========================= DEPLOYMENT AREA ===================================
const DEPLOY_REGION = "us-central1";
//const DEPLOY_REGION = "europe-west1";
//=============================================================================
//
// Define secrets
const geminiApiKey = defineSecret("GEMINI_API_KEY");
const claudeApiKey = defineSecret("CLAUDE_API_KEY");
const openaiApiKey = defineSecret("OPENAI_API_KEY");

/**
 * פונקציה מרכזית לכל קריאות AI - קוראת להגדרות החדר ומחליטה איזה מודל להפעיל
 */
exports.askAI = onCall({
  region: DEPLOY_REGION,
  secrets: [geminiApiKey, claudeApiKey, openaiApiKey]
}, async (request) => {
  console.log("🎯 askAI called with:", request.data);
  
  if (!request.auth) {
    console.error("❌ No authentication provided");
    throw new HttpsError("unauthenticated", "Authentication required");
  }

  let prompt = request.data.prompt;
  const roomCode = request.data.roomCode;
  const language = request.data.language;
  
  if (!prompt || !roomCode) {
    console.error("❌ No prompt or roomCode provided");
    throw new HttpsError("invalid-argument", "Prompt and roomCode are required");
  }

  // 🎯 עטיפת הפרומפט לפי שפה
  if (language === 'he') {
    prompt = `Please answer the following prompt in Hebrew:\n\n"${prompt}"`;
  } else {
    prompt = `Please answer the following prompt in English:\n\n"${prompt}"`;
  }

  try {
    const roomRef = admin.firestore().collection('rooms').doc(roomCode);
    const roomDoc = await roomRef.get();
    
    if (!roomDoc.exists) {
      console.error("❌ Room not found:", roomCode);
      throw new HttpsError("not-found", "Room not found");
    }
    
    const roomData = roomDoc.data();
    
    // 🎯 --- תחילת הלוגיקה החדשה ---
    const teacherUid = roomData.teacher_uid;
    const isTeacherRequest = request.auth.uid === teacherUid;
    const aiActive = roomData.settings?.ai_active === true;
    
    console.log(`Request Details: isTeacher=${isTeacherRequest}, aiActiveForStudents=${aiActive}`);
    
    // אם הבקשה היא לא מהמורה, וגם ה-AI כבוי לתלמידים - חסום את הבקשה.
    if (!isTeacherRequest && !aiActive) {
      console.log("🔴 AI request blocked for student (AI is off).");
      throw new HttpsError("failed-precondition", "AI is disabled for this classroom");
    }
    // 🎯 --- סוף הלוגיקה החדשה ---
    
    const selectedModel = roomData.settings?.ai_model || 'chatgpt';
    console.log(`🎯 Room ${roomCode} selected model: ${selectedModel}`);
    
    let result;
    switch (selectedModel) {
      case 'chatgpt':
        result = await callChatGPT(prompt);
        break;
      case 'claude':
        result = await callClaude(prompt);
        break;
      case 'gemini':
        result = await callGemini(prompt);
        break;
      default:
        console.log(`⚠️ Unknown model ${selectedModel}, falling back to ChatGPT`);
        result = await callChatGPT(prompt);
        break;
    }
    
    await roomRef.update({ 'last_activity': admin.firestore.FieldValue.serverTimestamp() });
    
    console.log(`✅ AI response generated successfully using ${selectedModel}`);
    return { 
      result: result.text, 
      model: result.modelName 
    };
    
  } catch (error) {
    console.error("❌ Error in askAI:", error);
    if (error instanceof HttpsError) {
      throw error;
    }
    throw new HttpsError("internal", "Internal server error");
  }
});

/**
 * פונקציה לשליחת תשובות סקר - מאפשרת לתלמידים לשלוח תשובות ללא אימות
 */
exports.submitPollAnswer = onCall({
  region: DEPLOY_REGION,
  allow: "all" // מאפשר קריאות ממשתמשים לא מאומתים (תלמידים)
}, async (request) => {
  const { roomCode, studentId, playerName, answer } = request.data;

  if (!roomCode || !studentId || !playerName || answer === undefined) {
    throw new HttpsError("invalid-argument", "Missing required fields.");
  }

  const db = admin.firestore();
  const roomRef = db.collection("rooms").doc(roomCode);

  try {
    await db.runTransaction(async (transaction) => {
      const roomDoc = await transaction.get(roomRef);
      if (!roomDoc.exists) {
        throw new HttpsError("not-found", `Room ${roomCode} does not exist.`);
      }

      const currentPoll = roomDoc.data().settings.currentPoll;
      if (!currentPoll || !currentPoll.isActive) {
        return; // No active poll to answer
      }

      const updateData = {
        'settings.last_poll_activity': admin.firestore.FieldValue.serverTimestamp()
      };

      if (currentPoll.type === 'open_text') {
        const studentIdentifier = playerName.replace(/[.#$[\]]/g, '_');
        const responseField = `settings.currentPoll.responses.${studentIdentifier}`;
        updateData[responseField] = admin.firestore.FieldValue.arrayUnion(answer);
      } else {
        const responseField = `settings.currentPoll.responses.${studentId}`;
        updateData[responseField] = answer;
      }

      transaction.update(roomRef, updateData);
    });

    return { success: true };

  } catch (error) {
    console.error(`Error in submitPollAnswer for room ${roomCode}:`, error);
    if (error instanceof HttpsError) throw error;
    throw new HttpsError("internal", "Failed to submit answer.");
  }
});

/**
 * פונקציית עזר לקריאה ל-ChatGPT
 */
async function callChatGPT(prompt) {
  const apiKey = openaiApiKey.value();
  if (!apiKey) {
    throw new HttpsError("failed-precondition", "OpenAI API key not configured");
  }

  console.log("🤖 Calling ChatGPT...");

  const requestBody = JSON.stringify({
    model: "gpt-4",
    messages: [{
      role: "user",
      content: prompt
    }],
    max_tokens: 1000
  });

  return new Promise((resolve, reject) => {
    const req = https.request("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      }
    }, (res) => {
      console.log("📨 ChatGPT response status:", res.statusCode);
      
      let responseBody = "";
      res.on("data", (chunk) => responseBody += chunk);
      res.on("end", () => {
        try {
          const response = JSON.parse(responseBody);
          if (response.error) {
            console.error("❌ ChatGPT API error:", response.error);
            reject(new HttpsError("internal", `ChatGPT error: ${response.error.message}`));
            return;
          }
          
          const text = response.choices?.[0]?.message?.content;
          if (!text) {
            console.error("❌ Invalid ChatGPT response format:", response);
            reject(new HttpsError("internal", "Invalid ChatGPT response format"));
            return;
          }
          
          console.log("✅ ChatGPT response success, length:", text.length);
          resolve({ text, modelName: "ChatGPT" });
        } catch (e) {
          console.error("❌ Failed to parse ChatGPT response:", e);
          reject(new HttpsError("internal", "Failed to parse ChatGPT response"));
        }
      });
    });

    req.on("error", (error) => {
      console.error("❌ ChatGPT request error:", error);
      reject(new HttpsError("internal", "Failed to connect to ChatGPT"));
    });

    req.write(requestBody);
    req.end();
  });
}

/**
 * פונקציית עזר לקריאה ל-Claude
 */
async function callClaude(prompt) {
  const apiKey = claudeApiKey.value();
  if (!apiKey) {
    throw new HttpsError("failed-precondition", "Claude API key not configured");
  }

  console.log("🤖 Calling Claude...");

  const requestBody = JSON.stringify({
    model: "claude-3-sonnet-20240229",
    max_tokens: 1000,
    messages: [{
      role: "user",
      content: prompt
    }]
  });

  return new Promise((resolve, reject) => {
    const req = https.request("https://api.anthropic.com/v1/messages", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": apiKey,
        "anthropic-version": "2023-06-01"
      }
    }, (res) => {
      console.log("📨 Claude response status:", res.statusCode);
      
      let responseBody = "";
      res.on("data", (chunk) => responseBody += chunk);
      res.on("end", () => {
        try {
          const response = JSON.parse(responseBody);
          if (response.error) {
            console.error("❌ Claude API error:", response.error);
            reject(new HttpsError("internal", `Claude error: ${response.error.message}`));
            return;
          }
          
          const text = response.content?.[0]?.text;
          if (!text) {
            console.error("❌ Invalid Claude response format:", response);
            reject(new HttpsError("internal", "Invalid Claude response format"));
            return;
          }
          
          console.log("✅ Claude response success, length:", text.length);
          resolve({ text, modelName: "Claude" });
        } catch (e) {
          console.error("❌ Failed to parse Claude response:", e);
          reject(new HttpsError("internal", "Failed to parse Claude response"));
        }
      });
    });

    req.on("error", (error) => {
      console.error("❌ Claude request error:", error);
      reject(new HttpsError("internal", "Failed to connect to Claude"));
    });

    req.write(requestBody);
    req.end();
  });
}

/**
 * פונקציית עזר לקריאה ל-Gemini
 */
async function callGemini(prompt) {
  const apiKey = geminiApiKey.value();
  if (!apiKey) {
    throw new HttpsError("failed-precondition", "Gemini API key not configured");
  }

  console.log("🤖 Calling Gemini using v1beta endpoint...");

  const geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${apiKey}`;
  
  const requestBody = JSON.stringify({
    contents: [{parts: [{text: prompt}]}],
  });

  return new Promise((resolve, reject) => {
    const req = https.request(geminiUrl, {
      method: "POST",
      headers: {"Content-Type": "application/json"}
    }, (res) => {
      console.log("📨 Gemini response status:", res.statusCode);
      
      let responseBody = "";
      res.on("data", (chunk) => responseBody += chunk);
      res.on("end", () => {
        try {
          const response = JSON.parse(responseBody);
          if (response.error) {
            console.error("❌ Gemini API error:", response.error);
            reject(new HttpsError("internal", `Gemini error: ${response.error.message}`));
            return;
          }
          
          const text = response.candidates?.[0]?.content?.parts?.[0]?.text;
          if (!text) {
            console.error("❌ Invalid Gemini response format:", response);
            reject(new HttpsError("internal", "Invalid Gemini response format"));
            return;
          }
          
          console.log("✅ Gemini response success, length:", text.length);
          resolve({ text, modelName: "Gemini" });
        } catch (e) {
          console.error("❌ Failed to parse Gemini response:", e);
          reject(new HttpsError("internal", "Failed to parse Gemini response"));
        }
      });
    });

    req.on("error", (error) => {
      console.error("❌ Gemini request error:", error);
      reject(new HttpsError("internal", "Failed to connect to Gemini"));
    });

    req.write(requestBody);
    req.end();
  });
}

/**
 * הפונקציות הישנות - עדיין נשארות לתאימות לאחור (אם צריך לבדיקות)
 * אבל הClient לא אמור לקרוא להן ישירות יותר
 */
exports.askGemini = onCall({
  region: DEPLOY_REGION,
  secrets: [geminiApiKey]
}, async (request) => {
  console.log("🔍 askGemini called directly (deprecated, use askAI instead)");
  const prompt = request.data.prompt;
  if (!prompt) {
    throw new HttpsError("invalid-argument", "Prompt is required");
  }
  const result = await callGemini(prompt);
  return { result: result.text, model: result.modelName };
});

exports.askClaude = onCall({
  region: DEPLOY_REGION,
  secrets: [claudeApiKey]
}, async (request) => {
  console.log("🔍 askClaude called directly (deprecated, use askAI instead)");
  const prompt = request.data.prompt;
  if (!prompt) {
    throw new HttpsError("invalid-argument", "Prompt is required");
  }
  const result = await callClaude(prompt);
  return { result: result.text, model: result.modelName };
});

exports.askChatGPT = onCall({
  region: DEPLOY_REGION,
  secrets: [openaiApiKey]
}, async (request) => {
  console.log("🔍 askChatGPT called directly (deprecated, use askAI instead)");
  const prompt = request.data.prompt;
  if (!prompt) {
    throw new HttpsError("invalid-argument", "Prompt is required");
  }
  const result = await callChatGPT(prompt);
  return { result: result.text, model: result.modelName };
});

/**
 * Scheduled function to clean up old classrooms.
 * Runs every day at 2:00 AM Israel time.
 */
exports.cleanupOldClassrooms = onSchedule({
  schedule: "0 2 * * *",
  timeZone: "Asia/Jerusalem",
  region: DEPLOY_REGION
}, async (event) => {
  console.log("🧹 Starting cleanup of old classrooms...");
  
  const db = admin.firestore();

  const oneWeekAgo = new Date();
  oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

  console.log("🔍 Looking for rooms older than:", oneWeekAgo);

  const query = db.collection("rooms")
      .where("last_activity", "<", oneWeekAgo);

  const oldRoomsSnapshot = await query.get();
  let deletedCount = 0;

  if (oldRoomsSnapshot.empty) {
    console.log("✅ No old rooms to delete.");
    return {deletedCount: 0};
  }

  const deletePromises = [];
  oldRoomsSnapshot.forEach((doc) => {
    console.log(`🗑️ Scheduling deletion for room: ${doc.id}`);
    deletePromises.push(doc.ref.delete());
    deletedCount++;
  });

  await Promise.all(deletePromises);
  console.log(`✅ Cleanup completed. Deleted ${deletedCount} old rooms.`);
  return {deletedCount};
});

================================================================================
File 3/11: public\js\ClassroomSDK.js
================================================================================

/*
 * Copyright © 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */

// SIMPLIFIED CLASSROOM SDK - 4-DIGIT ROOM CODES ONLY!

class ClassroomSDK {
    constructor() {
        try {
            this.db = firebase.firestore();
            this.auth = firebase.auth();
            this.functions = firebase.app().functions();
            console.log('✅ Firebase services initialized in constructor.');
        } catch (e) {
            console.error("❌ CRITICAL: Could not initialize Firebase services.", e);
            alert("Fatal Error: Could not connect to Firebase services. Please refresh.");
        } 
        

        this.playerName = null;
        this.roomCode = null; // 4-digit room code
        this.isTeacher = false;
        this.isInitialized = false;
        this.studentId = null;
        this.isAiActiveForClass = false;

        // UI components
        this.chatButton = null;
        this.chatContainer = null;
        this.chatMessages = null;
        this.chatInput = null;
        this.aiButton = null;
        this.aiContainer = null;
        this.aiMessages = null;
        this.aiInput = null;
        
        // Listeners
        this.studentsListener = null;
        this.messagesListener = null;
        this.roomListener = null;
    }

    // Anonymous authentication
    async loginAnonymously() {
        try {
            const userCredential = await this.auth.signInAnonymously();
            console.log('✅ Anonymous login successful:', userCredential.user.uid);
            return userCredential.user;
        } catch (error) {
            console.error('🔥 Anonymous login failed:', error);
            throw error;
        }
    }

    // Generate unique 4-digit room code
    async generateUniqueRoomCode() {
        let attempts = 0;
        const maxAttempts = 20; // Maximum 20 attempts
        
        while (attempts < maxAttempts) {
            // Generate random 4-digit code
            const roomCode = Math.floor(1000 + Math.random() * 9000).toString();
            
            // Check that code doesn't exist
            const roomRef = this.db.collection('rooms').doc(roomCode);
            const doc = await roomRef.get();
            
            if (!doc.exists) {
                console.log(`✅ Found unique room code: ${roomCode}`);
                return roomCode;
            }
            
            console.log(`🔄 Room code ${roomCode} exists, trying next...`);
            attempts++;
        }
        
        // If not found after 20 attempts, return random code
        const randomCode = Math.floor(1000 + Math.random() * 9000).toString();
        console.log(`✅ Generated random room code: ${randomCode}`);
        return randomCode;
    }

    // SIMPLIFIED INIT - 4-digit room codes only!
    async init(appName, userOrStudentId, playerName, roomCode = null) {
        console.log(`🚀 Initializing ${appName}...`);
        this.appName = appName;
        this.playerName = playerName;

        if (appName === 'teacher-dashboard') {
            // תהליך האתחול של המורה
            this.isTeacher = true;
            this.playerName = "Teacher";
            this.roomCode = await this.generateUniqueRoomCode();
            await this.initializeRoom(userOrStudentId.uid); // Pass the teacher's UID

        } else if (appName === 'student-app' && roomCode) {
            // תהליך האתחול של התלמיד
            this.isTeacher = false;
            this.roomCode = roomCode;
            this.studentId = userOrStudentId; // This is the student's session ID

            // ודא שהחדר קיים לפני ניסיון הצטרפות
            const roomExists = await this.checkRoomExists(roomCode);
            if (!roomExists) {
                throw new Error(`Room with code ${roomCode} does not exist.`);
            }
            await this.joinRoom(this.studentId, this.playerName);

        } else {
            throw new Error('Invalid initialization parameters.');
        }

        this.isInitialized = true;
        console.log(`✅ ${appName} initialized successfully for room: ${this.roomCode}`);
    }

    // הוסף את שתי הפונקציות האלה לקלאס
    async checkRoomExists(roomCode) {
        const roomRef = this.db.collection('rooms').doc(roomCode);
        const doc = await roomRef.get();
        return doc.exists;
    }

    // עדכון קל לפונקציית initializeRoom
    async initializeRoom(teacherUid) {
        const roomRef = this.db.collection('rooms').doc(this.roomCode);
        await roomRef.set({
            room_code: this.roomCode,
            created_at: firebase.firestore.FieldValue.serverTimestamp(),
            teacher_uid: teacherUid,
            settings: {
                ai_active: false,
                ai_model: 'chatgpt',
                current_command: null,
                currentPoll: { isActive: false }
            }
        });
    }

    // עדכון קל לפונקציית joinRoom
    async joinRoom(studentId, playerName) {
        const studentRef = this.db.collection('rooms').doc(this.roomCode)
                                 .collection('students').doc(studentId);
        await studentRef.set({
            uid: studentId,
            name: playerName,
            joined_at: firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // Listen for students
    listenForStudents(callback) {
        if (!this.roomCode) return;
        
        const studentsCollection = this.db.collection('rooms').doc(this.roomCode)
                                         .collection('students');
        
        this.studentsListener = studentsCollection.onSnapshot(snapshot => {
            const students = [];
            snapshot.forEach(doc => {
                students.push(doc.data());
            });
            console.log('👨‍🎓 Students updated:', students.length);
            
            if (typeof callback === 'function') {
                callback(students);
            }
        }, error => {
            console.error("🔥 Error listening for students:", error);
        });
    }

    // Listen for messages
    listenForMessages(callback) {
        if (!this.roomCode) return;

        const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                         .collection('messages')
                                         .orderBy('timestamp');

        this.messagesListener = messagesCollection.onSnapshot(snapshot => {
            const newMessages = [];
            snapshot.docChanges().forEach(change => {
                if (change.type === "added") {
                    const msg = change.doc.data();
                    const currentUserId = this.isTeacher ? this.auth.currentUser?.uid : this.studentId;
                    const isPrivate = msg.is_private === true;
                    const isRecipient = msg.recipient_uid === currentUserId;
                    const isSender = msg.sender_uid === currentUserId;

                    if (!isPrivate || this.isTeacher || isRecipient || isSender) {
                        newMessages.push(msg);
                    }
                }
            });

            if (newMessages.length > 0 && typeof callback === 'function') {
                callback(newMessages);
            }
        }, error => {
            console.error("🔥 Error listening for messages:", error);
        });
    }

    // Listen for room updates (commands, AI, etc.)
    listenForRoomUpdates(callback) {
        if (!this.roomCode) return;
        const roomRef = this.db.collection('rooms').doc(this.roomCode);

        this.roomListener = roomRef.onSnapshot(doc => {
            if (doc.exists && typeof callback === 'function') {
                // שלב קריטי: שלח את כל אובייקט הנתונים, ותן לאפליקציה להחליט
                callback(doc.data());
            }
        }, error => {
            console.error("🔥 Error listening for room updates:", error);
        });
    }

    // Send message
    async sendMessage(content) {
        if (!content || !content.trim() || !this.roomCode) return;

        try {
            const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                             .collection('messages');
            await messagesCollection.add({
                sender: this.playerName || "Teacher",
                sender_uid: this.isTeacher ? this.auth.currentUser?.uid : this.studentId,
                content: content,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                is_teacher: this.isTeacher
            });
        } catch (error) {
            console.error('🔥 Error sending message:', error);
            throw error;
        }
    }

    // Send command (teacher only)
    async sendCommand(commandName, payload = {}) {
        const roomRef = this.db.collection('rooms').doc(this.roomCode);
        await roomRef.update({
            'settings.current_command': {
                command: commandName,
                payload: payload,
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            },
            'last_activity': firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // Toggle AI mode (teacher only)
    async toggleAI() {
        console.log('[DIAGNOSTIC] 1. toggleAI function started.');
        const roomRef = this.db.collection('rooms').doc(this.roomCode);

        try {
            const doc = await roomRef.get();
            const currentAI = doc.exists ? doc.data().settings?.ai_active : false;
            console.log(`[DIAGNOSTIC] 2. Read from DB. currentAI is: ${currentAI}`);

            const newValue = !currentAI;
            console.log(`[DIAGNOSTIC] 3. Value to be written to DB is: ${newValue}`);

            await roomRef.update({
                'settings.ai_active': newValue
            });

            console.log('[DIAGNOSTIC] 4. SUCCESS: roomRef.update command finished without error.');
            return newValue;

        } catch (error) {
            // אם תהיה שגיאה כלשהי בפעולת הכתיבה, נראה אותה כאן
            console.error('[DIAGNOSTIC] 5. CRITICAL FAILURE: Error during toggleAI process.', error);
            // זרוק את השגיאה הלאה כדי שהקוד שקרא לפונקציה ידע שהיא נכשלה
            throw error;
        }
    }

    // Cleanup
    cleanup() {
        if (this.studentsListener) {
            this.studentsListener();
            this.studentsListener = null;
        }
        if (this.messagesListener) {
            this.messagesListener();
            this.messagesListener = null;
        }
        if (this.roomListener) {
            this.roomListener();
            this.roomListener = null;
        }
        if (this.roomListener_Polls) {
            this.roomListener_Polls();
            this.roomListener_Polls = null;
        }
    }

    // Returns room code
    getRoomCode() {
        return this.roomCode;
    }

    // ========== CHAT INTERFACE ==========
    createChatInterface() {
        // Show chat interface only for students
        if (this.isTeacher) {
            console.log("Teacher view: Floating chat interface disabled.");
            return; 
        }

        if (document.getElementById('classroom-chat-btn')) return;
        
        this.chatButton = document.createElement('button');
        this.chatButton.id = 'classroom-chat-btn';
        this.chatButton.innerHTML = '💬';
        this.chatButton.style.cssText = 'position: fixed; bottom: 20px; right: 20px; width: 60px; height: 60px; border-radius: 50%; background: #007bff; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 1000;';
        this.chatButton.onclick = () => this.toggleChat();
        this.makeDraggable(this.chatButton);
        document.body.appendChild(this.chatButton);

        this.chatContainer = document.createElement('div');
        this.chatContainer.id = 'classroom-chat-container';
        this.chatContainer.style.cssText = 'position: fixed; bottom: 100px; right: 20px; width: 350px; height: 400px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;';
        
        const chatHeader = document.createElement('div');
        chatHeader.style.cssText = 'background: #007bff; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        chatHeader.innerHTML = `
            <span>💬 Class Chat</span>
            <button id="chat-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 5px;">−</button>
        `;
        
        this.makeDraggable(this.chatContainer, chatHeader);
        
        chatHeader.querySelector('#chat-minimize-btn').onclick = (e) => {
            e.stopPropagation();
            // Use App's close function to ensure state is updated
            if (window.App && window.App.closeChat) {
                window.App.closeChat();
            } else {
                this.toggleChat();
            }
        };
        
        this.chatContainer.appendChild(chatHeader);
        
        const chatContent = document.createElement('div');
        chatContent.style.cssText = 'height: calc(100% - 60px); display: flex; flex-direction: column;';
        
        this.chatMessages = document.createElement('div');
        this.chatMessages.id = 'classroom-chat-messages';
        this.chatMessages.style.cssText = 'flex: 1; padding: 15px; overflow-y: auto; background: #f8f9fa;';
        this.chatMessages.innerHTML = '<div style="text-align: center; color: #999; font-style: italic;">No messages sent yet</div>';
        
        const chatInputArea = document.createElement('div');
        chatInputArea.style.cssText = 'padding: 15px; border-top: 1px solid #eee; background: white;';
        
        this.chatInput = document.createElement('input');
        this.chatInput.type = 'text';
        this.chatInput.placeholder = 'Type a message...';
        this.chatInput.style.cssText = 'width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 20px; outline: none; font-size: 14px;';
        
        this.chatInput.onkeypress = (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const messageContent = this.chatInput.value.trim();
                if (messageContent) {
                    this.sendMessage(messageContent);
                    this.chatInput.value = '';
                }
            }
        };
        
        chatInputArea.appendChild(this.chatInput);
        chatContent.appendChild(this.chatMessages);
        chatContent.appendChild(chatInputArea);
        this.chatContainer.appendChild(chatContent);
        document.body.appendChild(this.chatContainer);
    }

    enableChat() {
        if (this.chatButton) {
            this.chatButton.style.display = 'block';
        }
    }

    toggleChat() {
        if (!this.chatContainer) return;
        
        // Use the App's state management functions
        if (window.App) {
            if (window.App.isChatOpen) {
                window.App.closeChat();
            } else {
                window.App.openChat();
                if (this.chatInput) {
                    this.chatInput.focus();
                }
            }
        } else {
            // Fallback for direct usage
            const isVisible = this.chatContainer.style.display !== 'none';
            this.chatContainer.style.display = isVisible ? 'none' : 'block';
            
            if (!isVisible && this.chatInput) {
                this.chatInput.focus();
            }
        }
    }

    addChatMessage(sender, content, messageObj) {
        if (!this.chatMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.style.cssText = 'margin-bottom: 10px; padding: 8px 12px; background: white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);';
        
        const senderSpan = document.createElement('div');
        senderSpan.style.cssText = 'font-weight: bold; color: #007bff; font-size: 12px; margin-bottom: 4px;';
        senderSpan.textContent = sender;
        
        const contentSpan = document.createElement('div');
        contentSpan.style.cssText = 'color: #333; line-height: 1.4;';
        contentSpan.textContent = content;
        
        messageDiv.appendChild(senderSpan);
        messageDiv.appendChild(contentSpan);
        
        // Remove first message if it's "No messages sent yet"
        if (this.chatMessages.children.length === 1 && 
            this.chatMessages.children[0].textContent.includes('No messages sent yet')) {
            this.chatMessages.innerHTML = '';
        }
        
        this.chatMessages.appendChild(messageDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    // ========== AI INTERFACE ==========
    createAIInterface() {
        if (document.getElementById('classroom-ai-btn')) return;

        this.aiButton = document.createElement('button');
        this.aiButton.id = 'classroom-ai-btn';
        this.aiButton.innerHTML = '🤖';
        // Button is now always visible
        this.aiButton.style.cssText = `position: fixed; bottom: 20px; right: 90px; width: 60px; height: 60px; border-radius: 50%; background: #4caf50; color: white; border: none; font-size: 24px; cursor: grab; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10000; display: block;`;

        this.aiButton.onclick = () => this.toggleAI();
        this.makeDraggable(this.aiButton);
        document.body.appendChild(this.aiButton);

        // The rest of the function remains the same for creating the container...
        this.aiContainer = document.createElement('div');
        this.aiContainer.id = 'classroom-ai-container';
        this.aiContainer.style.cssText = 'position: fixed; bottom: 100px; right: 20px; width: 400px; height: 500px; background: white; border-radius: 15px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); z-index: 999; display: none; overflow: hidden;';

        const aiHeader = document.createElement('div');
        aiHeader.style.cssText = 'background: #4caf50; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        aiHeader.innerHTML = `<span>🤖 AI Assistant</span><button style="background:none;border:none;color:white;font-size:18px;cursor:pointer;">−</button>`;

        this.makeDraggable(this.aiContainer, aiHeader);

        aiHeader.querySelector('button').onclick = (e) => {
            e.stopPropagation();
            this.toggleAI();
        };

        this.aiContainer.appendChild(aiHeader);

        const aiContent = document.createElement('div');
        aiContent.style.cssText = 'height: calc(100% - 60px); display: flex; flex-direction: column;';

        this.aiMessages = document.createElement('div');
        this.aiMessages.id = 'classroom-ai-messages';
        this.aiMessages.style.cssText = 'flex: 1; padding: 15px; overflow-y: auto; background: #f8f9fa;';
        this.aiMessages.innerHTML = '<div style="text-align: center; color: #999; font-style: italic;">Ask the AI assistant...</div>';

        const aiInputArea = document.createElement('div');
        aiInputArea.style.cssText = 'padding: 15px; border-top: 1px solid #eee; background: white;';

        this.aiInput = document.createElement('input');
        this.aiInput.type = 'text';
        this.aiInput.placeholder = 'Ask a question...';
        this.aiInput.style.cssText = 'width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 20px; outline: none; font-size: 14px;';
        this.aiInput.onkeypress = (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const prompt = this.aiInput.value.trim();
                if (prompt) {
                    const lang = document.documentElement.lang || 'en';
                    this.sendAIMessage(prompt, lang);
                    this.aiInput.value = '';
                }
            }
        };

        aiInputArea.appendChild(this.aiInput);
        aiContent.appendChild(this.aiMessages);
        aiContent.appendChild(aiInputArea);
        this.aiContainer.appendChild(aiContent);
        document.body.appendChild(this.aiContainer);
    }

    toggleAI() {
        if (!this.aiContainer) return;
        
        const isVisible = this.aiContainer.style.display !== 'none';
        this.aiContainer.style.display = isVisible ? 'none' : 'block';
        
        if (!isVisible && this.aiInput) {
            this.aiInput.focus();
        }
    }

    getInterfaceLanguage() {
        return document.documentElement.lang || 'en';
    }

    async sendAIMessage(prompt, language) {
        // Check if AI is disabled for students
        if (!this.isTeacher && !this.isAiActiveForClass) {
            this.addAIMessage("🤖", "AI is not available at the moment.", false);
            return;
        }

        if (!language) language = this.getInterfaceLanguage();

        if (!this.functions) {
            this.addAIMessage("🤖", "Error: AI service not initialized", false);
            return;
        }
        this.addAIMessage(this.playerName || "You", prompt, true);

        try {
            const askAIFunction = this.functions.httpsCallable('askAI');
            const result = await askAIFunction({ prompt, roomCode: this.roomCode, language });
            const senderName = result.data.model ? `🤖 (${result.data.model})` : "🤖";
            this.addAIMessage(senderName, result.data.result, false);
        } catch (error) {
            console.error("🔥 Error calling askAI:", error);
            let errorMsg = "An error occurred with the AI service.";
            if (error.code === 'functions/unauthenticated') {
                errorMsg = "Authentication error. Please reconnect.";
            }
            this.addAIMessage("🤖", errorMsg, false);
        }
    }

    addAIMessage(sender, content, isUser) {
        if (!this.aiMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.style.cssText = `margin-bottom: 10px; padding: 8px 12px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); ${isUser ? 'background: #007bff; color: white; margin-left: 20px;' : 'background: white; color: #333; margin-right: 20px;'}`;
        
        const senderSpan = document.createElement('div');
        senderSpan.style.cssText = `font-weight: bold; font-size: 12px; margin-bottom: 4px; ${isUser ? 'color: rgba(255,255,255,0.8);' : 'color: #28a745;'}`;
        senderSpan.textContent = sender;
        
        const contentSpan = document.createElement('div');
        contentSpan.style.cssText = 'line-height: 1.4;';
        contentSpan.textContent = content;
        
        messageDiv.appendChild(senderSpan);
        messageDiv.appendChild(contentSpan);
        
        // Remove first message if it's "Ask the AI assistant..."
        if (this.aiMessages.children.length === 1 && 
            this.aiMessages.children[0].textContent.includes('Ask the AI assistant')) {
            this.aiMessages.innerHTML = '';
        }
        
        this.aiMessages.appendChild(messageDiv);
        this.aiMessages.scrollTop = this.aiMessages.scrollHeight;
    }

    // ========== UTILITY FUNCTIONS ==========
    makeDraggable(element, dragHandle = null) {
        const handle = dragHandle || element;
        handle.addEventListener('mousedown', (e) => {
            e.preventDefault();
            let startX = e.clientX - element.offsetLeft;
            let startY = e.clientY - element.offsetTop;
            if (element.style.right) {
                element.style.left = element.offsetLeft + 'px';
                element.style.right = ''; 
            }
            const handleMouseMove = (me) => {
                element.style.left = (me.clientX - startX) + 'px';
                element.style.top = (me.clientY - startY) + 'px';
            };
            const handleMouseUp = () => {
                document.removeEventListener('mousemove', handleMouseMove);
                document.removeEventListener('mouseup', handleMouseUp);
            };
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
        });
    }

    showGameNotification(message) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; left: 50%; transform: translateX(-50%);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; padding: 15px 25px; border-radius: 25px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2); z-index: 10000;
            font-weight: bold; font-size: 16px; animation: slideDown 0.3s ease;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideUp 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
        
        // Add CSS for animations
        if (!document.getElementById('notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                @keyframes slideDown { from { transform: translateX(-50%) translateY(-100%); opacity: 0; } to { transform: translateX(-50%) translateY(0); opacity: 1; } }
                @keyframes slideUp { from { transform: translateX(-50%) translateY(0); opacity: 1; } to { transform: translateX(-50%) translateY(-100%); opacity: 0; } }
            `;
            document.head.appendChild(style);
        }
    }

    // Send private message (teacher only)
    async sendPrivateMessage(content, recipientUid) {
        if (!content || !content.trim() || !this.roomCode || !recipientUid) return;

        try {
            const messagesCollection = this.db.collection('rooms').doc(this.roomCode)
                                             .collection('messages');
            await messagesCollection.add({
                sender: this.playerName || "Teacher",
                sender_uid: this.isTeacher ? this.auth.currentUser?.uid : this.studentId,
                recipient_uid: recipientUid,
                content: content,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                is_teacher: this.isTeacher,
                is_private: true
            });
        } catch (error) {
            console.error('🔥 Error sending private message:', error);
            throw error;
        }
    }

    // Test AI service availability
    async testAIService() {
        if (!this.functions) {
            return { available: false, error: "Firebase Functions not initialized", code: "functions/not-initialized" };
        }

        // Ensure user is authenticated before calling cloud function
        let user = this.auth.currentUser;
        if (!user) {
            try {
                const userCredential = await this.auth.signInAnonymously();
                user = userCredential.user;
            } catch (authError) {
                return { available: false, error: "Authentication failed", code: "auth-failed" };
            }
        }

        if (!user || !user.uid) {
            return { available: false, error: "User not authenticated", code: "auth-missing" };
        }
        
        try {
            const askChatGPTFunction = this.functions.httpsCallable('askChatGPT');
            const result = await askChatGPTFunction({ prompt: "Hello" });

            return { available: true, result: result.data.result, code: "success" };
        } catch (error) {
            return { available: false, error: error.message, code: error.code || "unknown" };
        }
    }

    // Poll management functions
    async startPoll(pollConfig) {
        if (!this.isTeacher) return;
        
        console.log("📊 Starting poll", pollConfig);
        
        const newPoll = {
            id: Date.now() + '_' + Math.random().toString(36).substr(2, 9), // New unique ID
            type: pollConfig.type,
            question: pollConfig.question || '', // Add question field
            options: pollConfig.options,
            isActive: true,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            responses: {}
        };

        await this.db.collection('rooms').doc(this.roomCode).update({
            'settings.currentPoll': newPoll
        });
        
        console.log("✅ Poll started successfully");
    }

    async stopPoll() {
        if (!this.isTeacher) return;
        
        console.log("📊 Stopping poll");
        
        await this.db.collection('rooms').doc(this.roomCode).update({
            'settings.currentPoll.isActive': false
        });
        
        console.log("✅ Poll stopped successfully");
    }

    async submitPollAnswer(answer) {
        if (!this.functions) {
            console.error("Firebase Functions is not initialized.");
            return;
        }
        try {
            const submitAnswerFunction = this.functions.httpsCallable('submitPollAnswer');
            await submitAnswerFunction({
                roomCode: this.roomCode,
                studentId: this.studentId,
                playerName: this.playerName,
                answer: answer
            });
            console.log("✅ Poll answer successfully sent via Cloud Function.");
        } catch (error) {
            console.error("🔥 Error calling submitPollAnswer cloud function:", error);
        }
    }

    listenForPollUpdates(callback) {
        this.roomListener_Polls = this.db.collection('rooms').doc(this.roomCode)
            .onSnapshot(doc => {
                const pollData = doc.data()?.settings?.currentPoll;
                this.lastKnownPollData = pollData;
                console.log("📊 Poll update received", pollData);
                if (typeof callback === 'function') {
                    callback(pollData);
                }
            });
    }

    getCurrentPollData() {
        return this.lastKnownPollData;
    }

    getStudentId() {
        return this.studentId;
    }

    // Function to save question history
    async saveQuestionToHistory(pollData) {
        if (!this.isTeacher || !pollData) return;
        const historyRef = this.db.collection('rooms').doc(this.roomCode)
            .collection('questionHistory').doc(pollData.id);
        await historyRef.set({
            ...pollData,
            closedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
    }

    // ========== POLL INTERFACE ==========
    createPollInterface() {
        if (this.isTeacher || document.getElementById('classroom-poll-btn')) return;

        // 1. Create the permanent floating button
        this.pollButton = document.createElement('button');
        this.pollButton.id = 'classroom-poll-btn';
        this.pollButton.innerHTML = '📊<div id="poll-badge" style="position:absolute; top:-2px; right:-2px; width:12px; height:12px; border-radius:50%; background:red; display:none; border: 2px solid white;"></div>';
        this.pollButton.style.cssText = 'position: fixed; bottom: 20px; right: 160px; width: 60px; height: 60px; border-radius: 50%; background: #607d8b; color: white; border: none; font-size: 24px; cursor: pointer; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10000; display: block;'; // Always visible

        this.pollButton.onclick = () => {
            if (this.pollContainer && this.pollContainer.dataset.active === 'true') {
                const isVisible = this.pollContainer.style.display !== 'none';
                this.pollContainer.style.display = isVisible ? 'none' : 'block';
            }
        };

        // *** ADD THIS LINE TO MAKE THE BUTTON DRAGGABLE ***
        this.makeDraggable(this.pollButton);

        document.body.appendChild(this.pollButton);

        // 2. Create the draggable container
        this.pollContainer = document.createElement('div');
        this.pollContainer.id = 'classroom-poll-container';
        this.pollContainer.dataset.active = 'false'; // Custom attribute to track state
        this.pollContainer.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 450px; min-height: 200px; background: white; border-radius: 15px; box-shadow: 0 8px 40px rgba(0,0,0,0.25); z-index: 10001; display: none; overflow: hidden;';

        const pollHeader = document.createElement('div');
        pollHeader.style.cssText = 'background: #ff9800; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center; font-weight: bold; cursor: grab;';
        pollHeader.innerHTML = '<span>📊 Poll / Question</span><button id="poll-minimize-btn" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; padding: 5px;">−</button>';

        this.makeDraggable(this.pollContainer, pollHeader);

        pollHeader.querySelector('#poll-minimize-btn').onclick = (e) => {
            e.stopPropagation();
            this.pollContainer.style.display = 'none';
        };

        const pollContentArea = document.createElement('div');
        pollContentArea.id = 'classroom-poll-content-area';
        pollContentArea.style.cssText = 'padding: 20px;';

        this.pollContainer.appendChild(pollHeader);
        this.pollContainer.appendChild(pollContentArea);
        document.body.appendChild(this.pollContainer);
    }
}

================================================================================
File 4/11: public\js\teacher-dashboard.js
================================================================================

/*
 * Copyright © 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */
// teacher-dashboard.js - English version with advanced AI selection menu

class TeacherDashboard {
    constructor() {
        console.log('🟢 TRACE: TeacherDashboard constructor called');
        this.sdk = null;
        this.students = [];
        this.activities = [];
        this.isAiActive = false; // Track AI status
        this.isAiActiveForStudents = false; // Add new variable for tracking
        this.currentAiModel = 'chatgpt';
        this.aiWarningShown = false; // Prevent repeated messages
        this.config = {}; // 🎯 Change here
        this.debugMode = false;
        this.currentQuestionResponses = {}; // Stores { studentName: [answers] }
        
        // 🔧 English locale fix - set locale
        this.locale = 'en-US';
        this.rtlSupport = false;
    }

    // Debugging utility with English support
    debugLog(message, data = null) {
        const debugEnabled = true;
        if (!debugEnabled) return;
        
        const debugConsoleContent = document.querySelector('.enhanced-debug-console .debug-content');
        if(debugConsoleContent) {
            const logEntry = document.createElement('div');
            logEntry.style.direction = 'ltr';
            logEntry.style.textAlign = 'left';
            logEntry.innerHTML = `<div>[${new Date().toLocaleTimeString(this.locale)}] ${message}</div>`;
            if (data) {
                const dataPre = document.createElement('pre');
                dataPre.style.cssText = 'margin-left: 20px; color: #ffaa00; direction: ltr; text-align: left;';
                dataPre.textContent = JSON.stringify(data, null, 2);
                logEntry.appendChild(dataPre);
            }
            debugConsoleContent.appendChild(logEntry);
            debugConsoleContent.scrollTop = debugConsoleContent.scrollHeight;
        }
        console.log(`[TEACHER DEBUG] ${message}`, data);
    }

    async init() {
        console.log('🟢 TRACE: TeacherDashboard.init called');
        const loadingOverlay = document.getElementById('loading-overlay');
        try {
            this.debugLog("🚀 Initializing teacher dashboard...");
            await this.loadConfigData();

            // צור SDK ותמתין שהוא יהיה מוכן לחלוטין
            this.sdk = new ClassroomSDK();
            console.log('🔍 SDK created:', !!this.sdk);
            console.log('🔍 SDK toggleAI method:', !!this.sdk.toggleAI);
            
            const user = await this.sdk.loginAnonymously();
            this.debugLog("👑 Teacher logged in successfully", { uid: user.uid });

            await this.sdk.init('teacher-dashboard', user);
            this.debugLog(`✅ Teacher dashboard initialized with room: ${this.sdk.getRoomCode()}`);

            // וודא שה-SDK מוכן לפני יצירת AI
            console.log('🔍 Final SDK check before AI init:');
            console.log('- SDK exists:', !!this.sdk);
            console.log('- toggleAI exists:', !!this.sdk.toggleAI);
            console.log('- DB exists:', !!this.sdk.db);
            console.log('- roomCode exists:', !!this.sdk.roomCode);

            // רק אז צור את ממשק ה-AI
            this.sdk.createAIInterface();
            this.initializeTeacherAI();
            
            // המשך כרגיל...
            this.sdk.listenForStudents(this.updateStudentsList.bind(this));
            this.sdk.listenForMessages((messages) => {
                if (messages && messages.length > 0) {
                    this.addMessage(messages);
                }
            });
            this.sdk.listenForRoomUpdates((roomData) => {
                if (!roomData || !roomData.settings) return;

                if (roomData.settings.currentPoll) {
                    this.displayPollResults(roomData.settings.currentPoll);
                }

                const aiIsActiveInDB = roomData.settings.ai_active === true;
                if (this.isAiActive !== aiIsActiveInDB) {
                    console.log(`🔄 Syncing teacher UI. AI status changed to: ${aiIsActiveInDB}`);
                    this.isAiActive = aiIsActiveInDB;
                    this.updateAIButton();
                }
            });

            this.updateConnectionStatus(true);
            this.setupEventListeners();
            this.updateRoomDisplay();
            
            // אחרי שהכל מוכן, בדוק שוב את ה-AI
            setTimeout(() => {
                if (this.checkSDKReady()) {
                    this.showTeacherAIButton();
                    this.checkAIStatus();
                    console.log('✅ Teacher AI button initialized and shown');
                } else {
                    console.error('❌ SDK not ready even after timeout');
                }
            }, 2000); // תן יותר זמן

            this.debugLog("✅ Teacher dashboard initialized successfully.");

        } catch (error) {
            console.error("🔥 Critical initialization error:", error);
            console.error("🔍 Error stack:", error.stack);
            this.updateConnectionStatus(false);
        } finally {
            if(loadingOverlay) loadingOverlay.classList.add('hidden');
        }
    }

    // 🆕 New function to activate AI for teacher
    async initializeTeacherAI() {
        this.debugLog("🤖 Initializing AI for teacher...");
        
        try {
            // 1. Check AI service availability
            const aiStatus = await this.testAIService();
            if (!aiStatus) {
                this.debugLog("⚠️ AI service not available, but continuing...");
            }
            
            // 2. Show AI button in any case (even if service is not available)
            this.showTeacherAIButton();
            
            // 3. Update AI status in interface
            await this.checkAIStatus();
            
            // 4. Add activity message
            this.addActivity("🤖 AI interface enabled for teacher");
            
            this.debugLog("✅ Teacher AI initialized successfully");
            
        } catch (error) {
            console.error("🔥 Error initializing teacher AI:", error);
            this.debugLog("❌ Teacher AI initialization failed", error);
            
            // Even in case of error - show the button
            this.showTeacherAIButton();
            this.addActivity("⚠️ AI available but with limitations");
        }
    }

    // 🆕 Function to show AI button for teacher
    showTeacherAIButton() {
        // 🔧 FIX: Ensure AI button is created and visible
        let aiBtn = document.getElementById('classroom-ai-btn');
        
        if (!aiBtn) {
            // Create the button if it doesn't exist
            console.log('🔧 Creating missing AI button for teacher');
            if (this.sdk && this.sdk.createAIInterface) {
                this.sdk.createAIInterface();
                aiBtn = document.getElementById('classroom-ai-btn');
            }
        }
        
        if (aiBtn) {
            aiBtn.style.display = 'block';
            aiBtn.style.opacity = '1';
            aiBtn.style.visibility = 'visible';
            
            // Add teacher indicator
            const teacherIndicator = document.createElement('div');
            teacherIndicator.className = 'teacher-ai-indicator';
            teacherIndicator.innerHTML = '🎓';
            teacherIndicator.style.cssText = `
                position: absolute; top: -5px; left: -5px;
                background: #28a745; color: white;
                border-radius: 50%; width: 20px; height: 20px;
                font-size: 12px; display: flex;
                align-items: center; justify-content: center;
                z-index: 10003;
            `;
            
            if (!aiBtn.querySelector('.teacher-ai-indicator')) {
                aiBtn.style.position = 'relative';
                aiBtn.appendChild(teacherIndicator);
            }
            
            this.debugLog("🤖 AI button displayed for teacher");
            console.log('✅ Teacher AI button is now visible and functional');
        } else {
            console.error('❌ Could not create or find AI button for teacher');
        }
    }

    // Check AI status and read current model
    async checkAIStatus() {
        console.log('🔍 checkAIStatus called');
        if (!this.sdk || !this.sdk.db) {
            console.log('❌ SDK or DB not ready');
            this.debugLog("❌ Cannot check AI status - SDK/DB not ready");
            return;
        }
        
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            const doc = await roomRef.get();
            
            console.log('🔍 Room document exists:', doc.exists);
            
            if (doc.exists) {
                const roomData = doc.data();
                console.log('🔍 Room data:', roomData);
                console.log('🔍 AI settings:', roomData.settings);
                
                this.isAiActive = roomData.settings?.ai_active === true;
                this.currentAiModel = roomData.settings?.ai_model || 'chatgpt';
                
                console.log('🔍 Set isAiActive to:', this.isAiActive);
                
                this.updateAIButton();
                this.updateAIModelDisplay();
                
                this.debugLog(`🤖 AI Status: ${this.isAiActive ? 'Active' : 'Disabled'}, Model: ${this.currentAiModel}`);
            } else {
                console.log('⚠️ Room document not found');
                this.debugLog("⚠️ Room document not found for AI status check");
            }
        } catch (error) {
            console.error("🔥 Error checking AI status:", error);
            this.debugLog("❌ AI status check failed", error);
        }
    }

    // Update AI button display
    updateAIButton() {
        const aiStatusIcon = document.getElementById('aiStatusIcon');
        const aiStatusText = document.getElementById('aiStatusText');
        const aiStatusDesc = document.querySelector('#toggleAI .dropdown-desc');

        if (this.isAiActive) {
            if (aiStatusIcon) aiStatusIcon.textContent = '🟢';
            if (aiStatusText) aiStatusText.textContent = 'AI Active for Students';
            if (aiStatusDesc) aiStatusDesc.textContent = 'Click to disable';
        } else {
            if (aiStatusIcon) aiStatusIcon.textContent = '🔴';
            if (aiStatusText) aiStatusText.textContent = 'AI Disabled for Students';
            if (aiStatusDesc) aiStatusDesc.textContent = 'Click to enable';
        }
    }

    // Update current model display
    updateAIModelDisplay() {
        // Update current model text
        const modelDisplays = document.querySelectorAll('.current-ai-model');
        modelDisplays.forEach(display => {
            display.textContent = this.getModelDisplayName(this.currentAiModel);
        });

        // Highlight active button
        document.querySelectorAll('.dropdown-item.ai-model-btn').forEach(btn => {
            if (btn.dataset.model === this.currentAiModel) {
                btn.style.backgroundColor = '#e8f5e9';
                btn.style.fontWeight = 'bold';
            } else {
                btn.style.backgroundColor = '';
                btn.style.fontWeight = 'normal';
            }
        });
    }

    // Get display name for model
    getModelDisplayName(model) {
        const modelNames = {
            'chatgpt': 'ChatGPT',
            'claude': 'Claude',
            'gemini': 'Gemini'
        };
        return modelNames[model] || model;
    }

    // Toggle AI mode (enable/disable)
    async toggleAIForClass() {
        console.log('--- Starting toggleAIForClass ---');
        if (!this.sdk || !this.sdk.db || !this.sdk.roomCode) {
            console.error('SDK not ready. Cannot update Firestore.');
            alert('SDK not ready. Please refresh.');
            return;
        }

        const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.roomCode);
        
        try {
            // קודם קוראים כדי לדעת מה המצב הנוכחי
            const doc = await roomRef.get();
            if (!doc.exists) {
                console.error('Document does not exist!');
                return;
            }

            const currentState = doc.data().settings.ai_active;
            const newState = !currentState;

            // מבצעים את העדכון במסד הנתונים
            await roomRef.update({
                'settings.ai_active': newState
            });

            console.log(`SUCCESS: Firestore updated. New state is: ${newState}`);

            // ======================================================
            // === החלק החסר: עדכון ממשק המשתמש לאחר ההצלחה ===
            // ======================================================

            // 1. עדכון המשתנה המקומי שמחזיק את הסטטוס
            this.isAiActive = newState;
            
            // 2. עדכון מראה הכפתור (צבע וטקסט)
            this.updateAIButton();
            
            // 3. הוספת שורה ליומן האירועים
            if (newState) {
                this.addActivity('🤖 AI enabled for class.');
            } else {
                this.addActivity('🔴 AI disabled for class.');
            }
            
        } catch (error) {
            console.error('FAILURE: Could not update Firestore.', error);
            alert('Failed to update the AI status. See console for error details.');
        }
    }

    checkSDKReady() {
        if (!this.sdk) {
            console.error('❌ SDK not initialized');
            return false;
        }
        
        if (!this.sdk.toggleAI) {
            console.error('❌ toggleAI method missing from SDK');
            console.log('🔍 Available methods:', Object.getOwnPropertyNames(this.sdk));
            return false;
        }
        
        if (!this.sdk.db) {
            console.error('❌ Firebase DB not ready');
            return false;
        }
        
        if (!this.sdk.roomCode) {
            console.error('❌ Room code not set');
            return false;
        }
        
        console.log('✅ SDK ready for AI operations');
        return true;
    }

    // Switch AI model (without turning off/on)
    async switchAIModel(model) {
        if (!this.sdk) return;
        
        this.debugLog(`🔄 Switching AI model to: ${model}`);
        
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.update({
                'settings.ai_model': model,
                'last_activity': firebase.firestore.FieldValue.serverTimestamp()
            });
            
            this.currentAiModel = model;
            this.updateAIButton();
            this.updateAIModelDisplay();
            
            const modelName = this.getModelDisplayName(model);
            this.addActivity(`🔄 AI model switched to: ${modelName}`);
            this.debugLog(`✅ AI model switched to: ${model}`);
            
            // Message to students
            if (this.isAiActive) {
                this.showModelSwitchMessage(modelName);
            }
            
        } catch (error) {
            console.error("🔥 Error switching AI model:", error);
            this.debugLog("❌ AI model switch failed", error);
            alert("Error switching AI model: " + error.message);
        }
    }

    // Model switch message
    showModelSwitchMessage(modelName) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 10000;
            background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
            color: white; padding: 15px 20px; border-radius: 8px;
            box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);
            font-weight: bold; max-width: 300px;
            animation: slideInRight 0.5s ease;
            direction: ltr; text-align: left;
        `;
        
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 24px;">🔄</span>
                <div>
                    <div>AI Model Switched!</div>
                    <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">
                        Now using: ${modelName}
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease';
            setTimeout(() => notification.remove(), 500);
        }, 3000);
    }

    // Test AI service - updated to work with askAI
    async testAIService() {
        // Comprehensive check of all required components
        if (!this.sdk) {
            this.debugLog("❌ SDK not available for AI test");
            return false;
        }
        
        if (!this.sdk.auth?.currentUser) {
            this.debugLog("❌ User not authenticated for AI test");
            return false;
        }
        
        if (!this.sdk.functions) {
            this.debugLog("❌ Firebase Functions not initialized");
            return false;
        }
            
        this.debugLog("🔍 Testing AI service availability...");
        
        try {
            // Check if SDK has testAIService method, if not use fallback
            if (this.sdk.testAIService) {
                const result = await this.sdk.testAIService();
                
                if (result.available) {
                    this.debugLog("✅ AI service available and working", result);
                    return true;
                } else {
                    this.debugLog("❌ AI service not available", result);
                    
                    // Show detailed message to teacher
                    let errorDetails = "AI service not available";
                    if (result.code === 'functions/failed-precondition') {
                        errorDetails = "AI service not configured (missing API key)";
                    } else if (result.code === 'functions/unauthenticated') {
                        errorDetails = "Authentication error in system";
                    } else if (result.code === 'functions/not-initialized') {
                        errorDetails = "Firebase Functions not initialized";
                    }
                    
                    // Show one-time alert
                    if (!this.aiWarningShown) {
                        this.aiWarningShown = true;
                        setTimeout(() => {
                            if (confirm(`⚠️ ${errorDetails}\n\nWould you like to try again?`)) {
                                this.testAIService();
                            }
                        }, 1000);
                    }
                    
                    return false;
                }
            } else {
                // Fallback if SDK doesn't have testAIService
                this.debugLog("⚠️ SDK testAIService method not found, assuming available");
                return true;
            }
        } catch (error) {
            this.debugLog("🔥 AI service test failed with error", error);
            console.error("AI test error:", error);
            // Don't fail completely, just log and continue
            return true;
        }
    }

    updateConnectionStatus(isConnected) {
        const statusDiv = document.getElementById('connectionStatus');
        if (!statusDiv) return;
        if (isConnected) {
            statusDiv.textContent = '🟢 Connected to Firebase';
            statusDiv.className = 'connection-status connected';
        } else {
            statusDiv.textContent = '🔴 Not Connected';
            statusDiv.className = 'connection-status disconnected';
        }
    }

    addActivity(activityText) {
        const activitiesArea = document.getElementById('activitiesArea');
        if (!activitiesArea) return;

        const activityDiv = document.createElement('div');
        activityDiv.className = 'activity-item';
        activityDiv.style.direction = 'ltr';
        activityDiv.style.textAlign = 'left';
        activityDiv.innerHTML = `
            <span class="activity-time">${new Date().toLocaleTimeString(this.locale)}</span>
            <span class="activity-text">${activityText}</span>
        `;
        activitiesArea.appendChild(activityDiv);
        activitiesArea.scrollTop = activitiesArea.scrollHeight;
    }

    updateStudentsList(studentsData) {
        this.students = studentsData;
        const studentsListDiv = document.getElementById('studentsList');
        const studentsCountSpan = document.getElementById('studentsCount');
        if (!studentsListDiv || !studentsCountSpan) return;

        // Clear existing list
        studentsListDiv.innerHTML = '';
        studentsCountSpan.textContent = this.students.length;

        if (this.students.length === 0) {
            studentsListDiv.innerHTML = '<div class="no-students">No students connected currently</div>';
            return;
        }
        
        const template = document.getElementById('studentTemplate');
        
        // Process ALL students in the array
        this.students.forEach(student => {
            const studentName = student.name || 'Unknown Student';
            const studentElement = document.importNode(template.content, true);
            
            const nameSpan = studentElement.querySelector('.student-name');
            if(nameSpan) nameSpan.textContent = studentName;

            const actionsDiv = studentElement.querySelector('.student-actions');
            if (actionsDiv) {
                const privateMsgBtn = document.createElement('button');
                privateMsgBtn.textContent = 'Private Message';
                privateMsgBtn.className = 'private-message-btn';
                privateMsgBtn.onclick = () => this.openPrivateMessageModal(student);
                actionsDiv.appendChild(privateMsgBtn);
            }
            
            studentsListDiv.appendChild(studentElement);
        });
        
        this.addActivity(`Student list updated. ${this.students.length} students connected.`);
        console.log(`✅ Updated student list: ${this.students.length} students displayed`);
    }

    // 🔧 Fix #1: undefined messages - complete and fixed function
    addMessage(messages) {
        // If it's an array of messages - iterate through each one
        if (Array.isArray(messages)) {
            messages.forEach(message => this.addSingleMessage(message));
            return;
        }
        
        // If it's a single message
        this.addSingleMessage(messages);
    }

    addSingleMessage(message) {
        const messagesArea = document.getElementById('messagesArea');
        const messagesCountSpan = document.getElementById('messagesCount');
        if (!messagesArea) return;

        // 🔧 FIX: Prevent duplicate messages by checking if already exists
        const messageId = message.timestamp?.seconds + '_' + message.sender_uid + '_' + message.content.substring(0, 20);
        const existingMessage = messagesArea.querySelector(`[data-message-id="${messageId}"]`);
        if (existingMessage) {
            console.log('⚠️ Duplicate message prevented:', message.content.substring(0, 30));
            return;
        }

        // Validation and message creation code...
        const sender = message?.sender || 'Unknown User';
        const content = message?.content || 'Empty Message';
        const timestamp = message?.timestamp;
        const isTeacher = message?.is_teacher === true;
        const isPrivate = message?.is_private === true;

        // Remove "no messages" placeholder
        const noMessages = messagesArea.querySelector('.no-messages');
        if (noMessages) {
            noMessages.remove();
        }

        // Update message count
        if (messagesCountSpan) {
            const currentCount = parseInt(messagesCountSpan.textContent) || 0;
            messagesCountSpan.textContent = currentCount + 1;
        }

        // Create message element
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-item';
        messageDiv.setAttribute('data-message-id', messageId); // 🔧 FIX: Add unique identifier
        messageDiv.style.direction = 'ltr';
        messageDiv.style.textAlign = 'left';
        
        // Icon and time formatting...
        let senderIcon = '';
        if (isTeacher) {
            senderIcon = '🎓 ';
        } else if (isPrivate) {
            senderIcon = '🔒 ';
        }

        let timeString = 'Unknown Time';
        if (timestamp) {
            try {
                const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
                timeString = date.toLocaleTimeString(this.locale);
            } catch (e) {
                console.warn('Cannot parse timestamp:', timestamp);
                timeString = new Date().toLocaleTimeString(this.locale);
            }
        }

        messageDiv.innerHTML = `
            <div class="message-header">
                <span class="message-sender">${senderIcon}${sender}</span>
                <span class="message-time">${timeString}</span>
            </div>
            <div class="message-content">${content}</div>
            ${isPrivate ? '<div class="message-private-indicator">Private Message</div>' : ''}
        `;

        if (isPrivate) {
            messageDiv.style.borderLeft = '4px solid #ffc107';
            messageDiv.style.background = '#fff9c4';
        }

        messagesArea.appendChild(messageDiv);
        messagesArea.scrollTop = messagesArea.scrollHeight;

        console.log(`✅ Message added: ${content.substring(0, 30)}...`);
    }

    sendCommand(command, payload = {}) {
        if (!this.sdk) return;
        this.sdk.sendCommand(command, payload);
        this.addActivity(`📤 Command sent: ${command}`);
    }

    sendMessageToClass(content) {
        if (!content || !content.trim()) return;
        
        if (this.sdk) {
            this.sdk.sendMessage(content);
            this.addActivity(`💬 Message sent to class: ${content}`);
        }
    }

    // 🆕 AI activation encouragement message with English support
    showAIActivationMessage() {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 10000;
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white; padding: 15px 20px; border-radius: 8px;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
            font-weight: bold; max-width: 300px;
            animation: slideInRight 0.5s ease;
            direction: ltr; text-align: left;
        `;
        
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 24px;">🤖</span>
                <div>
                    <div>AI Enabled Successfully!</div>
                    <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">
                        Students can now ask questions
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // Remove after 4 seconds
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease';
            setTimeout(() => notification.remove(), 500);
        }, 4000);
        
        // Add CSS for animations if not exists
        if (!document.getElementById('ai-notification-styles')) {
            const style = document.createElement('style');
            style.id = 'ai-notification-styles';
            style.textContent = `
                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOutRight {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(style);
        }
    }

    setupEventListeners() {
        // Modal handling
        const openModal = (modalId) => document.getElementById(modalId)?.classList.add('visible');
        const closeModal = (modal) => modal.closest('.modal-overlay')?.classList.remove('visible');

        // 🎯 Fix: Single block handling model buttons
        document.querySelectorAll('.dropdown-item.ai-model-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                const model = btn.dataset.model;
                if (model) {
                    this.switchAIModel(model);
                }
            });
        });

        // Modal close buttons
        document.querySelectorAll('.modal-close').forEach(btn => {
            btn.addEventListener('click', (e) => {
                closeModal(e.target);
            });
        });

        // Private message form submit
        const privateMessageForm = document.getElementById('privateMessageForm');
        if (privateMessageForm) {
            privateMessageForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.sendPrivateMessage();
            });
        }

        // 🎯 Add the following code block within the function
        const customUrlForm = document.getElementById('customUrlForm');
        if (customUrlForm) {
            customUrlForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const urlInput = document.getElementById('customUrlInput');
                const url = urlInput.value.trim();
                if (url) {
                    this.sendSelectedGame(url); // Reuse function for sending and closing
                    urlInput.value = '';
                }
            });
        }

        // 🎯 Add poll handling
        document.querySelectorAll('.poll-type-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const pollType = btn.dataset.type;
                this.startPoll(pollType);
            });
        });

        const stopPollBtn = document.getElementById('stop-poll-btn');
        if(stopPollBtn) {
            stopPollBtn.addEventListener('click', () => this.stopPoll());
        }

        // 🎯 Handle general chat form
        const chatForm = document.getElementById('chat-form');
        if (chatForm) {
            chatForm.addEventListener('submit', (e) => {
                e.preventDefault(); // Prevents page refresh - the critical fix!
                const input = document.getElementById('chat-input');
                const message = input.value.trim();
                if (message) {
                    this.sdk.sendMessage(message);
                    input.value = '';
                }
            });
        }

        document.getElementById('ai-summarize-btn')?.addEventListener('click', () => this.handleAiAnalysis('summarize'));
        document.getElementById('ai-keywords-btn')?.addEventListener('click', () => this.handleAiAnalysis('keywords'));

        // Handle closing the open question modal and stopping the poll
        document.getElementById('close-open-question-btn')?.addEventListener('click', () => this.closeOpenEndedQuestion());
        document.querySelector('#open-question-modal .modal-close')?.addEventListener('click', () => this.closeOpenEndedQuestion());

        // הוספת האזנה לכפתור איפוס מסכים
        document.getElementById('resetScreensBtn')?.addEventListener('click', () => {
            if (confirm('Are you sure you want to reset all student screens? This will stop any active poll or content.')) {
                this.resetStudentScreens();
            }
        });
    }

    openPrivateMessageModal(student) {
        const modal = document.getElementById('privateMessageModal');
        if (modal) {
            document.getElementById('privateMessageRecipient').textContent = student.name;
            modal.dataset.studentUid = student.uid;
            modal.classList.add('visible');
        }
    }

    async sendPrivateMessage() {
        const modal = document.getElementById('privateMessageModal');
        const content = document.getElementById('privateMessageText').value.trim();
        const studentUid = modal.dataset.studentUid;
        
        if (!content || !studentUid) return;
        
        try {
            await this.sdk.sendPrivateMessage(content, studentUid);
            this.addActivity(`✉️ Private message sent to ${document.getElementById('privateMessageRecipient').textContent}`);
            document.getElementById('privateMessageText').value = '';
            modal.classList.remove('visible');
        } catch (error) {
            console.error("🔥 Error sending private message:", error);
            alert("Error sending private message");
        }
    }

    async resetClassroomData() {
        if (!this.sdk || !confirm('Are you sure you want to reset the classroom? This action will delete all data.')) {
            return;
        }
        
        try {
            // Delete room from cloud
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.delete();
            
            // Create new room
            await this.sdk.initializeRoom();
            
            this.addActivity('🔄 Classroom reset successfully');
            alert('Classroom reset successfully!');
        } catch (error) {
            console.error("🔥 Error resetting classroom:", error);
            alert("Error resetting classroom");
        }
    }

    updateRoomDisplay() {
        const roomCode = this.sdk ? this.sdk.getRoomCode() : null;
        if (!roomCode) return;

        // Update text display in header
        const roomCodeSpan = document.getElementById('header-room-code');
        if (roomCodeSpan) {
            roomCodeSpan.textContent = roomCode;
        }

        // Create and display QR code
        const qrImage = document.getElementById('qr-code-image');
        if (qrImage) {
            const studentUrl = `${window.location.origin}/${this.config.studentAppUrl}?classroom=${roomCode}`;
            const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(studentUrl)}`;
            
            qrImage.src = qrApiUrl;

            // Add copy functionality on click
            qrImage.onclick = () => {
                navigator.clipboard.writeText(studentUrl).then(() => {
                    this.addActivity(`✅ Student link copied`);
                    // Can add small visual notification here if desired
                }).catch(err => {
                    console.error('Failed to copy URL: ', err);
                });
            };
        }
    }

    async loadConfigData() {
        try {
            const response = await fetch('config.json');
            if (!response.ok) throw new Error('Network response was not ok');
            this.config = await response.json();
            this.debugLog('✅ Config file loaded successfully', this.config);
        } catch (error) {
            console.error('🔥 Error loading config file:', error);
            this.config = { studentAppUrl: 'student-app.html', games: [] }; // Fallback
        }
    }

    openContentModal() {
        document.getElementById('customContentModal')?.classList.add('visible');
        this.populateGamesList();
    }

    populateGamesList() {
        const container = document.getElementById('game-list-container');
        if (!container) return;

        const games = this.config?.games || []; // 🎯 Change here
        container.innerHTML = ''; // Clear previous content

        if (games.length === 0) {
            container.innerHTML = '<p>No games found in config.json</p>';
            return;
        }

        games.forEach(game => {
            const gameElement = document.createElement('a');
            gameElement.href = '#';
            gameElement.className = 'dropdown-item'; // Reuse existing CSS
            gameElement.onclick = (e) => {
                e.preventDefault();
                this.sendSelectedGame(game.url);
            };

            gameElement.innerHTML = `
                <span class="dropdown-icon">${game.icon || '🔗'}</span>
                <div class="dropdown-content">
                    <div class="dropdown-title">${game.name}</div>
                    <div class="dropdown-desc">${game.description}</div>
                </div>
            `;
            container.appendChild(gameElement);
        });
    }

    sendSelectedGame(url) {
        if (!url) return;
        this.sendCommand('LOAD_CONTENT', { url });

        // Close window after sending
        const modal = document.getElementById('customContentModal');
        if (modal) {
            modal.querySelector('.modal-close').click();
        }
    }

    // 🎯 Functions for poll management
    openPollCreationModal() {
        this.debugLog("📊 Opening poll creation window");
        document.getElementById('poll-creation-modal')?.classList.add('visible');
    }

    // החלף את כל הפונקציה startPoll בזו:
    async startPoll(pollType) {
        this.debugLog(`📊 Starting a new poll of type: ${pollType}`);

        try {
            // שלב 1: בדיקה וארכוב של הסקר הפעיל הקודם (אם קיים)
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.roomCode);
            const roomDoc = await roomRef.get();
            const existingPoll = roomDoc.data()?.settings?.currentPoll;

            if (existingPoll && existingPoll.isActive) {
                this.debugLog('Archiving previous active poll...', existingPoll.id);
                await this.sdk.saveQuestionToHistory(existingPoll);
                this.addActivity(`📝 Previous poll (${existingPoll.id.substring(0,5)}) archived.`);
            }

            // שלב 2: יצירת אובייקט הסקר החדש עם מאגר תשובות ריק
            const pollOptions = {
                'yes_no': 2,
                'multiple_choice': 4,
                'open_text': 0
            };

            const newPoll = {
                id: "poll_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9),
                type: pollType,
                question: '', // ניתן להרחבה בעתיד
                options: pollOptions[pollType],
                isActive: true,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                responses: {} // התחלה עם מאגר נקי
            };

            // שלב 3: עדכון ה-Firestore עם הסקר החדש
            await roomRef.update({
                'settings.currentPoll': newPoll
            });

            // שלב 4: עדכון ממשק המשתמש בהתאם לסוג הסקר החדש
            if (pollType === 'open_text') {
                this.currentQuestionResponses = {}; // איפוס הקאש המקומי
                document.getElementById('open-question-modal')?.classList.add('visible');
            } else {
                document.getElementById('poll-section').style.display = 'block';
            }

            this.addActivity(`📊 Started new poll of type: ${pollType}`);
            document.getElementById('poll-creation-modal')?.classList.remove('visible');
            this.debugLog(`✅ New poll ${newPoll.id} started successfully.`);

        } catch (error) {
            console.error("🔥 Failed to start a new poll:", error);
            this.debugLog("❌ Error during startPoll", error);
            this.addActivity("❌ Error starting new poll.");
        }
    }

    stopPoll() {
        this.debugLog("📊 Stopping poll");
        this.sdk.stopPoll();
        document.getElementById('poll-section').style.display = 'none';
        this.addActivity(`⏹️ Poll ended`);
    }

    displayPollResults(pollData) {
        // Handle Open Text Polls
        if (pollData && pollData.type === 'open_text' && pollData.isActive) {
            const container = document.getElementById('open-question-results');
            if (!container) return;
            container.innerHTML = ''; // Clear previous results to re-render

            const responses = pollData.responses || {};
            this.currentQuestionResponses = responses; // Update local memory

            // Correctly iterate over the responses object
            for (const studentName in responses) {
                if (Object.hasOwnProperty.call(responses, studentName)) {
                    const answers = responses[studentName];
                    if (Array.isArray(answers) && answers.length > 0) {
                        const lastAnswer = answers[answers.length - 1];
                        const answerDiv = document.createElement('div');
                        answerDiv.innerHTML = `<strong>${studentName} (${answers.length} versions):</strong><p style="margin: 5px 0 0 0; color: #333;">${lastAnswer}</p>`;
                        answerDiv.style.borderBottom = '1px solid #eee';
                        answerDiv.style.padding = '10px 0';
                        container.appendChild(answerDiv);
                    }
                }
            }
        } 
        // Handle Multiple Choice and Yes/No Polls
        else if (pollData && (pollData.type === 'multiple_choice' || pollData.type === 'yes_no')) {
            const container = document.getElementById('poll-results-container');
            const section = document.getElementById('poll-section');
            if (!container || !section) return;

            section.style.display = 'block';
            container.innerHTML = '';

            const responses = pollData.responses || {};
            const totalVotes = Object.keys(responses).length;
            const voteCounts = {};

            // Count votes for each option
            for (let i = 1; i <= pollData.options; i++) {
                voteCounts[i] = 0;
            }
            Object.values(responses).forEach(vote => {
                if (voteCounts[vote] !== undefined) {
                    voteCounts[vote]++;
                }
            });

            // Display results
            for (let i = 1; i <= pollData.options; i++) {
                const votes = voteCounts[i];
                const percentage = totalVotes > 0 ? ((votes / totalVotes) * 100).toFixed(1) : 0;
                const label = pollData.type === 'yes_no' ? (i === 1 ? 'Yes' : 'No') : `Option ${i}`;

                const barHtml = `
                    <div style="margin-bottom: 12px;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                            <strong>${label}</strong>
                            <span>${votes} votes (${percentage}%)</span>
                        </div>
                        <div style="background: #e0e0e0; border-radius: 4px; overflow: hidden;">
                            <div style="width: ${percentage}%; background: #42a5f5; height: 20px; transition: width 0.3s ease;"></div>
                        </div>
                    </div>
                `;
                container.innerHTML += barHtml;
            }
        }
    }

    async handleAiAnalysis(type) {
        // 1. Open the teacher's AI window immediately
        if (this.sdk && this.sdk.aiContainer.style.display === 'none') {
            this.sdk.toggleAI();
        }

        // 2. Collect current responses from local memory
        if (Object.keys(this.currentQuestionResponses).length === 0) {
            this.sdk.addAIMessage("🤖", "No responses to analyze currently.", false);
            return;
        }

        const allAnswers = JSON.stringify(this.currentQuestionResponses, null, 2);
        const lang = this.sdk.getInterfaceLanguage();
        let prompt;

        // 3. Create language-aware prompt
        if (type === 'summarize') {
            prompt = (lang === 'he')
                ? `לפניך תשובות של תלמידים לשאלה. כל שם תלמיד ממופה למערך של התשובות שלו (מהראשונה לאחרונה). סכם את רמת ההבנה הכיתתית, זהה תלמידים שתשובותיהם מצביעות על קושי, וציין תלמידים שהראו שיפור משמעותי בין הגרסאות:\n\n${allAnswers}`
                : `Here are student responses to a question. Each student name maps to an array of their answers (from first to last). Summarize the class's understanding, identify students whose answers indicate difficulty, and point out students who showed significant improvement across versions:\n\n${allAnswers}`;
        } else { // keywords
            prompt = (lang === 'he')
                ? `זהה את 10 מילות המפתח הנפוצות והמשמעותיות ביותר מהתשובות הבאות:\n\n${allAnswers}`
                : `Extract the 10 most frequent and significant keywords from the following text:\n\n${allAnswers}`;
        }

        // 4. Send prompt to AI
        this.sdk.sendAIMessage(prompt, lang);
        this.addActivity(`📈 Sent "situation analysis" to AI.`);

        // 5. Reset responses in Firestore for a new round
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            await roomRef.update({ 'settings.currentPoll.responses': {} });
            this.addActivity(`🔄 Response repository in Firestore reset and ready for next round.`);
        } catch (error) {
            console.error("Error resetting poll responses:", error);
        }
    }

    async generateLessonSummary() {
        this.addActivity('📊 Preparing comprehensive summary report...');
        if (this.sdk && this.sdk.aiContainer) {
            if (this.sdk.aiContainer.style.display === 'none') {
                this.sdk.toggleAI();
            }
        }
        try {
            const historySnapshot = await this.sdk.db.collection('rooms')
                .doc(this.sdk.getRoomCode())
                .collection('questionHistory')
                .orderBy('createdAt')
                .get();
            let fullLessonData = [];
            historySnapshot.forEach(doc => {
                fullLessonData.push(doc.data());
            });
            const summaryPrompt = this.buildLessonSummaryPrompt(fullLessonData);
            const language = this.sdk.getInterfaceLanguage();
            await this.sdk.sendAIMessage(summaryPrompt, language);
            this.addActivity('✅ Summary report sent to AI');
            document.getElementById('end-lesson-modal')?.classList.remove('visible');
        } catch (error) {
            console.error('🔥 Error creating summary report:', error);
            this.addActivity('❌ Error creating summary report');
        }
    }

    buildLessonSummaryPrompt(lessonData) {
        const language = this.sdk.getInterfaceLanguage();
        if (language === 'he') {
            let prompt = `דוח סיכום מקיף לשיעור\n\n`;
            prompt += `מספר שאלות שנשאלו: ${lessonData.length}\n\n`;
            lessonData.forEach((question, index) => {
                prompt += `שאלה ${index + 1}: ${question.question || 'שאלה ללא כותרת'}\n`;
                prompt += `תשובות התלמידים:\n`;
                Object.entries(question.responses || {}).forEach(([student, answers]) => {
                    if (Array.isArray(answers)) {
                        prompt += `  ${student}: ${answers.join(' → ')}\n`;
                    } else {
                        prompt += `  ${student}: ${answers}\n`;
                    }
                });
                prompt += `\n`;
            });
            prompt += `אנא סכם:\n`;
            prompt += `1. התקדמות כללית של הכיתה\n`;
            prompt += `2. תלמידים שהראו שיפור משמעותי\n`;
            prompt += `3. תלמידים שנזקקים לתשומת לב נוספת\n`;
            prompt += `4. נושאים שנותרו לא ברורים\n`;
            prompt += `5. המלצות לשיעור הבא\n`;
            return prompt;
        } else {
            let prompt = `Comprehensive Lesson Summary Report\n\n`;
            prompt += `Number of questions asked: ${lessonData.length}\n\n`;
            lessonData.forEach((question, index) => {
                prompt += `Question ${index + 1}: ${question.question || 'Untitled question'}\n`;
                prompt += `Student responses:\n`;
                Object.entries(question.responses || {}).forEach(([student, answers]) => {
                    if (Array.isArray(answers)) {
                        prompt += `  ${student}: ${answers.join(' → ')}\n`;
                    } else {
                        prompt += `  ${student}: ${answers}\n`;
                    }
                });
                prompt += `\n`;
            });
            prompt += `Please summarize:\n`;
            prompt += `1. Overall class progress\n`;
            prompt += `2. Students who showed significant improvement\n`;
            prompt += `3. Students who need additional attention\n`;
            prompt += `4. Topics that remain unclear\n`;
            prompt += `5. Recommendations for next lesson\n`;
            return prompt;
        }
    }

    async closeOpenEndedQuestion() {
        if (!this.sdk) return;
        try {
            const roomRef = this.sdk.db.collection('rooms').doc(this.sdk.getRoomCode());
            const roomDoc = await roomRef.get();
            const currentPoll = roomDoc.data()?.settings?.currentPoll;
            if (currentPoll && currentPoll.isActive) {
                await this.sdk.saveQuestionToHistory(currentPoll);
                await roomRef.update({ 'settings.currentPoll.isActive': false });
                this.addActivity('📝 Open question closed - student modal closed');
            }
            document.getElementById('open-question-modal')?.classList.remove('visible');
        } catch (error) {
            console.error('🔥 Error closing open question:', error);
            this.addActivity('❌ Error closing question');
        }
    }

    // הוספת מתודה למחלקה TeacherDashboard
    async resetStudentScreens() {
        if (!this.sdk) return;
        console.log("🔄 Resetting all student screens...");
        try {
            // שלח פקודה לנקות את ה-iframe
            await this.sdk.sendCommand('LOAD_CONTENT', { url: 'about:blank' });
            // עצור כל סקר פעיל
            await this.sdk.stopPoll();
            this.addActivity('⏹️ All student screens have been cleared.');
        } catch (error) {
            console.error("Error resetting student screens:", error);
        }
    }
}

// Global functions for HTML buttons with English support
function sendQuickMessage(message) {
    if (window.teacherDashboard) {
        window.teacherDashboard.sendMessageToClass(message);
    }
}

function sendGameContent(url) {
    if (window.teacherDashboard) {
        window.teacherDashboard.sendCommand('LOAD_CONTENT', { url });
    }
}

function sendCustomContent() {
    document.getElementById('customContentModal').classList.add('visible');
}

// Global functions - updated
function toggleAIForClass() {
    if (window.teacherDashboard) {
        window.teacherDashboard.toggleAIForClass();
    }
}

function switchAIModel(model) {
    if (window.teacherDashboard) {
        window.teacherDashboard.switchAIModel(model);
    }
}

function resetClassroomData() {
    if (window.teacherDashboard) {
        window.teacherDashboard.resetClassroomData();
    }
}

function toggleDebug() {
    const debugConsole = document.querySelector('.enhanced-debug-console');
    if (debugConsole) {
        debugConsole.classList.toggle('visible');
    }
}

function sendMessage() {
    document.getElementById('messageModal').classList.add('visible');
}

function exportData() {
    if (!window.teacherDashboard) return;
    
    const data = {
        students: window.teacherDashboard.students,
        activities: window.teacherDashboard.activities,
        timestamp: new Date().toISOString(),
        roomCode: window.teacherDashboard.sdk?.getRoomCode()
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `classroom-data-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
}

function updateAIMenuStatus(isActive) {
    const aiMenuItems = document.querySelectorAll('.ai-menu-item');
    aiMenuItems.forEach(item => {
        item.style.opacity = isActive ? '1' : '0.5';
        item.style.pointerEvents = isActive ? 'auto' : 'none';
    });
}

// Function to copy classroom ID to clipboard with English support
function copyClassroomId() {
    if (!window.teacherDashboard || !window.teacherDashboard.sdk) {
        alert('System is not ready yet');
        return;
    }
    
    const roomCode = window.teacherDashboard.sdk.getRoomCode();
    
    // Copy to clipboard
    navigator.clipboard.writeText(roomCode).then(() => {
        // Change button text temporarily
        const copyBtn = document.getElementById('copyClassroomIdBtn');
        if (copyBtn) {
            const originalText = copyBtn.textContent;
            copyBtn.textContent = '✅ Copied!';
            copyBtn.style.background = 'rgba(76, 175, 80, 0.3)';
            
            setTimeout(() => {
                copyBtn.textContent = originalText;
                copyBtn.style.background = 'rgba(255,255,255,0.2)';
            }, 2000);
        }
        
        // User notification
        if (window.teacherDashboard) {
            window.teacherDashboard.addActivity('📋 Classroom ID copied to clipboard');
        }
    }).catch(err => {
        console.error('Copy error:', err);
        alert('Error copying ID. Try copying manually.');
    });
}

// Function to test AI status with English messages
function testAIService() {
    if (window.teacherDashboard) {
        window.teacherDashboard.testAIService().then(result => {
            if (result) {
                alert('✅ AI service is available and working properly!');
            } else {
                alert('❌ AI service is currently unavailable. Check settings.');
            }
        });
    }
}

// 🔧 Add English support for the entire system
document.addEventListener('DOMContentLoaded', function() {
    // Set text direction for all relevant elements
    const ltrElements = document.querySelectorAll('.message-item, .activity-item, .student-item');
    ltrElements.forEach(element => {
        element.style.direction = 'ltr';
        element.style.textAlign = 'left';
    });
    
    // Set font that supports English
    const style = document.createElement('style');
    style.textContent = `
        body, * {
            font-family: 'Segoe UI', Tahoma, Arial, 'Roboto', 'Open Sans', sans-serif !important;
        }
        
        .message-content, .activity-text, .student-name {
            direction: ltr !important;
            text-align: left !important;
            unicode-bidi: embed !important;
        }
        
        .debug-log, .debug-content {
            direction: ltr !important;
            text-align: left !important;
        }
        
        /* Fix English texts in interface */
        .dropdown-title, .dropdown-desc, .tool-label, .tool-desc {
            direction: ltr !important;
            text-align: left !important;
        }
    `;
    document.head.appendChild(style);
});

// Debug function with English logs
function debugClassroom() {
    if (!window.teacherDashboard) {
        console.log('Teacher dashboard not initialized');
        return;
    }
    
    const debug = {
        'Room': window.teacherDashboard.sdk?.getRoomCode(),
        'Students': window.teacherDashboard.students.length,
        'AI Active': window.teacherDashboard.isAiActive,
        'AI Model': window.teacherDashboard.currentAiModel,
        'SDK Connected': !!window.teacherDashboard.sdk,
        'Init Time': new Date().toLocaleTimeString('en-US')
    };
    
    console.table(debug);
    return debug;
}

================================================================================
File 5/11: public\js\student-app.js
================================================================================

/*
 * Copyright © 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
 */
// ================== START OF FILE: public/js/student-app.js (COMPLETE AND FIXED) ==================
const App = {
    classroom: null,
    currentPollId: null, // Variable to track the currently displayed poll

    getOrCreateStudentId: function() {
        let studentId = sessionStorage.getItem('studentId');
        if (!studentId) {
            studentId = 'student_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('studentId', studentId);
        }
        return studentId;
    },

    init: function() {
        this.loadRoomCodeFromURL();
        document.getElementById('login-form')?.addEventListener('submit', this.handleLogin.bind(this));
    },

    loadRoomCodeFromURL: function() {
        const params = new URLSearchParams(window.location.search);
        const roomCode = params.get('classroom');
        if (roomCode) {
            const input = document.getElementById('teacher-uid');
            if(input) input.value = roomCode;
        }
    },

    handleLogin: async function(event) {
        event.preventDefault();
        const playerName = document.getElementById('player-name').value.trim();
        const roomCode = document.getElementById('teacher-uid').value.trim();
        const loginButton = event.target.querySelector('button');
        if (!playerName || !/^\d{4}$/.test(roomCode)) {
            alert('Name and a 4-digit room code are required!');
            return;
        }

        loginButton.textContent = 'Joining...';
        loginButton.disabled = true;

        try {
            this.classroom = new ClassroomSDK();
            const studentId = this.getOrCreateStudentId();
            await this.classroom.init('student-app', studentId, playerName, roomCode);

            document.getElementById('login-container').style.display = 'none';
            document.getElementById('main-container').style.display = 'block';

            this.classroom.createChatInterface();
            this.classroom.createAIInterface();
            this.classroom.createPollInterface();
            this.classroom.listenForRoomUpdates(this.stateManager.bind(this));

            this.classroom.listenForMessages((messages) => {
                const chatContainer = document.getElementById('classroom-chat-container');
                const isChatHidden = !chatContainer || chatContainer.style.display === 'none';

                messages.forEach(msg => {
                    this.classroom.addChatMessage(msg.sender, msg.content, msg);

                    if (isChatHidden && msg.is_teacher) {
                        this.classroom.toggleChat();
                    }
                });
            });

        } catch (error) {
            console.error("❌ Failed to initialize student app:", error);
            alert(`Failed to join the room: ${error.message}\nPlease check the room code and try again.`);
            loginButton.textContent = 'Join Lesson';
            loginButton.disabled = false;
        }
    },

    // The new central State Manager function
    stateManager: function(roomData) {
        if (!roomData || !roomData.settings) return;

        const settings = roomData.settings;
        const pollData = settings.currentPoll;
        const command = settings.current_command;

        // --- AI State Management ---
        // ** THE MAIN FIX IS HERE **
        // We no longer hide the AI button. Instead, we update the SDK's internal state.
        // The SDK's sendAIMessage function will now handle the logic of checking if AI is active.
        this.classroom.isAiActiveForClass = settings.ai_active === true;

        // --- Poll State Management ---
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollBadge = document.getElementById('poll-badge');
        const pollIsActive = pollData && pollData.isActive;

        if (pollBadge && pollContainer) {
            pollContainer.dataset.active = pollIsActive ? 'true' : 'false';
            pollBadge.style.display = pollIsActive ? 'block' : 'none';
        }

        if (pollIsActive) {
            // If a new poll has arrived, render its content and OPEN the window
            if (this.currentPollId !== pollData.id) {
                this.currentPollId = pollData.id;
                this.renderPollInterface(pollData); // This function will also make the window visible
            }
        } else {
            // If the poll has been stopped by the teacher, force-close the window
            if (this.currentPollId !== null) {
                this.clearPollInterface(); // This function now closes the window
                this.currentPollId = null;
            }
        }

        // --- Content Command Management ---
        if (command && command.command === 'LOAD_CONTENT') {
            const iframe = document.getElementById('content-frame');
            const newUrl = command.payload.url || 'about:blank';
            if (iframe && iframe.src !== newUrl) {
                iframe.src = newUrl;
            }
        }
    },

    renderPollInterface: function(pollData) {
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollContentArea = document.getElementById('classroom-poll-content-area');
        if (!pollContainer || !pollContentArea) return;

        // Show the poll window and render content inside it
        pollContainer.style.display = 'block';

        // Build the poll UI based on its type
        if (pollData.type === 'open_text') {
            pollContentArea.innerHTML = `
                <p style="margin-top:0; margin-bottom:15px; font-weight:500;">The teacher is asking a question. Please type your answer below.</p>
                <textarea id="open-answer-input" placeholder="Write your answer here..." style="width: 100%; height: 80px; padding: 10px; border-radius: 6px; border: 1px solid #ccc; box-sizing: border-box;"></textarea>
                <button id="submit-open-answer" style="width: 100%; padding: 12px; margin-top: 10px; border: none; background: #007bff; color: white; border-radius: 6px; cursor: pointer;">Submit Answer</button>
            `;
            document.getElementById('submit-open-answer').onclick = (event) => {
                const answerInput = document.getElementById('open-answer-input');
                const answer = answerInput.value.trim();
                const submitBtn = event.currentTarget;

                if (answer) {
                    this.classroom.submitPollAnswer(answer);
                    answerInput.value = '';
                    submitBtn.textContent = '✅ Answer Sent!';
                    submitBtn.disabled = true;

                    setTimeout(() => {
                        submitBtn.textContent = 'Submit Answer';
                        submitBtn.disabled = false;
                    }, 2000);
                }
            };
        } else { 
            const labels = (pollData.type === 'yes_no') ? ['Yes', 'No'] : ['1', '2', '3', '4'];
            pollContentArea.innerHTML = `<p style="margin-top:0; margin-bottom:15px; font-weight:500;">The teacher is asking a quick question:</p>`;

            const buttonsWrapper = document.createElement('div');
            buttonsWrapper.style.cssText = 'display: flex; gap: 10px; flex-wrap: wrap;';

            for (let i = 1; i <= pollData.options; i++) {
                const button = document.createElement('button');
                button.textContent = labels[i-1];
                button.style.cssText = 'flex-grow: 1; padding: 12px; border: 1px solid #ccc; background: #f0f0f0; border-radius: 6px; cursor: pointer;';
                button.onclick = () => {
                    this.classroom.submitPollAnswer(i);
                    pollContentArea.innerHTML = '<p style="text-align:center; font-weight: bold; color: #28a745;">Thank you for your answer!</p>';
                };
                buttonsWrapper.appendChild(button);
            }
            pollContentArea.appendChild(buttonsWrapper);
        }
    },

    clearPollInterface: function() {
        const pollContainer = document.getElementById('classroom-poll-container');
        const pollContentArea = document.getElementById('classroom-poll-content-area');

        if (pollContainer) {
            pollContainer.style.display = 'none'; // Hide the window
            pollContainer.dataset.active = 'false';
        }
        if (pollContentArea) {
            pollContentArea.innerHTML = ''; // Clear its content for the next poll
        }
    }
};

document.addEventListener('DOMContentLoaded', () => {
    App.init();
});
// ================== END OF FILE ==================

================================================================================
File 6/11: public\index.html
================================================================================

<!DOCTYPE html>
<!--
 * Copyright © 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
-->
<html lang="en" dir="ltr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher Dashboard - ClassroomSDK</title>
    <!-- CSS Link -->
    <link rel="stylesheet" href="css/teacher-dashboard.css">
</head>
<body>
    <div id="loading-overlay">
        <div class="spinner"></div>
    </div>
    <!-- Header with Professional Navigation -->
    <header class="header">
        <div class="nav-container">
            <div class="logo">
                <span class="logo-icon">⚙️</span>
                <span class="logo-text">fireClass Control</span>
            </div>
            
            <div id="header-room-display" class="header-room-display">
                <span class="room-code-label">Room Code:</span>
                <span id="header-room-code" class="room-code-value">...</span>
                <img id="qr-code-image" class="qr-code" alt="QR Code for Classroom" title="Click to copy student link"/>
            </div>
            
            <nav>
                <ul class="nav-menu">
                    <!-- Quick Actions -->
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <span class="nav-icon">⚡</span>
                            <span>Quick Actions</span>
                        </a>
                        <div class="dropdown">
                            <div class="dropdown-header">Quick actions for lesson management</div>
                            <a href="#" class="dropdown-item success-item" onclick="sendQuickMessage('Let\'s start the lesson!')">
                                <span class="dropdown-icon">🎓</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Start Lesson</div>
                                    <div class="dropdown-desc">Send message to all students</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item warning-item" onclick="sendQuickMessage('Time for a break! Come back in 5 minutes.')">
                                <span class="dropdown-icon">☕</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Break Time</div>
                                    <div class="dropdown-desc">Announce break time</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item" onclick="sendQuickMessage('The lesson has ended. Well done everyone!')">
                                <span class="dropdown-icon">✅</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">End Lesson</div>
                                    <div class="dropdown-desc">Finish the lesson</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item danger-item" onclick="resetClassroomData()">
                                <span class="dropdown-icon">🔄</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">New Lesson</div>
                                    <div class="dropdown-desc">Clear all lesson data</div>
                                </div>
                            </a>
                        </div>
                    </li>

                    <!-- Games and Content -->
                    <li class="nav-item">
                        <a href="#" class="nav-link" onclick="window.teacherDashboard.openContentModal()">
                            <span class="nav-icon">🎮</span>
                            <span>Games & Content</span>
                        </a>
                    </li>

                    <!-- AI Management -->
                    <li class="nav-item">
                        <a href="#" class="nav-link" id="aiMenuLink">
                            <span class="nav-icon">🤖</span>
                            <span>AI Management</span>
                        </a>
                        <div class="dropdown">
                            <div class="dropdown-header">AI Assistant settings for students</div>
                            
                            <a href="#" class="dropdown-item" id="toggleAI" onclick="console.log('🟢 TRACE: AI button clicked'); window.teacherDashboard.toggleAIForClass()">
                                <span class="dropdown-icon" id="aiStatusIcon">🔴</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title" id="aiStatusText">AI disabled for students</div>
                                    <div class="dropdown-desc">Click to enable</div>
                                </div>
                            </a>
                            
                            <div style="padding: 10px 20px; border-top: 1px solid #f0f2f5; background: #f8f9fa;">
                                <strong style="font-size: 14px; color: #555;">🎯 Select model for class:</strong>
                                <div style="font-size: 12px; color: #777; margin-top: 2px;">Current model: <span class="current-ai-model">ChatGPT</span></div>
                            </div>
                            
                            <a href="#" class="dropdown-item ai-model-btn" data-model="chatgpt" onclick="window.teacherDashboard.switchAIModel('chatgpt')">
                                <span class="dropdown-icon">🤖</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">ChatGPT</div>
                                    <div class="dropdown-desc">Advanced model from OpenAI</div>
                                </div>
                            </a>
                            
                            <a href="#" class="dropdown-item ai-model-btn" data-model="claude" onclick="window.teacherDashboard.switchAIModel('claude')">
                                <span class="dropdown-icon">🧠</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Claude</div>
                                    <div class="dropdown-desc">Smart model from Anthropic</div>
                                </div>
                            </a>
                            
                            <a href="#" class="dropdown-item ai-model-btn" data-model="gemini" onclick="window.teacherDashboard.switchAIModel('gemini')">
                                <span class="dropdown-icon">✨</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Gemini</div>
                                    <div class="dropdown-desc">Google's model</div>
                                </div>
                            </a>
                        </div>
                    </li>

                    <!-- Tools -->
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <span class="nav-icon">🔧</span>
                            <span>Tools</span>
                        </a>
                        <div class="dropdown">
                            <div class="dropdown-header">Utilities and debugging tools</div>
                            <a href="#" class="dropdown-item" onclick="toggleDebug()">
                                <span class="dropdown-icon">🐛</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Debug Console</div>
                                    <div class="dropdown-desc">Show technical information</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item" onclick="exportData()">
                                <span class="dropdown-icon">📊</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Export Data</div>
                                    <div class="dropdown-desc">Save student list and messages</div>
                                </div>
                            </a>
                        </div>
                    </li>

                    <!-- Polls -->
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <span class="nav-icon">📊</span>
                            <span>Polls</span>
                        </a>
                        <div class="dropdown">
                            <a href="#" class="dropdown-item" onclick="window.teacherDashboard.openPollCreationModal()">
                                <span class="dropdown-icon">➕</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Start New Poll</div>
                                    <div class="dropdown-desc">Send quick question to class</div>
                                </div>
                            </a>
                        </div>
                    </li>

                    <!-- Reports -->
                    <li class="nav-item">
                        <a href="#" class="nav-link">
                            <span class="nav-icon">📊</span>
                            <span>Reports</span>
                        </a>
                        <div class="dropdown">
                            <div class="dropdown-header">Reports and analytics (FFU)</div>
                            <a href="#" class="dropdown-item" onclick="generateLessonSummary()">
                                <span class="dropdown-icon">📋</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Lesson Summary</div>  
                                    <div class="dropdown-desc">Comprehensive AI report of entire lesson</div>
                                </div>
                            </a>
                            <a href="#" class="dropdown-item" onclick="exportLessonData()">
                                <span class="dropdown-icon">💾</span>
                                <div class="dropdown-content">
                                    <div class="dropdown-title">Export Lesson Data</div>
                                    <div class="dropdown-desc">Save all data to file</div>
                                </div>
                            </a>
                        </div>
                    </li>
                </ul>
            </nav>

            <!-- Add this button right after the <nav> element -->
            <button id="resetScreensBtn" title="Stop current activity and clear all student screens" style="background: #e74c3c; color: white; border: none; padding: 8px 16px; border-radius: 20px; font-weight: 500; cursor: pointer; display: flex; align-items: center; gap: 8px;">
                <span style="font-size: 18px;">⏹️</span>
                <span>Clear Screens</span>
            </button>

            <div class="status-indicator" id="connectionStatus">
                <div class="status-dot"></div>
                <span>Connecting...</span>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Students Section -->
        <div class="section">
            <h2>👥 Connected Students (<span id="studentsCount">0</span>)</h2>
            <div id="studentsList" class="students-list">
                <div class="no-students">No students connected yet</div>
            </div>
        </div>

        <!-- Chat Section -->
        <div class="section">
            <h2>💬 Communication with Students</h2>
            <div id="messagesArea" class="chat-messages">
                <div class="no-messages">No messages yet</div>
            </div>
            <form id="chat-form" style="display: flex; gap: 10px;">
                <input type="text" id="chat-input" placeholder="Type a message to all students..." required style="flex-grow: 1;">
                <button type="submit">Send</button>
            </form>
        </div>

        <!-- Poll Section -->
        <div class="section" id="poll-section" style="display:none;">
            <h2>📊 Real-time Poll Results</h2>
            <div id="poll-results-container"></div>
            <button id="stop-poll-btn" style="background: #e74c3c; color: white; padding: 10px 20px; border: none; border-radius: 6px; cursor: pointer; margin-top: 20px;">End poll and hide results</button>
        </div>

        <!-- Activity Section -->
        <div class="section">
            <h2>📊 Recent Activity</h2>
            <div id="activitiesArea" class="activity-log">
                <div class="no-activity">No activity yet</div>
            </div>
        </div>
    </div>

    <!-- Templates -->
    <template id="studentTemplate">
        <div class="student-item">
            <div class="student-info">
                <span class="student-name"></span>
                <div class="student-actions"></div>
            </div>
        </div>
    </template>

    <!-- Private Message Modal -->
    <div id="privateMessageModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>✉️ Private Message</h3>
                <button class="modal-close">×</button>
            </div>
            <div class="modal-body">
                <p>Sending private message to: <span id="privateMessageRecipient"></span></p>
                <textarea id="privateMessageText" placeholder="Write your private message..." rows="4"></textarea>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Cancel</button>
                <button onclick="sendPrivateMessage()" class="primary">Send Message</button>
            </div>
        </div>
    </div>

    <!-- Message Modal -->
    <div id="messageModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>💬 Send Message to Class</h3>
                <button class="modal-close">×</button>
            </div>
            <div class="modal-body">
                <form id="messageForm">
                    <textarea id="messageText" placeholder="Write a message to all students..." rows="4" required></textarea>
                </form>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Cancel</button>
                <button type="submit" form="messageForm" class="primary">Send Message</button>
            </div>
        </div>
    </div>

    <!-- Custom Content Modal -->
    <div id="customContentModal" class="modal-overlay">
        <div class="modal-content" style="max-width: 600px;">
            <div class="modal-header">
                <h3>📤 Send Game or Content to Students</h3>
                <button class="modal-close">×</button>
            </div>
            <div class="modal-body" style="padding: 0;">
                <div id="game-list-container" style="padding: 20px; max-height: 300px; overflow-y: auto; border-bottom: 1px solid #eee;">
                </div>
                <div id="custom-url-section" style="padding: 20px; background: #f9f9f9;">
                    <p style="margin: 0 0 10px 0; font-weight: 500;">Or send custom link:</p>
                    <form id="customUrlForm" style="display: flex; gap: 10px;">
                        <input type="url" id="customUrlInput" placeholder="Enter full URL..." required style="flex-grow: 1; padding: 10px; border: 1px solid #ccc; border-radius: 6px;">
                        <button type="submit" class="primary" style="white-space: nowrap;">Send Link</button>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                 <a href="#" class="danger-item" onclick="window.teacherDashboard.sendCommand('LOAD_CONTENT', { url: 'about:blank' })" style="margin-right: auto; text-decoration:none; padding: 8px 12px; border-radius: 6px;">
                    ⏹️ Stop content and clear screens
                </a>
                <button class="modal-close">Close</button>
            </div>
        </div>
    </div>

    <!-- Poll Creation Modal -->
    <div id="poll-creation-modal" class="modal-overlay">
        <div class="modal-content" style="max-width: 400px;">
            <div class="modal-header">
                <h3>Select Poll Type</h3>
                <button class="modal-close">×</button>
            </div>
            <div class="modal-body" style="display: flex; flex-direction: column; gap: 15px;">
                <button class="poll-type-btn" data-type="yes_no">Yes / No Poll</button>
                <button class="poll-type-btn" data-type="multiple_choice">Multiple Choice Poll (1-4)</button>
                <button class="poll-type-btn" data-type="open_text">Open Question (Free text)</button>
            </div>
        </div>
    </div>

    <!-- Open Question Modal -->
    <div id="open-question-modal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Open Question Responses</h3>
                <button class="modal-close">×</button>
            </div>
            <div id="open-question-results" class="modal-body" style="max-height: 400px; overflow-y: auto;"></div>
            <div class="modal-footer" style="display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; gap: 10px;">
                    <button id="ai-summarize-btn">Summarize with AI</button>
                    <button id="ai-keywords-btn">Extract Keywords</button>
                </div>
                <button id="close-open-question-btn" class="danger-item" style="padding: 8px 16px; border-radius: 6px; border: none; cursor: pointer;">
                    ⏹️ End Poll
                </button>
            </div>
        </div>
    </div>

    <!-- End Lesson Modal -->
    <div id="end-lesson-modal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>🎓 End of Lesson</h3>
                <button class="modal-close">×</button>
            </div>
            <div class="modal-body">
                <p>The lesson has ended! Choose which report you'd like to generate:</p>
                <div style="display: flex; flex-direction: column; gap: 10px; margin-top: 15px;">
                    <button class="poll-type-btn" onclick="generateLessonSummary()">
                        📋 Comprehensive Summary Report
                    </button>
                    <button class="poll-type-btn" onclick="exportLessonData()">
                        💾 Export Lesson Data
                    </button>
                    <button class="poll-type-btn" onclick="generateStudentProgress()">
                        👥 Student Progress Report
                    </button>
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-close">Close</button>
            </div>
        </div>
    </div>

<!-- Scripts -->
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-functions-compat.js"></script>
    <script src="firebase-config.js"></script>

    <!-- טען את ClassroomSDK לפני teacher-dashboard -->
    <script src="js/ClassroomSDK.js"></script>
    <script src="js/teacher-dashboard.js"></script>

    <script>
        console.log('🟢 TRACE: index.html loaded');
        
        // וודא שFirebase מאותחל
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();
        const auth = firebase.auth();
        const functions = firebase.functions();
        
        console.log('🔍 Firebase initialized');
        console.log('🔍 ClassroomSDK available:', typeof ClassroomSDK);
        
        window.addEventListener('load', () => {
            console.log('🟢 TRACE: Window loaded, initializing teacher dashboard');
            window.teacherDashboard = new TeacherDashboard();
            window.teacherDashboard.init().then(() => {
                console.log('✅ Teacher dashboard fully initialized');
            }).catch(error => {
                console.error('❌ Teacher dashboard initialization failed:', error);
            });
        });
        
        // פונקציות גלובליות
        function sendQuickMessage(message) {
            console.log('🟢 TRACE: sendQuickMessage called');
            if (window.teacherDashboard) {
                window.teacherDashboard.sendMessageToClass(message);
            } else {
                console.error('❌ teacherDashboard not available');
            }
        }

        function testAIService() {
            console.log('🟢 TRACE: testAIService called');
            if (window.teacherDashboard && window.teacherDashboard.testAIService) {
                window.teacherDashboard.testAIService();
            } else {
                console.error('❌ testAIService not available');
            }
        }

        function sendPrivateMessage() {
            if (window.teacherDashboard && window.teacherDashboard.sendPrivateMessage) {
                window.teacherDashboard.sendPrivateMessage();
            }
        }

        // בדיקת debug למצב המערכת
        function debugSystemState() {
            console.log('🔍 System Debug:');
            console.log('- window.teacherDashboard:', !!window.teacherDashboard);
            console.log('- teacherDashboard.sdk:', !!window.teacherDashboard?.sdk);
            console.log('- sdk.toggleAI:', !!window.teacherDashboard?.sdk?.toggleAI);
            console.log('- ClassroomSDK:', typeof ClassroomSDK);
            
            if (window.teacherDashboard?.sdk) {
                console.log('- SDK methods:', Object.getOwnPropertyNames(window.teacherDashboard.sdk));
            }
        }
        
        // קרא לבדיקה אחרי 3 שניות
        setTimeout(debugSystemState, 3000);
    </script>
</body>
</html>

================================================================================
File 7/11: public\student-app.html
================================================================================

<!DOCTYPE html>
<!--
 * Copyright © 2025 Meir Livneh. All Rights Reserved.
 *
 * This software and associated documentation files (the "Software") are proprietary and confidential.
 * The Software is furnished under a license agreement and may be used or copied only in
 * accordance with the terms of the agreement.
 *
 * Unauthorized copying of this file, via any medium, is strictly prohibited.
-->
<html lang="en" dir="ltr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Learning Space</title>
    <link rel="stylesheet" href="css/student-app.css">
</head>
<body>
    <div id="login-container" class="container">
        <div class="login-box">
            <h1>✏️ Classroom Learning Space</h1>
            <p>To join the lesson, please enter your name and room code</p>
            <form id="login-form">
                <input type="text" id="player-name" placeholder="Your name" required>
                <div class="input-group">
                    <label for="teacher-uid">🏫 Room Code:</label>
                    <input type="text" id="teacher-uid" placeholder="Enter 4-digit room code" maxlength="4" required>
                </div>
                <button type="submit">Join Lesson</button>
            </form>
        </div>
    </div>

    <main id="main-container" style="display: none;">
        <iframe id="content-frame" src="about:blank" title="Lesson Content"></iframe>
    </main>

    <div id="poll-interface" style="position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); z-index: 1001; background: rgba(30, 30, 50, 0.9); padding: 20px; border-radius: 12px; display: none; gap: 15px; border: 2px solid white; box-shadow: 0 0 20px rgba(0,0,0,0.5);">
    </div>

    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.7/firebase-functions-compat.js"></script>

    <script src="firebase-config.js"></script>

    <script>
      // Initialize the Firebase app using your configuration
      firebase.initializeApp(firebaseConfig);

      // Create global references to the services we will use
      const db = firebase.firestore();
      const auth = firebase.auth();
      const functions = firebase.functions();
    </script>

    <script src="js/ClassroomSDK.js"></script>
    <script src="js/student-app.js"></script>
</body>
</html>

================================================================================
File 8/11: public\config.json
================================================================================

{
  "studentAppUrl": "https://class-board-ad64e.web.app/student-app.html",
  "games": [
    {
      "name": "AI Model Training",
      "description": "Visual Recognition training",
      "icon": "📚",
      "url": "https://meir.world/face-recognition/"
    },
    {
      "name": "TM",
      "description": "Goggle Teachable Machines",
      "icon": "🎯",
      "url": "https://teachablemachine.withgoogle.com/train"
    },
    {
      "name": "PhET",
      "description": "Projectile Data Lab",
      "icon": "🎯",
      "url": "https://phet.colorado.edu/sims/html/projectile-data-lab/latest/projectile-data-lab_all.html"
    },
    {
      "name": "Kahoot",
      "description": "Interactive quiz game",
      "icon": "🎯",
      "url": "https://kahoot.it"
    },
    {
      "name": "Wordwall",
      "description": "Word games and creation",
      "icon": "🎲",
      "url": "https://wordwall.net"
    },
    {
      "name": "Scratch",
      "description": "Programming and creation",
      "icon": "🐱",
      "url": "https://scratch.mit.edu"
    }
  ]
}


================================================================================
File 9/11: firebase.json
================================================================================

{
  "firestore": {
    "database": "(default)",
    "location": "me-west1",
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  },
  "functions": [
    {
      "source": "functions",
      "codebase": "default",
      "ignore": [
        "node_modules",
        ".git",
        "firebase-debug.log",
        "firebase-debug.*.log",
        "*.local"
      ]
    }
  ],
  "hosting": {
    "public": "BUILD",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ]
  }
}

================================================================================
File 10/11: functions\package.json
================================================================================

{
  "name": "functions",
  "description": "Cloud Functions for Firebase",
  "scripts": {
    "lint": "eslint .",
    "serve": "firebase emulators:start --only functions",
    "shell": "firebase functions:shell",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log"
  },
  "engines": {
    "node": "22"
  },
  "main": "index.js",
  "dependencies": {
    "firebase-admin": "^12.0.0",
    "firebase-functions": "^5.0.0"
  },
  "devDependencies": {
    "eslint": "^8.15.0",
    "eslint-config-google": "^0.14.0",
    "firebase-functions-test": "^3.1.0"
  },
  "private": true
}


================================================================================
File 11/11: installation_guide.md
================================================================================

# Complete Installation and Deployment Guide: Interactive Classroom System

This guide combines the initial installation process with deployment instructions, designed for setting up a new and clean environment on Firebase from scratch. The guide describes the manual process, and at the end presents scripts for automating the process.

---

## Step 0: Prerequisites

Ensure the following tools are installed on your computer:
* **Node.js**: Including the `npm` package manager.
* **Firebase CLI**: If not installed, run in terminal:
    ```bash
    npm install -g firebase-tools
    ```
* **Accounts**: Google account and accounts for external API services (e.g., OpenAI, Anthropic, Gemini).

---

## Step 1: Creating a Project and Environment in Firebase

This step is performed in the Firebase console.

### 1. Creating a New Project
* Go to the [Firebase Console](https://console.firebase.google.com/) and create a new project with a unique name (e.g., `interactive-class-prod`).
* During setup, you'll be asked to choose a default location for resources (**Default GCP resource location**). **This step is critical**. Choose a location that will be identical for all services, for example **`europe-west1 (Belgium)`**.
* Ensure the **"Enable Google Analytics for this project"** option is checked.

### 2. Upgrading to Blaze Payment Plan
* After creating the project, go to billing settings (gear icon > `Usage and billing`).
* Upgrade the project to the **Blaze (Pay as you go)** plan. This is a mandatory step to use the Cloud Functions required by the system.

---

## Step 2: Enabling Services and Setting Rules

Within the project you created:

### 1. Authentication
* In the side menu, go to `Authentication`.
* Go to the `Sign-in method` tab and enable the **Anonymous** authentication method.

### 2. Firestore Database
* Go to `Firestore Database` and click `Create database`.
* Choose to start in **Production mode**.
* Ensure the location selection is **identical** to what you chose in step 1 (e.g., `europe-west1`).
* After creating the database, go to the **Rules** tab, delete the existing content and paste the security rules from your project.

### 3. Secret Manager API
* Ensure this API is enabled for your project in Google Cloud Console. It's usually enabled automatically with Cloud Functions.

---

## Step 3: Setting Up External API Keys

1. Create API keys for the services you'll use (Gemini, Claude, ChatGPT, etc.) through their official platforms.
2. Save the keys in a secure and accessible place for the next step.

---

## Step 4: Setting Up the Local Project

### 1. Initialize Directory
* Create a new directory for the project, copy the source files to it, and open a terminal in it.

### 2. Link to Firebase Project
* Run the command:
    ```bash
    firebase init
    ```
* Choose **Use an existing project** and link it to the new project you created in Firebase.
* Select the following services: **Firestore**, **Functions**, and **Hosting**.
* Answer the initialization questions, but **avoid overwriting existing files** if asked (like `index.html` or `firestore.rules`).

### 3. Install Dependencies
* Navigate to the functions directory using `cd functions` and run `npm install` to install all required server-side dependencies.

---

## Step 5: Local File Configuration

### 1. Setting Deployment Location (Functions)
* Open the `functions/index.js` file.
* Ensure the variable at the top of the file matches the location you chose. For example: `const DEPLOY_REGION = "europe-west1";`.

### 2. Creating Firebase Configuration File for Application (Frontend)
* **Recommended:** Run the following command in terminal (in the root directory) to automatically create the configuration file:
    ```bash
    firebase apps:sdkconfig WEB --out public/firebase-config.js
    ```
    This command generates the exact `firebase-config.js` file for your project.

### 3. Application Configuration (`config.json`)
* Ensure there's a file named `config.json` in the `public` directory.
* Ensure its structure is valid and the `studentAppUrl` field contains the complete address to the student application **in your project**.

---

## Step 6: Setting Up Secrets (API Keys)

This is the secure way to manage your API keys. Run the following commands in terminal (from the root directory), and enter each key when prompted:

```bash
firebase functions:secrets:set GEMINI_API_KEY
firebase functions:secrets:set CLAUDE_API_KEY
firebase functions:secrets:set OPENAI_API_KEY
```

**Note:** You can add more API keys as needed for your project.

---

## Step 7: Deployment (Deploy)

### 1. (Optional) Build Step
If your project includes a build step (e.g., a script like `build.py` or `npm run build` that minifies files), run it now.

### 2. Final Deployment
To deploy the entire system (Hosting, Functions, Rules), run the command:

```bash
firebase deploy
```

At the end of the process, you'll receive a new **Hosting URL**. This is the address of your new, live, and independent system.

---

## Using Scripts for Automation

In addition to the manual process, the project includes scripts that allow you to perform some or all of the operations automatically.

### Build Script (build.py)

This script is designed to prepare the Frontend files for deployment in a Production environment.

**What does it do?**
- Deletes the old BUILD directory if it exists and creates it anew.
- Goes through all files in the public directory.
- Minifies `.js` files (using Terser), `.css` and `.html` files (using minify).
- Copies other files (like `config.json` and `firebase-config.js`) as-is to the BUILD directory.

**When to use?**
Run the script before deploying the project to upload a minified and efficient version to the server.

**How to use?**
1. Ensure you've installed the required dependencies shown at the top of the script (Terser, Minify).
2. Run the command:
   ```bash
   python build.py
   ```

**Important:** After running, update the `firebase.json` file so the Hosting directory is BUILD instead of public:

```json
"hosting": {
  "public": "BUILD",
  "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
  "rewrites": [{"source": "**", "destination": "/index.html"}]
}
```

3. Run `firebase deploy`.

### Automatic Installation and Deployment Script (deploy.py or install.py)

This script is a powerful tool that enables full automation of almost the entire manual process described in this guide. It's interactive and guides the user step by step.

**What does it do?**
- Checks system dependencies (node, npm, firebase).
- Guides the user in creating a new Firebase project through the terminal.
- Automatically enables required cloud services (`gcloud services enable`).
- Sets up local configuration files (`firebase.json`, `.firebaserc`, `config.json`).
- Runs dependency installation for functions (`npm install`).
- Securely guides API key entry and saves them as Secrets.
- Requests final approval before performing a general `firebase deploy`.

**Simulation Mode:**
By default, the script runs in simulation mode. It only prints the commands it would run without actually executing them. This allows you to see what's about to happen before making real changes.

**How to use?**

For running in simulation mode (recommended for first time):
```bash
python deploy.py
```

For running in "live" mode that performs all operations:
```bash
python deploy.py --live
```

**Note:** The automatic installation script is an advanced tool. Use it carefully, especially in live mode, as it makes changes to your cloud project.

---

## Troubleshooting

### Common Issues

1. **Region Mismatch**: Ensure all Firebase services use the same region.
2. **Billing Issues**: Make sure your project is on the Blaze plan.
3. **API Key Problems**: Verify all API keys are correctly set using Firebase secrets.
4. **Build Errors**: Check that all dependencies are installed in the functions directory.

### Support

For additional support, refer to the [Firebase Documentation](https://firebase.google.com/docs) or check the project's issue tracker.

---

## Security Considerations

- Always use Firebase secrets for API keys, never hardcode them.
- Regularly review and update your Firestore security rules.
- Monitor your Firebase usage to avoid unexpected charges.
- Keep your Firebase CLI and project dependencies updated.

---

## Next Steps

After successful deployment:
1. Test all system functionality
2. Set up monitoring and logging
3. Configure backup procedures
4. Plan for scaling and maintenance

This completes the installation and deployment process for your Interactive Classroom System.

================================================================================
END OF MCP COLLECTED FILES
================================================================================
