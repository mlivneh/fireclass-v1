class TeacherDashboard{constructor(){console.log("üü¢ TRACE: TeacherDashboard constructor called"),this.sdk=null,this.students=[],this.activities=[],this.isAiActive=!1,this.isAiActiveForStudents=!1,this.currentAiModel="chatgpt",this.aiWarningShown=!1,this.config={},this.debugMode=!1,this.currentQuestionResponses={},this.locale="en-US",this.rtlSupport=!1}debugLog(e,t=null){const s=document.querySelector(".enhanced-debug-console .debug-content");if(s){const n=document.createElement("div");if(n.style.direction="ltr",n.style.textAlign="left",n.innerHTML=`<div>[${(new Date).toLocaleTimeString(this.locale)}] ${e}</div>`,t){const e=document.createElement("pre");e.style.cssText="margin-left: 20px; color: #ffaa00; direction: ltr; text-align: left;",e.textContent=JSON.stringify(t,null,2),n.appendChild(e)}s.appendChild(n),s.scrollTop=s.scrollHeight}console.log(`[TEACHER DEBUG] ${e}`,t)}async init(){console.log("üü¢ TRACE: TeacherDashboard.init called");const e=document.getElementById("loading-overlay");try{this.debugLog("üöÄ Initializing teacher dashboard..."),await this.loadConfigData(),this.sdk=new ClassroomSDK,console.log("üîç SDK created:",!!this.sdk),console.log("üîç SDK toggleAI method:",!!this.sdk.toggleAI);const e=await this.sdk.loginAnonymously();this.debugLog("üëë Teacher logged in successfully",{uid:e.uid}),await this.sdk.init("teacher-dashboard",e),this.debugLog(`‚úÖ Teacher dashboard initialized with room: ${this.sdk.getRoomCode()}`),console.log("üîç Final SDK check before AI init:"),console.log("- SDK exists:",!!this.sdk),console.log("- toggleAI exists:",!!this.sdk.toggleAI),console.log("- DB exists:",!!this.sdk.db),console.log("- roomCode exists:",!!this.sdk.roomCode),this.sdk.createAIInterface(),this.initializeTeacherAI(),this.sdk.listenForStudents(this.updateStudentsList.bind(this)),this.sdk.listenForMessages(e=>{e&&e.length>0&&this.addMessage(e)}),this.sdk.listenForRoomUpdates(e=>{if(!e||!e.settings)return;e.settings.currentPoll&&this.displayPollResults(e.settings.currentPoll);const t=!0===e.settings.ai_active;this.isAiActive!==t&&(console.log(`üîÑ Syncing teacher UI. AI status changed to: ${t}`),this.isAiActive=t,this.updateAIButton())}),this.updateConnectionStatus(!0),this.setupEventListeners(),this.updateRoomDisplay(),setTimeout(()=>{this.checkSDKReady()?(this.showTeacherAIButton(),this.checkAIStatus(),console.log("‚úÖ Teacher AI button initialized and shown")):console.error("‚ùå SDK not ready even after timeout")},2e3),this.debugLog("‚úÖ Teacher dashboard initialized successfully.")}catch(e){console.error("üî• Critical initialization error:",e),console.error("üîç Error stack:",e.stack),this.updateConnectionStatus(!1)}finally{e&&e.classList.add("hidden")}}async initializeTeacherAI(){this.debugLog("ü§ñ Initializing AI for teacher...");try{await this.testAIService()||this.debugLog("‚ö†Ô∏è AI service not available, but continuing..."),this.showTeacherAIButton(),await this.checkAIStatus(),this.addActivity("ü§ñ AI interface enabled for teacher"),this.debugLog("‚úÖ Teacher AI initialized successfully")}catch(e){console.error("üî• Error initializing teacher AI:",e),this.debugLog("‚ùå Teacher AI initialization failed",e),this.showTeacherAIButton(),this.addActivity("‚ö†Ô∏è AI available but with limitations")}}showTeacherAIButton(){let e=document.getElementById("classroom-ai-btn");if(e||(console.log("üîß Creating missing AI button for teacher"),this.sdk&&this.sdk.createAIInterface&&(this.sdk.createAIInterface(),e=document.getElementById("classroom-ai-btn"))),e){e.style.display="block",e.style.opacity="1",e.style.visibility="visible";const t=document.createElement("div");t.className="teacher-ai-indicator",t.innerHTML="üéì",t.style.cssText="\n                position: absolute; top: -5px; left: -5px;\n                background: #28a745; color: white;\n                border-radius: 50%; width: 20px; height: 20px;\n                font-size: 12px; display: flex;\n                align-items: center; justify-content: center;\n                z-index: 10003;\n            ",e.querySelector(".teacher-ai-indicator")||(e.style.position="relative",e.appendChild(t)),this.debugLog("ü§ñ AI button displayed for teacher"),console.log("‚úÖ Teacher AI button is now visible and functional")}else console.error("‚ùå Could not create or find AI button for teacher")}async checkAIStatus(){if(console.log("üîç checkAIStatus called"),!this.sdk||!this.sdk.db)return console.log("‚ùå SDK or DB not ready"),void this.debugLog("‚ùå Cannot check AI status - SDK/DB not ready");try{const e=this.sdk.db.collection("rooms").doc(this.sdk.getRoomCode()),t=await e.get();if(console.log("üîç Room document exists:",t.exists),t.exists){const e=t.data();console.log("üîç Room data:",e),console.log("üîç AI settings:",e.settings),this.isAiActive=!0===e.settings?.ai_active,this.currentAiModel=e.settings?.ai_model||"chatgpt",console.log("üîç Set isAiActive to:",this.isAiActive),this.updateAIButton(),this.updateAIModelDisplay(),this.debugLog(`ü§ñ AI Status: ${this.isAiActive?"Active":"Disabled"}, Model: ${this.currentAiModel}`)}else console.log("‚ö†Ô∏è Room document not found"),this.debugLog("‚ö†Ô∏è Room document not found for AI status check")}catch(e){console.error("üî• Error checking AI status:",e),this.debugLog("‚ùå AI status check failed",e)}}updateAIButton(){const e=document.getElementById("aiStatusIcon"),t=document.getElementById("aiStatusText"),s=document.querySelector("#toggleAI .dropdown-desc");this.isAiActive?(e&&(e.textContent="üü¢"),t&&(t.textContent="AI Active for Students"),s&&(s.textContent="Click to disable")):(e&&(e.textContent="üî¥"),t&&(t.textContent="AI Disabled for Students"),s&&(s.textContent="Click to enable"))}updateAIModelDisplay(){document.querySelectorAll(".current-ai-model").forEach(e=>{e.textContent=this.getModelDisplayName(this.currentAiModel)}),document.querySelectorAll(".dropdown-item.ai-model-btn").forEach(e=>{e.dataset.model===this.currentAiModel?(e.style.backgroundColor="#e8f5e9",e.style.fontWeight="bold"):(e.style.backgroundColor="",e.style.fontWeight="normal")})}getModelDisplayName(e){return{chatgpt:"ChatGPT",claude:"Claude",gemini:"Gemini"}[e]||e}async toggleAIForClass(){if(console.log("--- Starting toggleAIForClass ---"),!this.sdk||!this.sdk.db||!this.sdk.roomCode)return console.error("SDK not ready. Cannot update Firestore."),void alert("SDK not ready. Please refresh.");const e=this.sdk.db.collection("rooms").doc(this.sdk.roomCode);try{const t=await e.get();if(!t.exists)return void console.error("Document does not exist!");const s=!t.data().settings.ai_active;await e.update({"settings.ai_active":s}),console.log(`SUCCESS: Firestore updated. New state is: ${s}`),this.isAiActive=s,this.updateAIButton(),s?this.addActivity("ü§ñ AI enabled for class."):this.addActivity("üî¥ AI disabled for class.")}catch(e){console.error("FAILURE: Could not update Firestore.",e),alert("Failed to update the AI status. See console for error details.")}}checkSDKReady(){return this.sdk?this.sdk.toggleAI?this.sdk.db?this.sdk.roomCode?(console.log("‚úÖ SDK ready for AI operations"),!0):(console.error("‚ùå Room code not set"),!1):(console.error("‚ùå Firebase DB not ready"),!1):(console.error("‚ùå toggleAI method missing from SDK"),console.log("üîç Available methods:",Object.getOwnPropertyNames(this.sdk)),!1):(console.error("‚ùå SDK not initialized"),!1)}async switchAIModel(e){if(this.sdk){this.debugLog(`üîÑ Switching AI model to: ${e}`);try{const t=this.sdk.db.collection("rooms").doc(this.sdk.getRoomCode());await t.update({"settings.ai_model":e,last_activity:firebase.firestore.FieldValue.serverTimestamp()}),this.currentAiModel=e,this.updateAIButton(),this.updateAIModelDisplay();const s=this.getModelDisplayName(e);this.addActivity(`üîÑ AI model switched to: ${s}`),this.debugLog(`‚úÖ AI model switched to: ${e}`),this.isAiActive&&this.showModelSwitchMessage(s)}catch(e){console.error("üî• Error switching AI model:",e),this.debugLog("‚ùå AI model switch failed",e),alert("Error switching AI model: "+e.message)}}}showModelSwitchMessage(e){const t=document.createElement("div");t.style.cssText="\n            position: fixed; top: 20px; right: 20px; z-index: 10000;\n            background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);\n            color: white; padding: 15px 20px; border-radius: 8px;\n            box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);\n            font-weight: bold; max-width: 300px;\n            animation: slideInRight 0.5s ease;\n            direction: ltr; text-align: left;\n        ",t.innerHTML=`\n            <div style="display: flex; align-items: center; gap: 10px;">\n                <span style="font-size: 24px;">üîÑ</span>\n                <div>\n                    <div>AI Model Switched!</div>\n                    <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">\n                        Now using: ${e}\n                    </div>\n                </div>\n            </div>\n        `,document.body.appendChild(t),setTimeout(()=>{t.style.animation="slideOutRight 0.5s ease",setTimeout(()=>t.remove(),500)},3e3)}async testAIService(){if(!this.sdk)return this.debugLog("‚ùå SDK not available for AI test"),!1;if(!this.sdk.auth?.currentUser)return this.debugLog("‚ùå User not authenticated for AI test"),!1;if(!this.sdk.functions)return this.debugLog("‚ùå Firebase Functions not initialized"),!1;this.debugLog("üîç Testing AI service availability...");try{if(this.sdk.testAIService){const e=await this.sdk.testAIService();if(e.available)return this.debugLog("‚úÖ AI service available and working",e),!0;{this.debugLog("‚ùå AI service not available",e);let t="AI service not available";return"functions/failed-precondition"===e.code?t="AI service not configured (missing API key)":"functions/unauthenticated"===e.code?t="Authentication error in system":"functions/not-initialized"===e.code&&(t="Firebase Functions not initialized"),this.aiWarningShown||(this.aiWarningShown=!0,setTimeout(()=>{confirm(`‚ö†Ô∏è ${t}\n\nWould you like to try again?`)&&this.testAIService()},1e3)),!1}}return this.debugLog("‚ö†Ô∏è SDK testAIService method not found, assuming available"),!0}catch(e){return this.debugLog("üî• AI service test failed with error",e),console.error("AI test error:",e),!0}}updateConnectionStatus(e){const t=document.getElementById("connectionStatus");t&&(e?(t.textContent="üü¢ Connected to Firebase",t.className="connection-status connected"):(t.textContent="üî¥ Not Connected",t.className="connection-status disconnected"))}addActivity(e){const t=document.getElementById("activitiesArea");if(!t)return;const s=document.createElement("div");s.className="activity-item",s.style.direction="ltr",s.style.textAlign="left",s.innerHTML=`\n            <span class="activity-time">${(new Date).toLocaleTimeString(this.locale)}</span>\n            <span class="activity-text">${e}</span>\n        `,t.appendChild(s),t.scrollTop=t.scrollHeight}updateStudentsList(e){this.students=e;const t=document.getElementById("studentsList"),s=document.getElementById("studentsCount");if(!t||!s)return;if(t.innerHTML="",s.textContent=this.students.length,0===this.students.length)return void(t.innerHTML='<div class="no-students">No students connected currently</div>');const n=document.getElementById("studentTemplate");this.students.forEach(e=>{const s=e.name||"Unknown Student",o=document.importNode(n.content,!0),i=o.querySelector(".student-name");i&&(i.textContent=s);const a=o.querySelector(".student-actions");if(a){const t=document.createElement("button");t.textContent="Private Message",t.className="private-message-btn",t.onclick=()=>this.openPrivateMessageModal(e),a.appendChild(t)}t.appendChild(o)}),this.addActivity(`Student list updated. ${this.students.length} students connected.`),console.log(`‚úÖ Updated student list: ${this.students.length} students displayed`)}addMessage(e){Array.isArray(e)?e.forEach(e=>this.addSingleMessage(e)):this.addSingleMessage(e)}addSingleMessage(e){const t=document.getElementById("messagesArea"),s=document.getElementById("messagesCount");if(!t)return;const n=e.timestamp?.seconds+"_"+e.sender_uid+"_"+e.content.substring(0,20);if(t.querySelector(`[data-message-id="${n}"]`))return void console.log("‚ö†Ô∏è Duplicate message prevented:",e.content.substring(0,30));const o=e?.sender||"Unknown User",i=e?.content||"Empty Message",a=e?.timestamp,d=!0===e?.is_teacher,r=!0===e?.is_private,c=t.querySelector(".no-messages");if(c&&c.remove(),s){const e=parseInt(s.textContent)||0;s.textContent=e+1}const l=document.createElement("div");l.className="message-item",l.setAttribute("data-message-id",n),l.style.direction="ltr",l.style.textAlign="left";let u="";d?u="üéì ":r&&(u="üîí ");let h="Unknown Time";if(a)try{h=(a.toDate?a.toDate():new Date(a)).toLocaleTimeString(this.locale)}catch(e){console.warn("Cannot parse timestamp:",a),h=(new Date).toLocaleTimeString(this.locale)}l.innerHTML=`\n            <div class="message-header">\n                <span class="message-sender">${u}${o}</span>\n                <span class="message-time">${h}</span>\n            </div>\n            <div class="message-content">${i}</div>\n            ${r?'<div class="message-private-indicator">Private Message</div>':""}\n        `,r&&(l.style.borderLeft="4px solid #ffc107",l.style.background="#fff9c4"),t.appendChild(l),t.scrollTop=t.scrollHeight,console.log(`‚úÖ Message added: ${i.substring(0,30)}...`)}sendCommand(e,t={}){this.sdk&&(this.sdk.sendCommand(e,t),this.addActivity(`üì§ Command sent: ${e}`))}sendMessageToClass(e){e&&e.trim()&&this.sdk&&(this.sdk.sendMessage(e),this.addActivity(`üí¨ Message sent to class: ${e}`))}showAIActivationMessage(){const e=document.createElement("div");if(e.style.cssText="\n            position: fixed; top: 20px; right: 20px; z-index: 10000;\n            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);\n            color: white; padding: 15px 20px; border-radius: 8px;\n            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);\n            font-weight: bold; max-width: 300px;\n            animation: slideInRight 0.5s ease;\n            direction: ltr; text-align: left;\n        ",e.innerHTML='\n            <div style="display: flex; align-items: center; gap: 10px;">\n                <span style="font-size: 24px;">ü§ñ</span>\n                <div>\n                    <div>AI Enabled Successfully!</div>\n                    <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">\n                        Students can now ask questions\n                    </div>\n                </div>\n            </div>\n        ',document.body.appendChild(e),setTimeout(()=>{e.style.animation="slideOutRight 0.5s ease",setTimeout(()=>e.remove(),500)},4e3),!document.getElementById("ai-notification-styles")){const e=document.createElement("style");e.id="ai-notification-styles",e.textContent="\n                @keyframes slideInRight {\n                    from { transform: translateX(100%); opacity: 0; }\n                    to { transform: translateX(0); opacity: 1; }\n                }\n                @keyframes slideOutRight {\n                    from { transform: translateX(0); opacity: 1; }\n                    to { transform: translateX(100%); opacity: 0; }\n                }\n            ",document.head.appendChild(e)}}setupEventListeners(){document.querySelectorAll(".dropdown-item.ai-model-btn").forEach(e=>{e.addEventListener("click",t=>{t.preventDefault();const s=e.dataset.model;s&&this.switchAIModel(s)})}),document.querySelectorAll(".modal-close").forEach(e=>{e.addEventListener("click",e=>{var t;t=e.target,t.closest(".modal-overlay")?.classList.remove("visible")})});const e=document.getElementById("privateMessageForm");e&&e.addEventListener("submit",e=>{e.preventDefault(),this.sendPrivateMessage()});const t=document.getElementById("customUrlForm");t&&t.addEventListener("submit",e=>{e.preventDefault();const t=document.getElementById("customUrlInput"),s=t.value.trim();s&&(this.sendSelectedGame(s),t.value="")}),document.querySelectorAll(".poll-type-btn").forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.type;this.startPoll(t)})});const s=document.getElementById("stop-poll-btn");s&&s.addEventListener("click",()=>this.stopPoll());const n=document.getElementById("chat-form");n&&n.addEventListener("submit",e=>{e.preventDefault();const t=document.getElementById("chat-input"),s=t.value.trim();s&&(this.sdk.sendMessage(s),t.value="")}),document.getElementById("ai-summarize-btn")?.addEventListener("click",()=>this.handleAiAnalysis("summarize")),document.getElementById("ai-keywords-btn")?.addEventListener("click",()=>this.handleAiAnalysis("keywords")),document.getElementById("close-open-question-btn")?.addEventListener("click",()=>this.closeOpenEndedQuestion()),document.querySelector("#open-question-modal .modal-close")?.addEventListener("click",()=>this.closeOpenEndedQuestion()),document.getElementById("resetScreensBtn")?.addEventListener("click",()=>{confirm("Are you sure you want to reset all student screens? This will stop any active poll or content.")&&this.resetStudentScreens()})}openPrivateMessageModal(e){const t=document.getElementById("privateMessageModal");t&&(document.getElementById("privateMessageRecipient").textContent=e.name,t.dataset.studentUid=e.uid,t.classList.add("visible"))}async sendPrivateMessage(){const e=document.getElementById("privateMessageModal"),t=document.getElementById("privateMessageText").value.trim(),s=e.dataset.studentUid;if(t&&s)try{await this.sdk.sendPrivateMessage(t,s),this.addActivity(`‚úâÔ∏è Private message sent to ${document.getElementById("privateMessageRecipient").textContent}`),document.getElementById("privateMessageText").value="",e.classList.remove("visible")}catch(e){console.error("üî• Error sending private message:",e),alert("Error sending private message")}}async resetClassroomData(){if(this.sdk&&confirm("Are you sure you want to reset the classroom? This action will delete all data."))try{const e=this.sdk.db.collection("rooms").doc(this.sdk.getRoomCode());await e.delete(),await this.sdk.initializeRoom(),this.addActivity("üîÑ Classroom reset successfully"),alert("Classroom reset successfully!")}catch(e){console.error("üî• Error resetting classroom:",e),alert("Error resetting classroom")}}updateRoomDisplay(){const e=this.sdk?this.sdk.getRoomCode():null;if(!e)return;const t=document.getElementById("header-room-code");t&&(t.textContent=e);const s=document.getElementById("qr-code-image");if(s){const t=`${window.location.origin}/${this.config.studentAppUrl}?classroom=${e}`,n=`https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(t)}`;s.src=n,s.onclick=()=>{navigator.clipboard.writeText(t).then(()=>{this.addActivity("‚úÖ Student link copied")}).catch(e=>{console.error("Failed to copy URL: ",e)})}}}async loadConfigData(){try{const e=await fetch("config.json");if(!e.ok)throw new Error("Network response was not ok");this.config=await e.json(),this.debugLog("‚úÖ Config file loaded successfully",this.config)}catch(e){console.error("üî• Error loading config file:",e),this.config={studentAppUrl:"student-app.html",games:[]}}}openContentModal(){document.getElementById("customContentModal")?.classList.add("visible"),this.populateGamesList()}populateGamesList(){const e=document.getElementById("game-list-container");if(!e)return;const t=this.config?.games||[];e.innerHTML="",0!==t.length?t.forEach(t=>{const s=document.createElement("a");s.href="#",s.className="dropdown-item",s.onclick=e=>{e.preventDefault(),this.sendSelectedGame(t.url)},s.innerHTML=`\n                <span class="dropdown-icon">${t.icon||"üîó"}</span>\n                <div class="dropdown-content">\n                    <div class="dropdown-title">${t.name}</div>\n                    <div class="dropdown-desc">${t.description}</div>\n                </div>\n            `,e.appendChild(s)}):e.innerHTML="<p>No games found in config.json</p>"}sendSelectedGame(e){if(!e)return;this.sendCommand("LOAD_CONTENT",{url:e});const t=document.getElementById("customContentModal");t&&t.querySelector(".modal-close").click()}openPollCreationModal(){this.debugLog("üìä Opening poll creation window"),document.getElementById("poll-creation-modal")?.classList.add("visible")}async startPoll(e){this.debugLog(`üìä Starting a new poll of type: ${e}`);try{const t=this.sdk.db.collection("rooms").doc(this.sdk.roomCode),s=await t.get(),n=s.data()?.settings?.currentPoll;n&&n.isActive&&(this.debugLog("Archiving previous active poll...",n.id),await this.sdk.saveQuestionToHistory(n),this.addActivity(`üìù Previous poll (${n.id.substring(0,5)}) archived.`));const o={yes_no:2,multiple_choice:4,open_text:0},i={id:"poll_"+Date.now()+"_"+Math.random().toString(36).substr(2,9),type:e,question:"",options:o[e],isActive:!0,createdAt:firebase.firestore.FieldValue.serverTimestamp(),responses:{}};await t.update({"settings.currentPoll":i}),"open_text"===e?(this.currentQuestionResponses={},document.getElementById("open-question-modal")?.classList.add("visible")):document.getElementById("poll-section").style.display="block",this.addActivity(`üìä Started new poll of type: ${e}`),document.getElementById("poll-creation-modal")?.classList.remove("visible"),this.debugLog(`‚úÖ New poll ${i.id} started successfully.`)}catch(e){console.error("üî• Failed to start a new poll:",e),this.debugLog("‚ùå Error during startPoll",e),this.addActivity("‚ùå Error starting new poll.")}}stopPoll(){this.debugLog("üìä Stopping poll"),this.sdk.stopPoll(),document.getElementById("poll-section").style.display="none",this.addActivity("‚èπÔ∏è Poll ended")}displayPollResults(e){if(e&&"open_text"===e.type&&e.isActive){const t=document.getElementById("open-question-results");if(!t)return;t.innerHTML="";const s=e.responses||{};this.currentQuestionResponses=s;for(const e in s)if(Object.hasOwnProperty.call(s,e)){const n=s[e];if(Array.isArray(n)&&n.length>0){const s=n[n.length-1],o=document.createElement("div");o.innerHTML=`<strong>${e} (${n.length} versions):</strong><p style="margin: 5px 0 0 0; color: #333;">${s}</p>`,o.style.borderBottom="1px solid #eee",o.style.padding="10px 0",t.appendChild(o)}}}else if(e&&("multiple_choice"===e.type||"yes_no"===e.type)){const t=document.getElementById("poll-results-container"),s=document.getElementById("poll-section");if(!t||!s)return;s.style.display="block",t.innerHTML="";const n=e.responses||{},o=Object.keys(n).length,i={};for(let t=1;t<=e.options;t++)i[t]=0;Object.values(n).forEach(e=>{void 0!==i[e]&&i[e]++});for(let s=1;s<=e.options;s++){const n=i[s],a=o>0?(n/o*100).toFixed(1):0,d=`\n                    <div style="margin-bottom: 12px;">\n                        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">\n                            <strong>${"yes_no"===e.type?1===s?"Yes":"No":`Option ${s}`}</strong>\n                            <span>${n} votes (${a}%)</span>\n                        </div>\n                        <div style="background: #e0e0e0; border-radius: 4px; overflow: hidden;">\n                            <div style="width: ${a}%; background: #42a5f5; height: 20px; transition: width 0.3s ease;"></div>\n                        </div>\n                    </div>\n                `;t.innerHTML+=d}}}async handleAiAnalysis(e){if(this.sdk&&"none"===this.sdk.aiContainer.style.display&&this.sdk.toggleAI(),0===Object.keys(this.currentQuestionResponses).length)return void this.sdk.addAIMessage("ü§ñ","No responses to analyze currently.",!1);const t=JSON.stringify(this.currentQuestionResponses,null,2),s=this.sdk.getInterfaceLanguage();let n;n="summarize"===e?"he"===s?`◊ú◊§◊†◊ô◊ö ◊™◊©◊ï◊ë◊ï◊™ ◊©◊ú ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊ú◊©◊ê◊ú◊î. ◊õ◊ú ◊©◊ù ◊™◊ú◊û◊ô◊ì ◊û◊û◊ï◊§◊î ◊ú◊û◊¢◊®◊ö ◊©◊ú ◊î◊™◊©◊ï◊ë◊ï◊™ ◊©◊ú◊ï (◊û◊î◊®◊ê◊©◊ï◊†◊î ◊ú◊ê◊ó◊®◊ï◊†◊î). ◊°◊õ◊ù ◊ê◊™ ◊®◊û◊™ ◊î◊î◊ë◊†◊î ◊î◊õ◊ô◊™◊™◊ô◊™, ◊ñ◊î◊î ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊™◊©◊ï◊ë◊ï◊™◊ô◊î◊ù ◊û◊¶◊ë◊ô◊¢◊ï◊™ ◊¢◊ú ◊ß◊ï◊©◊ô, ◊ï◊¶◊ô◊ô◊ü ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊î◊®◊ê◊ï ◊©◊ô◊§◊ï◊® ◊û◊©◊û◊¢◊ï◊™◊ô ◊ë◊ô◊ü ◊î◊í◊®◊°◊ê◊ï◊™:\n\n${t}`:`Here are student responses to a question. Each student name maps to an array of their answers (from first to last). Summarize the class's understanding, identify students whose answers indicate difficulty, and point out students who showed significant improvement across versions:\n\n${t}`:"he"===s?`◊ñ◊î◊î ◊ê◊™ 10 ◊û◊ô◊ú◊ï◊™ ◊î◊û◊§◊™◊ó ◊î◊†◊§◊ï◊¶◊ï◊™ ◊ï◊î◊û◊©◊û◊¢◊ï◊™◊ô◊ï◊™ ◊ë◊ô◊ï◊™◊® ◊û◊î◊™◊©◊ï◊ë◊ï◊™ ◊î◊ë◊ê◊ï◊™:\n\n${t}`:`Extract the 10 most frequent and significant keywords from the following text:\n\n${t}`,this.sdk.sendAIMessage(n,s),this.addActivity('üìà Sent "situation analysis" to AI.');try{const e=this.sdk.db.collection("rooms").doc(this.sdk.getRoomCode());await e.update({"settings.currentPoll.responses":{}}),this.addActivity("üîÑ Response repository in Firestore reset and ready for next round.")}catch(e){console.error("Error resetting poll responses:",e)}}async generateLessonSummary(){this.addActivity("üìä Preparing comprehensive summary report..."),this.sdk&&this.sdk.aiContainer&&"none"===this.sdk.aiContainer.style.display&&this.sdk.toggleAI();try{const e=await this.sdk.db.collection("rooms").doc(this.sdk.getRoomCode()).collection("questionHistory").orderBy("createdAt").get();let t=[];e.forEach(e=>{t.push(e.data())});const s=this.buildLessonSummaryPrompt(t),n=this.sdk.getInterfaceLanguage();await this.sdk.sendAIMessage(s,n),this.addActivity("‚úÖ Summary report sent to AI"),document.getElementById("end-lesson-modal")?.classList.remove("visible")}catch(e){console.error("üî• Error creating summary report:",e),this.addActivity("‚ùå Error creating summary report")}}buildLessonSummaryPrompt(e){if("he"===this.sdk.getInterfaceLanguage()){let t="◊ì◊ï◊ó ◊°◊ô◊õ◊ï◊ù ◊û◊ß◊ô◊£ ◊ú◊©◊ô◊¢◊ï◊®\n\n";return t+=`◊û◊°◊§◊® ◊©◊ê◊ú◊ï◊™ ◊©◊†◊©◊ê◊ú◊ï: ${e.length}\n\n`,e.forEach((e,s)=>{t+=`◊©◊ê◊ú◊î ${s+1}: ${e.question||"◊©◊ê◊ú◊î ◊ú◊ú◊ê ◊õ◊ï◊™◊®◊™"}\n`,t+="◊™◊©◊ï◊ë◊ï◊™ ◊î◊™◊ú◊û◊ô◊ì◊ô◊ù:\n",Object.entries(e.responses||{}).forEach(([e,s])=>{Array.isArray(s)?t+=`  ${e}: ${s.join(" ‚Üí ")}\n`:t+=`  ${e}: ${s}\n`}),t+="\n"}),t+="◊ê◊†◊ê ◊°◊õ◊ù:\n",t+="1. ◊î◊™◊ß◊ì◊û◊ï◊™ ◊õ◊ú◊ú◊ô◊™ ◊©◊ú ◊î◊õ◊ô◊™◊î\n",t+="2. ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊î◊®◊ê◊ï ◊©◊ô◊§◊ï◊® ◊û◊©◊û◊¢◊ï◊™◊ô\n",t+="3. ◊™◊ú◊û◊ô◊ì◊ô◊ù ◊©◊†◊ñ◊ß◊ß◊ô◊ù ◊ú◊™◊©◊ï◊û◊™ ◊ú◊ë ◊†◊ï◊°◊§◊™\n",t+="4. ◊†◊ï◊©◊ê◊ô◊ù ◊©◊†◊ï◊™◊®◊ï ◊ú◊ê ◊ë◊®◊ï◊®◊ô◊ù\n",t+="5. ◊î◊û◊ú◊¶◊ï◊™ ◊ú◊©◊ô◊¢◊ï◊® ◊î◊ë◊ê\n",t}{let t="Comprehensive Lesson Summary Report\n\n";return t+=`Number of questions asked: ${e.length}\n\n`,e.forEach((e,s)=>{t+=`Question ${s+1}: ${e.question||"Untitled question"}\n`,t+="Student responses:\n",Object.entries(e.responses||{}).forEach(([e,s])=>{Array.isArray(s)?t+=`  ${e}: ${s.join(" ‚Üí ")}\n`:t+=`  ${e}: ${s}\n`}),t+="\n"}),t+="Please summarize:\n",t+="1. Overall class progress\n",t+="2. Students who showed significant improvement\n",t+="3. Students who need additional attention\n",t+="4. Topics that remain unclear\n",t+="5. Recommendations for next lesson\n",t}}async closeOpenEndedQuestion(){if(this.sdk)try{const e=this.sdk.db.collection("rooms").doc(this.sdk.getRoomCode()),t=await e.get(),s=t.data()?.settings?.currentPoll;s&&s.isActive&&(await this.sdk.saveQuestionToHistory(s),await e.update({"settings.currentPoll.isActive":!1}),this.addActivity("üìù Open question closed - student modal closed")),document.getElementById("open-question-modal")?.classList.remove("visible")}catch(e){console.error("üî• Error closing open question:",e),this.addActivity("‚ùå Error closing question")}}async resetStudentScreens(){if(this.sdk){console.log("üîÑ Resetting all student screens...");try{await this.sdk.sendCommand("LOAD_CONTENT",{url:"about:blank"}),await this.sdk.stopPoll(),this.addActivity("‚èπÔ∏è All student screens have been cleared.")}catch(e){console.error("Error resetting student screens:",e)}}}}function sendQuickMessage(e){window.teacherDashboard&&window.teacherDashboard.sendMessageToClass(e)}function sendGameContent(e){window.teacherDashboard&&window.teacherDashboard.sendCommand("LOAD_CONTENT",{url:e})}function sendCustomContent(){document.getElementById("customContentModal").classList.add("visible")}function toggleAIForClass(){window.teacherDashboard&&window.teacherDashboard.toggleAIForClass()}function switchAIModel(e){window.teacherDashboard&&window.teacherDashboard.switchAIModel(e)}function resetClassroomData(){window.teacherDashboard&&window.teacherDashboard.resetClassroomData()}function toggleDebug(){const e=document.querySelector(".enhanced-debug-console");e&&e.classList.toggle("visible")}function sendMessage(){document.getElementById("messageModal").classList.add("visible")}function exportData(){if(!window.teacherDashboard)return;const e={students:window.teacherDashboard.students,activities:window.teacherDashboard.activities,timestamp:(new Date).toISOString(),roomCode:window.teacherDashboard.sdk?.getRoomCode()},t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),s=URL.createObjectURL(t),n=document.createElement("a");n.href=s,n.download=`classroom-data-${(new Date).toISOString().split("T")[0]}.json`,n.click(),URL.revokeObjectURL(s)}function updateAIMenuStatus(e){document.querySelectorAll(".ai-menu-item").forEach(t=>{t.style.opacity=e?"1":"0.5",t.style.pointerEvents=e?"auto":"none"})}function copyClassroomId(){if(!window.teacherDashboard||!window.teacherDashboard.sdk)return void alert("System is not ready yet");const e=window.teacherDashboard.sdk.getRoomCode();navigator.clipboard.writeText(e).then(()=>{const e=document.getElementById("copyClassroomIdBtn");if(e){const t=e.textContent;e.textContent="‚úÖ Copied!",e.style.background="rgba(76, 175, 80, 0.3)",setTimeout(()=>{e.textContent=t,e.style.background="rgba(255,255,255,0.2)"},2e3)}window.teacherDashboard&&window.teacherDashboard.addActivity("üìã Classroom ID copied to clipboard")}).catch(e=>{console.error("Copy error:",e),alert("Error copying ID. Try copying manually.")})}function testAIService(){window.teacherDashboard&&window.teacherDashboard.testAIService().then(e=>{e?alert("‚úÖ AI service is available and working properly!"):alert("‚ùå AI service is currently unavailable. Check settings.")})}function debugClassroom(){if(!window.teacherDashboard)return void console.log("Teacher dashboard not initialized");const e={Room:window.teacherDashboard.sdk?.getRoomCode(),Students:window.teacherDashboard.students.length,"AI Active":window.teacherDashboard.isAiActive,"AI Model":window.teacherDashboard.currentAiModel,"SDK Connected":!!window.teacherDashboard.sdk,"Init Time":(new Date).toLocaleTimeString("en-US")};return console.table(e),e}document.addEventListener("DOMContentLoaded",function(){document.querySelectorAll(".message-item, .activity-item, .student-item").forEach(e=>{e.style.direction="ltr",e.style.textAlign="left"});const e=document.createElement("style");e.textContent="\n        body, * {\n            font-family: 'Segoe UI', Tahoma, Arial, 'Roboto', 'Open Sans', sans-serif !important;\n        }\n        \n        .message-content, .activity-text, .student-name {\n            direction: ltr !important;\n            text-align: left !important;\n            unicode-bidi: embed !important;\n        }\n        \n        .debug-log, .debug-content {\n            direction: ltr !important;\n            text-align: left !important;\n        }\n        \n        /* Fix English texts in interface */\n        .dropdown-title, .dropdown-desc, .tool-label, .tool-desc {\n            direction: ltr !important;\n            text-align: left !important;\n        }\n    ",document.head.appendChild(e)});